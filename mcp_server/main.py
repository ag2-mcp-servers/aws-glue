# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:42:41+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query

from models import (
    AccessDeniedException,
    AlreadyExistsException,
    BatchCreatePartitionRequest,
    BatchCreatePartitionResponse,
    BatchDeleteConnectionRequest,
    BatchDeleteConnectionResponse,
    BatchDeletePartitionRequest,
    BatchDeletePartitionResponse,
    BatchDeleteTableRequest,
    BatchDeleteTableResponse,
    BatchDeleteTableVersionRequest,
    BatchDeleteTableVersionResponse,
    BatchGetBlueprintsRequest,
    BatchGetBlueprintsResponse,
    BatchGetCrawlersRequest,
    BatchGetCrawlersResponse,
    BatchGetCustomEntityTypesRequest,
    BatchGetCustomEntityTypesResponse,
    BatchGetDataQualityResultRequest,
    BatchGetDataQualityResultResponse,
    BatchGetDevEndpointsRequest,
    BatchGetDevEndpointsResponse,
    BatchGetJobsRequest,
    BatchGetJobsResponse,
    BatchGetPartitionRequest,
    BatchGetPartitionResponse,
    BatchGetTriggersRequest,
    BatchGetTriggersResponse,
    BatchGetWorkflowsRequest,
    BatchGetWorkflowsResponse,
    BatchStopJobRunRequest,
    BatchStopJobRunResponse,
    BatchUpdatePartitionRequest,
    BatchUpdatePartitionResponse,
    CancelDataQualityRuleRecommendationRunRequest,
    CancelDataQualityRuleRecommendationRunResponse,
    CancelDataQualityRulesetEvaluationRunRequest,
    CancelDataQualityRulesetEvaluationRunResponse,
    CancelMLTaskRunRequest,
    CancelMLTaskRunResponse,
    CancelStatementRequest,
    CancelStatementResponse,
    CheckSchemaVersionValidityInput,
    CheckSchemaVersionValidityResponse,
    ConcurrentModificationException,
    ConcurrentRunsExceededException,
    ConditionCheckFailureException,
    ConflictException,
    CrawlerNotRunningException,
    CrawlerRunningException,
    CrawlerStoppingException,
    CreateBlueprintRequest,
    CreateBlueprintResponse,
    CreateClassifierRequest,
    CreateClassifierResponse,
    CreateConnectionRequest,
    CreateConnectionResponse,
    CreateCrawlerRequest,
    CreateCrawlerResponse,
    CreateCustomEntityTypeRequest,
    CreateCustomEntityTypeResponse,
    CreateDatabaseRequest,
    CreateDatabaseResponse,
    CreateDataQualityRulesetRequest,
    CreateDataQualityRulesetResponse,
    CreateDevEndpointRequest,
    CreateDevEndpointResponse,
    CreateJobRequest,
    CreateJobResponse,
    CreateMLTransformRequest,
    CreateMLTransformResponse,
    CreatePartitionIndexRequest,
    CreatePartitionIndexResponse,
    CreatePartitionRequest,
    CreatePartitionResponse,
    CreateRegistryInput,
    CreateRegistryResponse,
    CreateSchemaInput,
    CreateSchemaResponse,
    CreateScriptRequest,
    CreateScriptResponse,
    CreateSecurityConfigurationRequest,
    CreateSecurityConfigurationResponse,
    CreateSessionRequest,
    CreateSessionResponse,
    CreateTableRequest,
    CreateTableResponse,
    CreateTriggerRequest,
    CreateTriggerResponse,
    CreateUserDefinedFunctionRequest,
    CreateUserDefinedFunctionResponse,
    CreateWorkflowRequest,
    CreateWorkflowResponse,
    DeleteBlueprintRequest,
    DeleteBlueprintResponse,
    DeleteClassifierRequest,
    DeleteClassifierResponse,
    DeleteColumnStatisticsForPartitionRequest,
    DeleteColumnStatisticsForPartitionResponse,
    DeleteColumnStatisticsForTableRequest,
    DeleteColumnStatisticsForTableResponse,
    DeleteConnectionRequest,
    DeleteConnectionResponse,
    DeleteCrawlerRequest,
    DeleteCrawlerResponse,
    DeleteCustomEntityTypeRequest,
    DeleteCustomEntityTypeResponse,
    DeleteDatabaseRequest,
    DeleteDatabaseResponse,
    DeleteDataQualityRulesetRequest,
    DeleteDataQualityRulesetResponse,
    DeleteDevEndpointRequest,
    DeleteDevEndpointResponse,
    DeleteJobRequest,
    DeleteJobResponse,
    DeleteMLTransformRequest,
    DeleteMLTransformResponse,
    DeletePartitionIndexRequest,
    DeletePartitionIndexResponse,
    DeletePartitionRequest,
    DeletePartitionResponse,
    DeleteRegistryInput,
    DeleteRegistryResponse,
    DeleteResourcePolicyRequest,
    DeleteResourcePolicyResponse,
    DeleteSchemaInput,
    DeleteSchemaResponse,
    DeleteSchemaVersionsInput,
    DeleteSchemaVersionsResponse,
    DeleteSecurityConfigurationRequest,
    DeleteSecurityConfigurationResponse,
    DeleteSessionRequest,
    DeleteSessionResponse,
    DeleteTableRequest,
    DeleteTableResponse,
    DeleteTableVersionRequest,
    DeleteTableVersionResponse,
    DeleteTriggerRequest,
    DeleteTriggerResponse,
    DeleteUserDefinedFunctionRequest,
    DeleteUserDefinedFunctionResponse,
    DeleteWorkflowRequest,
    DeleteWorkflowResponse,
    EntityNotFoundException,
    FederatedResourceAlreadyExistsException,
    FederationSourceException,
    FederationSourceRetryableException,
    GetBlueprintRequest,
    GetBlueprintResponse,
    GetBlueprintRunRequest,
    GetBlueprintRunResponse,
    GetBlueprintRunsRequest,
    GetBlueprintRunsResponse,
    GetCatalogImportStatusRequest,
    GetCatalogImportStatusResponse,
    GetClassifierRequest,
    GetClassifierResponse,
    GetClassifiersRequest,
    GetClassifiersResponse,
    GetColumnStatisticsForPartitionRequest,
    GetColumnStatisticsForPartitionResponse,
    GetColumnStatisticsForTableRequest,
    GetColumnStatisticsForTableResponse,
    GetConnectionRequest,
    GetConnectionResponse,
    GetConnectionsRequest,
    GetConnectionsResponse,
    GetCrawlerMetricsRequest,
    GetCrawlerMetricsResponse,
    GetCrawlerRequest,
    GetCrawlerResponse,
    GetCrawlersRequest,
    GetCrawlersResponse,
    GetCustomEntityTypeRequest,
    GetCustomEntityTypeResponse,
    GetDatabaseRequest,
    GetDatabaseResponse,
    GetDatabasesRequest,
    GetDatabasesResponse,
    GetDataCatalogEncryptionSettingsRequest,
    GetDataCatalogEncryptionSettingsResponse,
    GetDataflowGraphRequest,
    GetDataflowGraphResponse,
    GetDataQualityResultRequest,
    GetDataQualityResultResponse,
    GetDataQualityRuleRecommendationRunRequest,
    GetDataQualityRuleRecommendationRunResponse,
    GetDataQualityRulesetEvaluationRunRequest,
    GetDataQualityRulesetEvaluationRunResponse,
    GetDataQualityRulesetRequest,
    GetDataQualityRulesetResponse,
    GetDevEndpointRequest,
    GetDevEndpointResponse,
    GetDevEndpointsRequest,
    GetDevEndpointsResponse,
    GetJobBookmarkRequest,
    GetJobBookmarkResponse,
    GetJobRequest,
    GetJobResponse,
    GetJobRunRequest,
    GetJobRunResponse,
    GetJobRunsRequest,
    GetJobRunsResponse,
    GetJobsRequest,
    GetJobsResponse,
    GetMappingRequest,
    GetMappingResponse,
    GetMLTaskRunRequest,
    GetMLTaskRunResponse,
    GetMLTaskRunsRequest,
    GetMLTaskRunsResponse,
    GetMLTransformRequest,
    GetMLTransformResponse,
    GetMLTransformsRequest,
    GetMLTransformsResponse,
    GetPartitionIndexesRequest,
    GetPartitionIndexesResponse,
    GetPartitionRequest,
    GetPartitionResponse,
    GetPartitionsRequest,
    GetPartitionsResponse,
    GetPlanRequest,
    GetPlanResponse,
    GetRegistryInput,
    GetRegistryResponse,
    GetResourcePoliciesRequest,
    GetResourcePoliciesResponse,
    GetResourcePolicyRequest,
    GetResourcePolicyResponse,
    GetSchemaByDefinitionInput,
    GetSchemaByDefinitionResponse,
    GetSchemaInput,
    GetSchemaResponse,
    GetSchemaVersionInput,
    GetSchemaVersionResponse,
    GetSchemaVersionsDiffInput,
    GetSchemaVersionsDiffResponse,
    GetSecurityConfigurationRequest,
    GetSecurityConfigurationResponse,
    GetSecurityConfigurationsRequest,
    GetSecurityConfigurationsResponse,
    GetSessionRequest,
    GetSessionResponse,
    GetStatementRequest,
    GetStatementResponse,
    GetTableRequest,
    GetTableResponse,
    GetTablesRequest,
    GetTablesResponse,
    GetTableVersionRequest,
    GetTableVersionResponse,
    GetTableVersionsRequest,
    GetTableVersionsResponse,
    GetTagsRequest,
    GetTagsResponse,
    GetTriggerRequest,
    GetTriggerResponse,
    GetTriggersRequest,
    GetTriggersResponse,
    GetUnfilteredPartitionMetadataRequest,
    GetUnfilteredPartitionMetadataResponse,
    GetUnfilteredPartitionsMetadataRequest,
    GetUnfilteredPartitionsMetadataResponse,
    GetUnfilteredTableMetadataRequest,
    GetUnfilteredTableMetadataResponse,
    GetUserDefinedFunctionRequest,
    GetUserDefinedFunctionResponse,
    GetUserDefinedFunctionsRequest,
    GetUserDefinedFunctionsResponse,
    GetWorkflowRequest,
    GetWorkflowResponse,
    GetWorkflowRunPropertiesRequest,
    GetWorkflowRunPropertiesResponse,
    GetWorkflowRunRequest,
    GetWorkflowRunResponse,
    GetWorkflowRunsRequest,
    GetWorkflowRunsResponse,
    GlueEncryptionException,
    IdempotentParameterMismatchException,
    IllegalBlueprintStateException,
    IllegalSessionStateException,
    IllegalWorkflowStateException,
    ImportCatalogToGlueRequest,
    ImportCatalogToGlueResponse,
    InternalServiceException,
    InvalidInputException,
    InvalidStateException,
    ListBlueprintsRequest,
    ListBlueprintsResponse,
    ListCrawlersRequest,
    ListCrawlersResponse,
    ListCrawlsRequest,
    ListCrawlsResponse,
    ListCustomEntityTypesRequest,
    ListCustomEntityTypesResponse,
    ListDataQualityResultsRequest,
    ListDataQualityResultsResponse,
    ListDataQualityRuleRecommendationRunsRequest,
    ListDataQualityRuleRecommendationRunsResponse,
    ListDataQualityRulesetEvaluationRunsRequest,
    ListDataQualityRulesetEvaluationRunsResponse,
    ListDataQualityRulesetsRequest,
    ListDataQualityRulesetsResponse,
    ListDevEndpointsRequest,
    ListDevEndpointsResponse,
    ListJobsRequest,
    ListJobsResponse,
    ListMLTransformsRequest,
    ListMLTransformsResponse,
    ListRegistriesInput,
    ListRegistriesResponse,
    ListSchemasInput,
    ListSchemasResponse,
    ListSchemaVersionsInput,
    ListSchemaVersionsResponse,
    ListSessionsRequest,
    ListSessionsResponse,
    ListStatementsRequest,
    ListStatementsResponse,
    ListTriggersRequest,
    ListTriggersResponse,
    ListWorkflowsRequest,
    ListWorkflowsResponse,
    MLTransformNotReadyException,
    NoScheduleException,
    OperationTimeoutException,
    PermissionTypeMismatchException,
    PutDataCatalogEncryptionSettingsRequest,
    PutDataCatalogEncryptionSettingsResponse,
    PutResourcePolicyRequest,
    PutResourcePolicyResponse,
    PutSchemaVersionMetadataInput,
    PutSchemaVersionMetadataResponse,
    PutWorkflowRunPropertiesRequest,
    PutWorkflowRunPropertiesResponse,
    QuerySchemaVersionMetadataInput,
    QuerySchemaVersionMetadataResponse,
    RegisterSchemaVersionInput,
    RegisterSchemaVersionResponse,
    RemoveSchemaVersionMetadataInput,
    RemoveSchemaVersionMetadataResponse,
    ResetJobBookmarkRequest,
    ResetJobBookmarkResponse,
    ResourceNotReadyException,
    ResourceNumberLimitExceededException,
    ResumeWorkflowRunRequest,
    ResumeWorkflowRunResponse,
    RunStatementRequest,
    RunStatementResponse,
    SchedulerNotRunningException,
    SchedulerRunningException,
    SchedulerTransitioningException,
    SearchTablesRequest,
    SearchTablesResponse,
    StartBlueprintRunRequest,
    StartBlueprintRunResponse,
    StartCrawlerRequest,
    StartCrawlerResponse,
    StartCrawlerScheduleRequest,
    StartCrawlerScheduleResponse,
    StartDataQualityRuleRecommendationRunRequest,
    StartDataQualityRuleRecommendationRunResponse,
    StartDataQualityRulesetEvaluationRunRequest,
    StartDataQualityRulesetEvaluationRunResponse,
    StartExportLabelsTaskRunRequest,
    StartExportLabelsTaskRunResponse,
    StartImportLabelsTaskRunRequest,
    StartImportLabelsTaskRunResponse,
    StartJobRunRequest,
    StartJobRunResponse,
    StartMLEvaluationTaskRunRequest,
    StartMLEvaluationTaskRunResponse,
    StartMLLabelingSetGenerationTaskRunRequest,
    StartMLLabelingSetGenerationTaskRunResponse,
    StartTriggerRequest,
    StartTriggerResponse,
    StartWorkflowRunRequest,
    StartWorkflowRunResponse,
    StopCrawlerRequest,
    StopCrawlerResponse,
    StopCrawlerScheduleRequest,
    StopCrawlerScheduleResponse,
    StopSessionRequest,
    StopSessionResponse,
    StopTriggerRequest,
    StopTriggerResponse,
    StopWorkflowRunRequest,
    StopWorkflowRunResponse,
    TagResourceRequest,
    TagResourceResponse,
    UntagResourceRequest,
    UntagResourceResponse,
    UpdateBlueprintRequest,
    UpdateBlueprintResponse,
    UpdateClassifierRequest,
    UpdateClassifierResponse,
    UpdateColumnStatisticsForPartitionRequest,
    UpdateColumnStatisticsForPartitionResponse,
    UpdateColumnStatisticsForTableRequest,
    UpdateColumnStatisticsForTableResponse,
    UpdateConnectionRequest,
    UpdateConnectionResponse,
    UpdateCrawlerRequest,
    UpdateCrawlerResponse,
    UpdateCrawlerScheduleRequest,
    UpdateCrawlerScheduleResponse,
    UpdateDatabaseRequest,
    UpdateDatabaseResponse,
    UpdateDataQualityRulesetRequest,
    UpdateDataQualityRulesetResponse,
    UpdateDevEndpointRequest,
    UpdateDevEndpointResponse,
    UpdateJobFromSourceControlRequest,
    UpdateJobFromSourceControlResponse,
    UpdateJobRequest,
    UpdateJobResponse,
    UpdateMLTransformRequest,
    UpdateMLTransformResponse,
    UpdatePartitionRequest,
    UpdatePartitionResponse,
    UpdateRegistryInput,
    UpdateRegistryResponse,
    UpdateSchemaInput,
    UpdateSchemaResponse,
    UpdateSourceControlFromJobRequest,
    UpdateSourceControlFromJobResponse,
    UpdateTableRequest,
    UpdateTableResponse,
    UpdateTriggerRequest,
    UpdateTriggerResponse,
    UpdateUserDefinedFunctionRequest,
    UpdateUserDefinedFunctionResponse,
    UpdateWorkflowRequest,
    UpdateWorkflowResponse,
    ValidationException,
    VersionMismatchException,
    XAmzTarget,
    XAmzTarget1,
    XAmzTarget2,
    XAmzTarget3,
    XAmzTarget4,
    XAmzTarget5,
    XAmzTarget6,
    XAmzTarget7,
    XAmzTarget8,
    XAmzTarget9,
    XAmzTarget10,
    XAmzTarget11,
    XAmzTarget12,
    XAmzTarget13,
    XAmzTarget14,
    XAmzTarget15,
    XAmzTarget16,
    XAmzTarget17,
    XAmzTarget18,
    XAmzTarget19,
    XAmzTarget20,
    XAmzTarget21,
    XAmzTarget22,
    XAmzTarget23,
    XAmzTarget24,
    XAmzTarget25,
    XAmzTarget26,
    XAmzTarget27,
    XAmzTarget28,
    XAmzTarget29,
    XAmzTarget30,
    XAmzTarget31,
    XAmzTarget32,
    XAmzTarget33,
    XAmzTarget34,
    XAmzTarget35,
    XAmzTarget36,
    XAmzTarget37,
    XAmzTarget38,
    XAmzTarget39,
    XAmzTarget40,
    XAmzTarget41,
    XAmzTarget42,
    XAmzTarget43,
    XAmzTarget44,
    XAmzTarget45,
    XAmzTarget46,
    XAmzTarget47,
    XAmzTarget48,
    XAmzTarget49,
    XAmzTarget50,
    XAmzTarget51,
    XAmzTarget52,
    XAmzTarget53,
    XAmzTarget54,
    XAmzTarget55,
    XAmzTarget56,
    XAmzTarget57,
    XAmzTarget58,
    XAmzTarget59,
    XAmzTarget60,
    XAmzTarget61,
    XAmzTarget62,
    XAmzTarget63,
    XAmzTarget64,
    XAmzTarget65,
    XAmzTarget66,
    XAmzTarget67,
    XAmzTarget68,
    XAmzTarget69,
    XAmzTarget70,
    XAmzTarget71,
    XAmzTarget72,
    XAmzTarget73,
    XAmzTarget74,
    XAmzTarget75,
    XAmzTarget76,
    XAmzTarget77,
    XAmzTarget78,
    XAmzTarget79,
    XAmzTarget80,
    XAmzTarget81,
    XAmzTarget82,
    XAmzTarget83,
    XAmzTarget84,
    XAmzTarget85,
    XAmzTarget86,
    XAmzTarget87,
    XAmzTarget88,
    XAmzTarget89,
    XAmzTarget90,
    XAmzTarget91,
    XAmzTarget92,
    XAmzTarget93,
    XAmzTarget94,
    XAmzTarget95,
    XAmzTarget96,
    XAmzTarget97,
    XAmzTarget98,
    XAmzTarget99,
    XAmzTarget100,
    XAmzTarget101,
    XAmzTarget102,
    XAmzTarget103,
    XAmzTarget104,
    XAmzTarget105,
    XAmzTarget106,
    XAmzTarget107,
    XAmzTarget108,
    XAmzTarget109,
    XAmzTarget110,
    XAmzTarget111,
    XAmzTarget112,
    XAmzTarget113,
    XAmzTarget114,
    XAmzTarget115,
    XAmzTarget116,
    XAmzTarget117,
    XAmzTarget118,
    XAmzTarget119,
    XAmzTarget120,
    XAmzTarget121,
    XAmzTarget122,
    XAmzTarget123,
    XAmzTarget124,
    XAmzTarget125,
    XAmzTarget126,
    XAmzTarget127,
    XAmzTarget128,
    XAmzTarget129,
    XAmzTarget130,
    XAmzTarget131,
    XAmzTarget132,
    XAmzTarget133,
    XAmzTarget134,
    XAmzTarget135,
    XAmzTarget136,
    XAmzTarget137,
    XAmzTarget138,
    XAmzTarget139,
    XAmzTarget140,
    XAmzTarget141,
    XAmzTarget142,
    XAmzTarget143,
    XAmzTarget144,
    XAmzTarget145,
    XAmzTarget146,
    XAmzTarget147,
    XAmzTarget148,
    XAmzTarget149,
    XAmzTarget150,
    XAmzTarget151,
    XAmzTarget152,
    XAmzTarget153,
    XAmzTarget154,
    XAmzTarget155,
    XAmzTarget156,
    XAmzTarget157,
    XAmzTarget158,
    XAmzTarget159,
    XAmzTarget160,
    XAmzTarget161,
    XAmzTarget162,
    XAmzTarget163,
    XAmzTarget164,
    XAmzTarget165,
    XAmzTarget166,
    XAmzTarget167,
    XAmzTarget168,
    XAmzTarget169,
    XAmzTarget170,
    XAmzTarget171,
    XAmzTarget172,
    XAmzTarget173,
    XAmzTarget174,
    XAmzTarget175,
    XAmzTarget176,
    XAmzTarget177,
    XAmzTarget178,
    XAmzTarget179,
    XAmzTarget180,
    XAmzTarget181,
    XAmzTarget182,
    XAmzTarget183,
    XAmzTarget184,
    XAmzTarget185,
    XAmzTarget186,
    XAmzTarget187,
    XAmzTarget188,
    XAmzTarget189,
    XAmzTarget190,
    XAmzTarget191,
    XAmzTarget192,
    XAmzTarget193,
    XAmzTarget194,
    XAmzTarget195,
    XAmzTarget196,
    XAmzTarget197,
    XAmzTarget198,
    XAmzTarget199,
    XAmzTarget200,
    XAmzTarget201,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='<fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='AWS Glue',
    version='2017-03-31',
    servers=[
        {
            'description': 'The AWS Glue multi-region endpoint',
            'url': 'http://glue.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The AWS Glue multi-region endpoint',
            'url': 'https://glue.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The AWS Glue endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://glue.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The AWS Glue endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://glue.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchCreatePartition',
    description=""" Creates one or more partitions in a batch operation. """,
    tags=['batch_operations', 'partition_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_create_partition(
    x__amz__target: XAmzTarget = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchCreatePartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchDeleteConnection',
    description=""" Deletes a list of connection definitions from the Data Catalog. """,
    tags=['batch_operations', 'deletion_operations', 'connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_delete_connection(
    x__amz__target: XAmzTarget1 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchDeleteConnectionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchDeletePartition',
    description=""" Deletes one or more partitions in a batch operation. """,
    tags=['batch_operations', 'deletion_operations', 'partition_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_delete_partition(
    x__amz__target: XAmzTarget2 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchDeletePartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchDeleteTable',
    description=""" <p>Deletes multiple tables at once.</p> <note> <p>After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. Glue deletes these "orphaned" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>BatchDeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note> """,
    tags=['batch_operations', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_delete_table(
    x__amz__target: XAmzTarget3 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchDeleteTableRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchDeleteTableVersion',
    description=""" Deletes a specified batch of versions of a table. """,
    tags=['batch_operations', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_delete_table_version(
    x__amz__target: XAmzTarget4 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchDeleteTableVersionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchGetBlueprints',
    description=""" Retrieves information about a list of blueprints. """,
    tags=['batch_operations', 'blueprint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_get_blueprints(
    x__amz__target: XAmzTarget5 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchGetBlueprintsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchGetCrawlers',
    description=""" Returns a list of resource metadata for a given list of crawler names. After calling the <code>ListCrawlers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags. """,
    tags=['crawler_operations', 'batch_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_get_crawlers(
    x__amz__target: XAmzTarget6 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchGetCrawlersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchGetCustomEntityTypes',
    description=""" Retrieves the details for the custom patterns specified by a list of names. """,
    tags=['custom_entity_management', 'entity_type_management', 'batch_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_get_custom_entity_types(
    x__amz__target: XAmzTarget7 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchGetCustomEntityTypesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchGetDataQualityResult',
    description=""" Retrieves a list of data quality results for the specified result IDs. """,
    tags=['data_quality_management', 'batch_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_get_data_quality_result(
    x__amz__target: XAmzTarget8 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchGetDataQualityResultRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchGetDevEndpoints',
    description=""" Returns a list of resource metadata for a given list of development endpoint names. After calling the <code>ListDevEndpoints</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags. """,
    tags=['endpoint_management', 'batch_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_get_dev_endpoints(
    x__amz__target: XAmzTarget9 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchGetDevEndpointsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchGetJobs',
    description=""" Returns a list of resource metadata for a given list of job names. After calling the <code>ListJobs</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.  """,
    tags=['batch_operations', 'job_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_get_jobs(
    x__amz__target: XAmzTarget10 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchGetJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchGetPartition',
    description=""" Retrieves partitions in a batch request. """,
    tags=['batch_operations', 'partition_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_get_partition(
    x__amz__target: XAmzTarget11 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchGetPartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchGetTriggers',
    description=""" Returns a list of resource metadata for a given list of trigger names. After calling the <code>ListTriggers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags. """,
    tags=['trigger_management', 'batch_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_get_triggers(
    x__amz__target: XAmzTarget12 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchGetTriggersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchGetWorkflows',
    description=""" Returns a list of resource metadata for a given list of workflow names. After calling the <code>ListWorkflows</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags. """,
    tags=['batch_operations', 'workflow_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_get_workflows(
    x__amz__target: XAmzTarget13 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchGetWorkflowsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchStopJobRun',
    description=""" Stops one or more job runs for a specified job definition. """,
    tags=['batch_operations', 'job_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_stop_job_run(
    x__amz__target: XAmzTarget14 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchStopJobRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.BatchUpdatePartition',
    description=""" Updates one or more partitions in a batch operation. """,
    tags=['batch_operations', 'partition_management', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_update_partition(
    x__amz__target: XAmzTarget15 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: BatchUpdatePartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CancelDataQualityRuleRecommendationRun',
    description=""" Cancels the specified recommendation run that was being used to generate rules. """,
    tags=['data_quality_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def cancel_data_quality_rule_recommendation_run(
    x__amz__target: XAmzTarget16 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CancelDataQualityRuleRecommendationRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CancelDataQualityRulesetEvaluationRun',
    description=""" Cancels a run where a ruleset is being evaluated against a data source. """,
    tags=['data_quality_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def cancel_data_quality_ruleset_evaluation_run(
    x__amz__target: XAmzTarget17 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CancelDataQualityRulesetEvaluationRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CancelMLTaskRun',
    description=""" Cancels (stops) a task run. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can cancel a machine learning task run at any time by calling <code>CancelMLTaskRun</code> with a task run's parent transform's <code>TransformID</code> and the task run's <code>TaskRunId</code>.  """,
    tags=['task_execution', 'ml_transform_operations', 'machine_learning_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def cancel_m_l_task_run(
    x__amz__target: XAmzTarget18 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CancelMLTaskRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CancelStatement',
    description=""" Cancels the statement. """,
    tags=['resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def cancel_statement(
    x__amz__target: XAmzTarget19 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CancelStatementRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CheckSchemaVersionValidity',
    description=""" Validates the supplied schema. This call has no side effects, it simply validates using the supplied schema using <code>DataFormat</code> as the format. Since it does not take a schema set name, no compatibility checks are performed. """,
    tags=['schema_version_management', 'data_quality_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def check_schema_version_validity(
    x__amz__target: XAmzTarget20 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CheckSchemaVersionValidityInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateBlueprint',
    description=""" Registers a blueprint with Glue. """,
    tags=['blueprint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_blueprint(
    x__amz__target: XAmzTarget21 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateBlueprintRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateClassifier',
    description=""" Creates a classifier in the user's account. This can be a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on which field of the request is present. """,
    tags=['entity_type_management', 'custom_entity_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_classifier(
    x__amz__target: XAmzTarget22 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateClassifierRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateConnection',
    description=""" Creates a connection definition in the Data Catalog. """,
    tags=['connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_connection(
    x__amz__target: XAmzTarget23 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateConnectionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateCrawler',
    description=""" Creates a new crawler with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in the <code>s3Targets</code> field, the <code>jdbcTargets</code> field, or the <code>DynamoDBTargets</code> field. """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_crawler(
    x__amz__target: XAmzTarget24 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateCrawlerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateCustomEntityType',
    description=""" <p>Creates a custom pattern that is used to detect sensitive data across the columns and rows of your structured data.</p> <p>Each custom pattern you create specifies a regular expression and an optional list of context words. If no context words are passed only a regular expression is checked.</p> """,
    tags=['custom_entity_management', 'entity_type_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_custom_entity_type(
    x__amz__target: XAmzTarget25 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateCustomEntityTypeRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateDataQualityRuleset',
    description=""" <p>Creates a data quality ruleset with DQDL rules applied to a specified Glue table.</p> <p>You create the ruleset using the Data Quality Definition Language (DQDL). For more information, see the Glue developer guide.</p> """,
    tags=['data_quality_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_data_quality_ruleset(
    x__amz__target: XAmzTarget26 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateDataQualityRulesetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateDatabase',
    description=""" Creates a new database in a Data Catalog. """,
    tags=['database_management', 'database_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_database(
    x__amz__target: XAmzTarget27 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateDatabaseRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateDevEndpoint',
    description=""" Creates a new development endpoint. """,
    tags=['endpoint_management', 'data_encryption_settings'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_dev_endpoint(
    x__amz__target: XAmzTarget28 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateDevEndpointRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateJob',
    description=""" Creates a new job definition. """,
    tags=['job_management', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_job(
    x__amz__target: XAmzTarget29 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateMLTransform',
    description=""" <p>Creates an Glue machine learning transform. This operation creates the transform and all the necessary parameters to train it.</p> <p>Call this operation as the first step in the process of using a machine learning transform (such as the <code>FindMatches</code> transform) for deduplicating data. You can provide an optional <code>Description</code>, in addition to the parameters that you want to use for your algorithm.</p> <p>You must also specify certain parameters for the tasks that Glue runs on your behalf as part of learning from your data and creating a high-quality machine learning transform. These parameters include <code>Role</code>, and optionally, <code>AllocatedCapacity</code>, <code>Timeout</code>, and <code>MaxRetries</code>. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html">Jobs</a>.</p> """,
    tags=[
        'ml_transform_operations',
        'machine_learning_management',
        'transform_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_m_l_transform(
    x__amz__target: XAmzTarget30 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateMLTransformRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreatePartition',
    description=""" Creates a new partition. """,
    tags=['partition_management', 'batch_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_partition(
    x__amz__target: XAmzTarget31 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreatePartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreatePartitionIndex',
    description=""" Creates a specified partition index in an existing table. """,
    tags=[
        'batch_operations',
        'database_management',
        'partition_management',
        'table_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_partition_index(
    x__amz__target: XAmzTarget32 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreatePartitionIndexRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateRegistry',
    description=""" Creates a new registry which may be used to hold a collection of schemas. """,
    tags=['registry_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_registry(
    x__amz__target: XAmzTarget33 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateRegistryInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateSchema',
    description=""" <p>Creates a new schema set and registers the schema definition. Returns an error if the schema set already exists without actually registering the version.</p> <p>When the schema set is created, a version checkpoint will be set to the first version. Compatibility mode "DISABLED" restricts any additional schema versions from being added after the first schema version. For all other compatibility modes, validation of compatibility settings will be applied only from the second version onwards when the <code>RegisterSchemaVersion</code> API is used.</p> <p>When this API is called without a <code>RegistryId</code>, this will create an entry for a "default-registry" in the registry database tables, if it is not already present.</p> """,
    tags=['security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_schema(
    x__amz__target: XAmzTarget34 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateSchemaInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateScript',
    description=""" Transforms a directed acyclic graph (DAG) into code. """,
    tags=[
        'security_configuration_management',
        'data_encryption_settings',
        'resource_policy_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_script(
    x__amz__target: XAmzTarget35 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateScriptRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateSecurityConfiguration',
    description=""" Creates a new security configuration. A security configuration is a set of security properties that can be used by Glue. You can use a security configuration to encrypt data at rest. For information about using security configurations in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/encryption-security-configuration.html">Encrypting Data Written by Crawlers, Jobs, and Development Endpoints</a>. """,
    tags=['security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_security_configuration(
    x__amz__target: XAmzTarget36 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateSecurityConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateSession',
    description=""" Creates a new session. """,
    tags=['security_configuration_management', 'connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_session(
    x__amz__target: XAmzTarget37 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateSessionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateTable',
    description=""" Creates a new table definition in the Data Catalog. """,
    tags=['database_management', 'table_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_table(
    x__amz__target: XAmzTarget38 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateTableRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateTrigger',
    description=""" Creates a new trigger. """,
    tags=['trigger_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_trigger(
    x__amz__target: XAmzTarget39 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateTriggerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateUserDefinedFunction',
    description=""" Creates a new function definition in the Data Catalog. """,
    tags=['user_defined_function_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_user_defined_function(
    x__amz__target: XAmzTarget40 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateUserDefinedFunctionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.CreateWorkflow',
    description=""" Creates a new workflow. """,
    tags=['workflow_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_workflow(
    x__amz__target: XAmzTarget41 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: CreateWorkflowRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteBlueprint',
    description=""" Deletes an existing blueprint. """,
    tags=['blueprint_management', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_blueprint(
    x__amz__target: XAmzTarget42 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteBlueprintRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteClassifier',
    description=""" Removes a classifier from the Data Catalog. """,
    tags=['deletion_operations', 'data_operations', 'custom_entity_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_classifier(
    x__amz__target: XAmzTarget43 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteClassifierRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteColumnStatisticsForPartition',
    description=""" <p>Delete the partition column statistics of a column.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeletePartition</code>.</p> """,
    tags=['batch_operations', 'deletion_operations', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_column_statistics_for_partition(
    x__amz__target: XAmzTarget44 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteColumnStatisticsForPartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteColumnStatisticsForTable',
    description=""" <p>Retrieves table statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeleteTable</code>.</p> """,
    tags=['deletion_operations', 'data_operations', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_column_statistics_for_table(
    x__amz__target: XAmzTarget45 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteColumnStatisticsForTableRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteConnection',
    description=""" Deletes a connection from the Data Catalog. """,
    tags=['deletion_operations', 'connection_management', 'resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_connection(
    x__amz__target: XAmzTarget46 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteConnectionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteCrawler',
    description=""" Removes a specified crawler from the Glue Data Catalog, unless the crawler state is <code>RUNNING</code>. """,
    tags=['crawler_operations', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_crawler(
    x__amz__target: XAmzTarget47 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteCrawlerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteCustomEntityType',
    description=""" Deletes a custom pattern by specifying its name. """,
    tags=['custom_entity_management', 'entity_type_management', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_custom_entity_type(
    x__amz__target: XAmzTarget48 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteCustomEntityTypeRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteDataQualityRuleset',
    description=""" Deletes a data quality ruleset. """,
    tags=['data_quality_management', 'data_operations', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_data_quality_ruleset(
    x__amz__target: XAmzTarget49 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteDataQualityRulesetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteDatabase',
    description=""" <p>Removes a specified database from a Data Catalog.</p> <note> <p>After completing this operation, you no longer have access to the tables (and all table versions and partitions that might belong to the tables) and the user-defined functions in the deleted database. Glue deletes these "orphaned" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>DeleteDatabase</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, <code>DeletePartition</code> or <code>BatchDeletePartition</code>, <code>DeleteUserDefinedFunction</code>, and <code>DeleteTable</code> or <code>BatchDeleteTable</code>, to delete any resources that belong to the database.</p> </note> """,
    tags=['database_management', 'deletion_operations', 'database_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_database(
    x__amz__target: XAmzTarget50 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteDatabaseRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteDevEndpoint',
    description=""" Deletes a specified development endpoint. """,
    tags=['endpoint_management', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_dev_endpoint(
    x__amz__target: XAmzTarget51 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteDevEndpointRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteJob',
    description=""" Deletes a specified job definition. If the job definition is not found, no exception is thrown. """,
    tags=['deletion_operations', 'job_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_job(
    x__amz__target: XAmzTarget52 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteMLTransform',
    description=""" Deletes an Glue machine learning transform. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue. If you no longer need a transform, you can delete it by calling <code>DeleteMLTransforms</code>. However, any Glue jobs that still reference the deleted transform will no longer succeed. """,
    tags=['deletion_operations', 'ml_transform_operations', 'transform_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_m_l_transform(
    x__amz__target: XAmzTarget53 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteMLTransformRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeletePartition',
    description=""" Deletes a specified partition. """,
    tags=['deletion_operations', 'partition_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_partition(
    x__amz__target: XAmzTarget54 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeletePartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeletePartitionIndex',
    description=""" Deletes a specified partition index from an existing table. """,
    tags=['deletion_operations', 'partition_management', 'batch_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_partition_index(
    x__amz__target: XAmzTarget55 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeletePartitionIndexRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteRegistry',
    description=""" Delete the entire registry including schema and all of its versions. To get the status of the delete operation, you can call the <code>GetRegistry</code> API after the asynchronous call. Deleting a registry will deactivate all online operations for the registry such as the <code>UpdateRegistry</code>, <code>CreateSchema</code>, <code>UpdateSchema</code>, and <code>RegisterSchemaVersion</code> APIs.  """,
    tags=['registry_management', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_registry(
    x__amz__target: XAmzTarget56 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteRegistryInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteResourcePolicy',
    description=""" Deletes a specified policy. """,
    tags=['resource_policy_management', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_resource_policy(
    x__amz__target: XAmzTarget57 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteResourcePolicyRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteSchema',
    description=""" Deletes the entire schema set, including the schema set and all of its versions. To get the status of the delete operation, you can call <code>GetSchema</code> API after the asynchronous call. Deleting a registry will deactivate all online operations for the schema, such as the <code>GetSchemaByDefinition</code>, and <code>RegisterSchemaVersion</code> APIs. """,
    tags=['deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_schema(
    x__amz__target: XAmzTarget58 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteSchemaInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteSchemaVersions',
    description=""" <p>Remove versions from the specified schema. A version number or range may be supplied. If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned. Calling the <code>GetSchemaVersions</code> API after this call will list the status of the deleted versions.</p> <p>When the range of version numbers contain check pointed version, the API will return a 409 conflict and will not proceed with the deletion. You have to remove the checkpoint first using the <code>DeleteSchemaCheckpoint</code> API before using this API.</p> <p>You cannot use the <code>DeleteSchemaVersions</code> API to delete the first schema version in the schema set. The first schema version can only be deleted by the <code>DeleteSchema</code> API. This operation will also delete the attached <code>SchemaVersionMetadata</code> under the schema versions. Hard deletes will be enforced on the database.</p> <p>If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.</p> """,
    tags=['deletion_operations', 'schema_version_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_schema_versions(
    x__amz__target: XAmzTarget59 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteSchemaVersionsInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteSecurityConfiguration',
    description=""" Deletes a specified security configuration. """,
    tags=['security_configuration_management', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_security_configuration(
    x__amz__target: XAmzTarget60 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteSecurityConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteSession',
    description=""" Deletes the session. """,
    tags=['deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_session(
    x__amz__target: XAmzTarget61 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteSessionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteTable',
    description=""" <p>Removes a table definition from the Data Catalog.</p> <note> <p>After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. Glue deletes these "orphaned" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>DeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note> """,
    tags=['deletion_operations', 'table_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_table(
    x__amz__target: XAmzTarget62 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteTableRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteTableVersion',
    description=""" Deletes a specified version of a table. """,
    tags=['deletion_operations', 'table_management', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_table_version(
    x__amz__target: XAmzTarget63 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteTableVersionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteTrigger',
    description=""" Deletes a specified trigger. If the trigger is not found, no exception is thrown. """,
    tags=['trigger_management', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_trigger(
    x__amz__target: XAmzTarget64 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteTriggerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteUserDefinedFunction',
    description=""" Deletes an existing function definition from the Data Catalog. """,
    tags=['user_defined_function_management', 'deletion_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_user_defined_function(
    x__amz__target: XAmzTarget65 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteUserDefinedFunctionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.DeleteWorkflow',
    description=""" Deletes a workflow. """,
    tags=['deletion_operations', 'workflow_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_workflow(
    x__amz__target: XAmzTarget66 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: DeleteWorkflowRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetBlueprint',
    description=""" Retrieves the details of a blueprint. """,
    tags=['blueprint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_blueprint(
    x__amz__target: XAmzTarget67 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetBlueprintRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetBlueprintRun',
    description=""" Retrieves the details of a blueprint run. """,
    tags=['blueprint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_blueprint_run(
    x__amz__target: XAmzTarget68 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetBlueprintRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetBlueprintRuns',
    description=""" Retrieves the details of blueprint runs for a specified blueprint. """,
    tags=['blueprint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_blueprint_runs(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget69 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetBlueprintRunsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetCatalogImportStatus',
    description=""" Retrieves the status of a migration operation. """,
    tags=['catalog_management', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_catalog_import_status(
    x__amz__target: XAmzTarget70 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetCatalogImportStatusRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetClassifier',
    description=""" Retrieve a classifier by name. """,
    tags=['security_configuration_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_classifier(
    x__amz__target: XAmzTarget71 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetClassifierRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetClassifiers',
    description=""" Lists all classifier objects in the Data Catalog. """,
    tags=['crawler_operations', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_classifiers(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget72 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetClassifiersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetColumnStatisticsForPartition',
    description=""" <p>Retrieves partition statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetPartition</code>.</p> """,
    tags=['partition_management', 'database_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_column_statistics_for_partition(
    x__amz__target: XAmzTarget73 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetColumnStatisticsForPartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetColumnStatisticsForTable',
    description=""" <p>Retrieves table statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetTable</code>.</p> """,
    tags=['database_operations', 'data_quality_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_column_statistics_for_table(
    x__amz__target: XAmzTarget74 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetColumnStatisticsForTableRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetConnection',
    description=""" Retrieves a connection definition from the Data Catalog. """,
    tags=['connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_connection(
    x__amz__target: XAmzTarget75 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetConnectionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetConnections',
    description=""" Retrieves a list of connection definitions from the Data Catalog. """,
    tags=['connection_management', 'database_operations', 'catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_connections(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget76 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetConnectionsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetCrawler',
    description=""" Retrieves metadata for a specified crawler. """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_crawler(
    x__amz__target: XAmzTarget77 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetCrawlerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetCrawlerMetrics',
    description=""" Retrieves metrics about specified crawlers. """,
    tags=['crawler_operations', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_crawler_metrics(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget78 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetCrawlerMetricsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetCrawlers',
    description=""" Retrieves metadata for all crawlers defined in the customer account. """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_crawlers(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget79 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetCrawlersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetCustomEntityType',
    description=""" Retrieves the details of a custom pattern by specifying its name. """,
    tags=['custom_entity_management', 'entity_type_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_custom_entity_type(
    x__amz__target: XAmzTarget80 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetCustomEntityTypeRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDataCatalogEncryptionSettings',
    description=""" Retrieves the security configuration for a specified catalog. """,
    tags=['data_encryption_settings', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_data_catalog_encryption_settings(
    x__amz__target: XAmzTarget81 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDataCatalogEncryptionSettingsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDataQualityResult',
    description=""" Retrieves the result of a data quality rule evaluation. """,
    tags=['data_quality_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_data_quality_result(
    x__amz__target: XAmzTarget82 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDataQualityResultRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDataQualityRuleRecommendationRun',
    description=""" Gets the specified recommendation run that was used to generate rules. """,
    tags=['data_quality_management', 'task_execution', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_data_quality_rule_recommendation_run(
    x__amz__target: XAmzTarget83 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDataQualityRuleRecommendationRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDataQualityRuleset',
    description=""" Returns an existing ruleset by identifier or name. """,
    tags=['data_quality_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_data_quality_ruleset(
    x__amz__target: XAmzTarget84 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDataQualityRulesetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDataQualityRulesetEvaluationRun',
    description=""" Retrieves a specific run where a ruleset is evaluated against a data source. """,
    tags=['data_quality_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_data_quality_ruleset_evaluation_run(
    x__amz__target: XAmzTarget85 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDataQualityRulesetEvaluationRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDatabase',
    description=""" Retrieves the definition of a specified database. """,
    tags=['database_management', 'database_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_database(
    x__amz__target: XAmzTarget86 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDatabaseRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDatabases',
    description=""" Retrieves all databases defined in a given Data Catalog. """,
    tags=['database_management', 'database_operations', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_databases(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget87 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDatabasesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDataflowGraph',
    description=""" Transforms a Python script into a directed acyclic graph (DAG).  """,
    tags=['dataflow_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_dataflow_graph(
    x__amz__target: XAmzTarget88 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDataflowGraphRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDevEndpoint',
    description=""" <p>Retrieves information about a specified development endpoint.</p> <note> <p>When you create a development endpoint in a virtual private cloud (VPC), Glue returns only a private IP address, and the public IP address field is not populated. When you create a non-VPC development endpoint, Glue returns only a public IP address.</p> </note> """,
    tags=['endpoint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_dev_endpoint(
    x__amz__target: XAmzTarget89 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDevEndpointRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetDevEndpoints',
    description=""" <p>Retrieves all the development endpoints in this Amazon Web Services account.</p> <note> <p>When you create a development endpoint in a virtual private cloud (VPC), Glue returns only a private IP address and the public IP address field is not populated. When you create a non-VPC development endpoint, Glue returns only a public IP address.</p> </note> """,
    tags=['endpoint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_dev_endpoints(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget90 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetDevEndpointsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetJob',
    description=""" Retrieves an existing job definition. """,
    tags=['task_execution', 'job_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_job(
    x__amz__target: XAmzTarget91 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetJobBookmark',
    description=""" <p>Returns information on a job bookmark entry.</p> <p>For more information about enabling and using job bookmarks, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-continuations.html">Tracking processed data using job bookmarks</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Job parameters used by Glue</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html#aws-glue-api-jobs-job-Job">Job structure</a> </p> </li> </ul> """,
    tags=['job_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_job_bookmark(
    x__amz__target: XAmzTarget92 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetJobBookmarkRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetJobRun',
    description=""" Retrieves the metadata for a given job run. """,
    tags=['job_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_job_run(
    x__amz__target: XAmzTarget93 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetJobRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetJobRuns',
    description=""" Retrieves metadata for all runs of a given job definition. """,
    tags=['job_management', 'task_execution', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_job_runs(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget94 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetJobRunsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetJobs',
    description=""" Retrieves all current job definitions. """,
    tags=['job_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_jobs(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget95 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetMLTaskRun',
    description=""" Gets details for a specific task run on a machine learning transform. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can check the stats of any task run by calling <code>GetMLTaskRun</code> with the <code>TaskRunID</code> and its parent transform's <code>TransformID</code>. """,
    tags=['ml_transform_operations', 'machine_learning_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_m_l_task_run(
    x__amz__target: XAmzTarget96 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetMLTaskRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetMLTaskRuns',
    description=""" <p>Gets a list of runs for a machine learning transform. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can get a sortable, filterable list of machine learning task runs by calling <code>GetMLTaskRuns</code> with their parent transform's <code>TransformID</code> and other optional parameters as documented in this section.</p> <p>This operation returns a list of historic runs and must be paginated.</p> """,
    tags=['job_management', 'ml_transform_operations', 'machine_learning_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_m_l_task_runs(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget97 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetMLTaskRunsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetMLTransform',
    description=""" Gets an Glue machine learning transform artifact and all its corresponding metadata. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue. You can retrieve their metadata by calling <code>GetMLTransform</code>. """,
    tags=[
        'ml_transform_operations',
        'machine_learning_management',
        'transform_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_m_l_transform(
    x__amz__target: XAmzTarget98 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetMLTransformRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetMLTransforms',
    description=""" Gets a sortable, filterable list of existing Glue machine learning transforms. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue, and you can retrieve their metadata by calling <code>GetMLTransforms</code>. """,
    tags=['ml_transform_operations', 'transform_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_m_l_transforms(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget99 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetMLTransformsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetMapping',
    description=""" Creates mappings. """,
    tags=['data_catalog_management', 'security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_mapping(
    x__amz__target: XAmzTarget100 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetMappingRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetPartition',
    description=""" Retrieves information about a specified partition. """,
    tags=['partition_management', 'database_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_partition(
    x__amz__target: XAmzTarget101 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetPartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetPartitionIndexes',
    description=""" Retrieves the partition indexes associated with a table. """,
    tags=['partition_management', 'database_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_partition_indexes(
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget102 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetPartitionIndexesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetPartitions',
    description=""" Retrieves information about the partitions in a table. """,
    tags=['partition_management', 'database_management', 'catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_partitions(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget103 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetPartitionsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetPlan',
    description=""" Gets code to perform a specified mapping. """,
    tags=['database_management', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_plan(
    x__amz__target: XAmzTarget104 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetPlanRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetRegistry',
    description=""" Describes the specified registry in detail. """,
    tags=['registry_management', 'security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_registry(
    x__amz__target: XAmzTarget105 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetRegistryInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetResourcePolicies',
    description=""" <p>Retrieves the resource policies set on individual resources by Resource Access Manager during cross-account permission grants. Also retrieves the Data Catalog resource policy.</p> <p>If you enabled metadata encryption in Data Catalog settings, and you do not have permission on the KMS key, the operation can't return the Data Catalog resource policy.</p> """,
    tags=['resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_resource_policies(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget106 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetResourcePoliciesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetResourcePolicy',
    description=""" Retrieves a specified resource policy. """,
    tags=['resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_resource_policy(
    x__amz__target: XAmzTarget107 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetResourcePolicyRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetSchema',
    description=""" Describes the specified schema in detail. """,
    tags=['security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_schema(
    x__amz__target: XAmzTarget108 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetSchemaInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetSchemaByDefinition',
    description=""" Retrieves a schema by the <code>SchemaDefinition</code>. The schema definition is sent to the Schema Registry, canonicalized, and hashed. If the hash is matched within the scope of the <code>SchemaName</code> or ARN (or the default registry, if none is supplied), that schema’s metadata is returned. Otherwise, a 404 or NotFound error is returned. Schema versions in <code>Deleted</code> statuses will not be included in the results. """,
    tags=['schema_management', 'data_operations', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_schema_by_definition(
    x__amz__target: XAmzTarget109 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetSchemaByDefinitionInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetSchemaVersion',
    description=""" Get the specified schema by its unique ID assigned when a version of the schema is created or registered. Schema versions in Deleted status will not be included in the results. """,
    tags=['schema_version_management', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_schema_version(
    x__amz__target: XAmzTarget110 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetSchemaVersionInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetSchemaVersionsDiff',
    description=""" <p>Fetches the schema version difference in the specified difference type between two stored schema versions in the Schema Registry.</p> <p>This API allows you to compare two schema versions between two schema definitions under the same schema.</p> """,
    tags=['data_operations', 'schema_version_management', 'data_quality_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_schema_versions_diff(
    x__amz__target: XAmzTarget111 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetSchemaVersionsDiffInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetSecurityConfiguration',
    description=""" Retrieves a specified security configuration. """,
    tags=['security_configuration_management', 'resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_security_configuration(
    x__amz__target: XAmzTarget112 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetSecurityConfigurationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetSecurityConfigurations',
    description=""" Retrieves a list of all security configurations. """,
    tags=['security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_security_configurations(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget113 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetSecurityConfigurationsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetSession',
    description=""" Retrieves the session. """,
    tags=[
        'security_configuration_management',
        'endpoint_management',
        'data_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_session(
    x__amz__target: XAmzTarget114 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetSessionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetStatement',
    description=""" Retrieves the statement. """,
    tags=['security_configuration_management', 'resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_statement(
    x__amz__target: XAmzTarget115 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetStatementRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetTable',
    description=""" Retrieves the <code>Table</code> definition in a Data Catalog for a specified table. """,
    tags=['security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_table(
    x__amz__target: XAmzTarget116 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetTableRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetTableVersion',
    description=""" Retrieves a specified version of a table. """,
    tags=['table_management', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_table_version(
    x__amz__target: XAmzTarget117 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetTableVersionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetTableVersions',
    description=""" Retrieves a list of strings that identify available versions of a specified table. """,
    tags=['table_management', 'crawler_operations', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_table_versions(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget118 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetTableVersionsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetTables',
    description=""" Retrieves the definitions of some or all of the tables in a given <code>Database</code>. """,
    tags=['table_management', 'database_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_tables(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget119 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetTablesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetTags',
    description=""" Retrieves a list of tags associated with a resource. """,
    tags=['tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_tags(
    x__amz__target: XAmzTarget120 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetTagsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetTrigger',
    description=""" Retrieves the definition of a trigger. """,
    tags=['trigger_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_trigger(
    x__amz__target: XAmzTarget121 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetTriggerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetTriggers',
    description=""" Gets all the triggers associated with a job. """,
    tags=['trigger_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_triggers(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget122 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetTriggersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetUnfilteredPartitionMetadata',
    description=""" <p>Retrieves partition metadata from the Data Catalog that contains unfiltered metadata.</p> <p>For IAM authorization, the public IAM action associated with this API is <code>glue:GetPartition</code>.</p> """,
    tags=['partition_metadata_handling', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_unfiltered_partition_metadata(
    x__amz__target: XAmzTarget123 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetUnfilteredPartitionMetadataRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetUnfilteredPartitionsMetadata',
    description=""" <p>Retrieves partition metadata from the Data Catalog that contains unfiltered metadata.</p> <p>For IAM authorization, the public IAM action associated with this API is <code>glue:GetPartitions</code>.</p> """,
    tags=['partition_metadata_handling', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_unfiltered_partitions_metadata(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget124 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetUnfilteredPartitionsMetadataRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetUnfilteredTableMetadata',
    description=""" <p>Retrieves table metadata from the Data Catalog that contains unfiltered metadata.</p> <p>For IAM authorization, the public IAM action associated with this API is <code>glue:GetTable</code>.</p> """,
    tags=[
        'database_operations',
        'partition_metadata_handling',
        'data_catalog_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_unfiltered_table_metadata(
    x__amz__target: XAmzTarget125 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetUnfilteredTableMetadataRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetUserDefinedFunction',
    description=""" Retrieves a specified function definition from the Data Catalog. """,
    tags=['user_defined_function_management', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_user_defined_function(
    x__amz__target: XAmzTarget126 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetUserDefinedFunctionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetUserDefinedFunctions',
    description=""" Retrieves multiple function definitions from the Data Catalog. """,
    tags=[
        'user_defined_function_management',
        'database_management',
        'schema_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_user_defined_functions(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget127 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetUserDefinedFunctionsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetWorkflow',
    description=""" Retrieves resource metadata for a workflow. """,
    tags=['workflow_management', 'security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_workflow(
    x__amz__target: XAmzTarget128 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetWorkflowRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetWorkflowRun',
    description=""" Retrieves the metadata for a given workflow run.  """,
    tags=['workflow_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_workflow_run(
    x__amz__target: XAmzTarget129 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetWorkflowRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetWorkflowRunProperties',
    description=""" Retrieves the workflow run properties which were set during the run. """,
    tags=['endpoint_management', 'workflow_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_workflow_run_properties(
    x__amz__target: XAmzTarget130 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetWorkflowRunPropertiesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.GetWorkflowRuns',
    description=""" Retrieves metadata for all runs of a given workflow. """,
    tags=['workflow_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_workflow_runs(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget131 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: GetWorkflowRunsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ImportCatalogToGlue',
    description=""" Imports an existing Amazon Athena Data Catalog to Glue. """,
    tags=['catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def import_catalog_to_glue(
    x__amz__target: XAmzTarget132 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ImportCatalogToGlueRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListBlueprints',
    description=""" Lists all the blueprint names in an account. """,
    tags=['blueprint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_blueprints(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget133 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListBlueprintsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListCrawlers',
    description=""" <p>Retrieves the names of all crawler resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p> """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_crawlers(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget134 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListCrawlersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListCrawls',
    description=""" <p>Returns all the crawls of a specified crawler. Returns only the crawls that have occurred since the launch date of the crawler history feature, and only retains up to 12 months of crawls. Older crawls will not be returned.</p> <p>You may use this API to:</p> <ul> <li> <p>Retrive all the crawls of a specified crawler.</p> </li> <li> <p>Retrieve all the crawls of a specified crawler within a limited count.</p> </li> <li> <p>Retrieve all the crawls of a specified crawler in a specific time range.</p> </li> <li> <p>Retrieve all the crawls of a specified crawler with a particular state, crawl ID, or DPU hour value.</p> </li> </ul> """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_crawls(
    x__amz__target: XAmzTarget135 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListCrawlsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListCustomEntityTypes',
    description=""" Lists all the custom patterns that have been created. """,
    tags=['endpoint_management', 'custom_entity_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_custom_entity_types(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget136 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListCustomEntityTypesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListDataQualityResults',
    description=""" Returns all data quality execution results for your account. """,
    tags=['data_quality_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_data_quality_results(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget137 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListDataQualityResultsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListDataQualityRuleRecommendationRuns',
    description=""" Lists the recommendation runs meeting the filter criteria. """,
    tags=['data_quality_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_data_quality_rule_recommendation_runs(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget138 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListDataQualityRuleRecommendationRunsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListDataQualityRulesetEvaluationRuns',
    description=""" Lists all the runs meeting the filter criteria, where a ruleset is evaluated against a data source. """,
    tags=['data_quality_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_data_quality_ruleset_evaluation_runs(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget139 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListDataQualityRulesetEvaluationRunsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListDataQualityRulesets',
    description=""" Returns a paginated list of rulesets for the specified list of Glue tables. """,
    tags=['data_quality_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_data_quality_rulesets(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget140 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListDataQualityRulesetsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListDevEndpoints',
    description=""" <p>Retrieves the names of all <code>DevEndpoint</code> resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p> """,
    tags=['endpoint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_dev_endpoints(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget141 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListDevEndpointsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListJobs',
    description=""" <p>Retrieves the names of all job resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p> """,
    tags=['job_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_jobs(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget142 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListMLTransforms',
    description="""  Retrieves a sortable, filterable list of existing Glue machine learning transforms in this Amazon Web Services account, or the resources with the specified tag. This operation takes the optional <code>Tags</code> field, which you can use as a filter of the responses so that tagged resources can be retrieved as a group. If you choose to use tag filtering, only resources with the tags are retrieved.  """,
    tags=[
        'ml_transform_operations',
        'transform_management',
        'machine_learning_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_m_l_transforms(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget143 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListMLTransformsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListRegistries',
    description=""" Returns a list of registries that you have created, with minimal registry information. Registries in the <code>Deleting</code> status will not be included in the results. Empty results will be returned if there are no registries available. """,
    tags=['registry_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_registries(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget144 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListRegistriesInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListSchemaVersions',
    description=""" Returns a list of schema versions that you have created, with minimal information. Schema versions in Deleted status will not be included in the results. Empty results will be returned if there are no schema versions available. """,
    tags=['schema_version_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_schema_versions(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget145 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListSchemaVersionsInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListSchemas',
    description=""" <p>Returns a list of schemas with minimal details. Schemas in Deleting status will not be included in the results. Empty results will be returned if there are no schemas available.</p> <p>When the <code>RegistryId</code> is not provided, all the schemas across registries will be part of the API response.</p> """,
    tags=['schema_management', 'database_management', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_schemas(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget146 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListSchemasInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListSessions',
    description=""" Retrieve a list of sessions. """,
    tags=[
        'endpoint_management',
        'crawler_operations',
        'database_management',
        'database_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_sessions(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget147 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListSessionsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListStatements',
    description=""" Lists statements for the session. """,
    tags=['security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_statements(
    x__amz__target: XAmzTarget148 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListStatementsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListTriggers',
    description=""" <p>Retrieves the names of all trigger resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p> """,
    tags=['trigger_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_triggers(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget149 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListTriggersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ListWorkflows',
    description=""" Lists names of workflows created in the account. """,
    tags=['workflow_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_workflows(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget150 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ListWorkflowsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.PutDataCatalogEncryptionSettings',
    description=""" Sets the security configuration for a specified catalog. After the configuration has been set, the specified encryption is applied to every catalog write thereafter. """,
    tags=['data_catalog_management', 'data_encryption_settings'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_data_catalog_encryption_settings(
    x__amz__target: XAmzTarget151 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: PutDataCatalogEncryptionSettingsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.PutResourcePolicy',
    description=""" Sets the Data Catalog resource policy for access control. """,
    tags=['resource_policy_management', 'security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_resource_policy(
    x__amz__target: XAmzTarget152 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: PutResourcePolicyRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.PutSchemaVersionMetadata',
    description=""" Puts the metadata key value pair for a specified schema version ID. A maximum of 10 key value pairs will be allowed per schema version. They can be added over one or more calls. """,
    tags=['schema_version_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_schema_version_metadata(
    x__amz__target: XAmzTarget153 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: PutSchemaVersionMetadataInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.PutWorkflowRunProperties',
    description=""" Puts the specified workflow run properties for the given workflow run. If a property already exists for the specified run, then it overrides the value otherwise adds the property to existing properties. """,
    tags=['workflow_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_workflow_run_properties(
    x__amz__target: XAmzTarget154 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: PutWorkflowRunPropertiesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.QuerySchemaVersionMetadata',
    description=""" Queries for the schema version metadata information.  """,
    tags=['schema_version_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def query_schema_version_metadata(
    x__amz__target: XAmzTarget155 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: QuerySchemaVersionMetadataInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.RegisterSchemaVersion',
    description=""" <p>Adds a new version to the existing schema. Returns an error if new version of schema does not meet the compatibility requirements of the schema set. This API will not create a new schema set and will return a 404 error if the schema set is not already present in the Schema Registry.</p> <p>If this is the first schema definition to be registered in the Schema Registry, this API will store the schema version and return immediately. Otherwise, this call has the potential to run longer than other operations due to compatibility modes. You can call the <code>GetSchemaVersion</code> API with the <code>SchemaVersionId</code> to check compatibility modes.</p> <p>If the same schema definition is already stored in Schema Registry as a version, the schema ID of the existing schema is returned to the caller.</p> """,
    tags=['data_encryption_settings', 'security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def register_schema_version(
    x__amz__target: XAmzTarget156 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: RegisterSchemaVersionInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.RemoveSchemaVersionMetadata',
    description=""" Removes a key value pair from the schema version metadata for the specified schema version ID. """,
    tags=['schema_version_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_schema_version_metadata(
    x__amz__target: XAmzTarget157 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: RemoveSchemaVersionMetadataInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ResetJobBookmark',
    description=""" <p>Resets a bookmark entry.</p> <p>For more information about enabling and using job bookmarks, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-continuations.html">Tracking processed data using job bookmarks</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Job parameters used by Glue</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html#aws-glue-api-jobs-job-Job">Job structure</a> </p> </li> </ul> """,
    tags=['task_execution', 'security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def reset_job_bookmark(
    x__amz__target: XAmzTarget158 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ResetJobBookmarkRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.ResumeWorkflowRun',
    description=""" Restarts selected nodes of a previous partially completed workflow run and resumes the workflow run. The selected nodes and all nodes that are downstream from the selected nodes are run. """,
    tags=['workflow_management', 'connection_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def resume_workflow_run(
    x__amz__target: XAmzTarget159 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: ResumeWorkflowRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.RunStatement',
    description=""" Executes the statement. """,
    tags=[
        'data_operations',
        'security_configuration_management',
        'database_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def run_statement(
    x__amz__target: XAmzTarget160 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: RunStatementRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.SearchTables',
    description=""" <p>Searches a set of tables based on properties in the table metadata as well as on the parent database. You can search against text or filter conditions. </p> <p>You can only get tables that you have access to based on the security policies defined in Lake Formation. You need at least a read-only access to the table for it to be returned. If you do not have access to all the columns in the table, these columns will not be searched against when returning the list of tables back to you. If you have access to the columns but not the data in the columns, those columns and the associated metadata for those columns will be included in the search. </p> """,
    tags=['database_management', 'data_catalog_management', 'table_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_tables(
    max_results: Optional[str_aliased] = Query(None, alias='MaxResults'),
    next_token: Optional[str_aliased] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget161 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: SearchTablesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartBlueprintRun',
    description=""" Starts a new run of the specified blueprint. """,
    tags=['blueprint_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_blueprint_run(
    x__amz__target: XAmzTarget162 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartBlueprintRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartCrawler',
    description=""" Starts a crawl using the specified crawler, regardless of what is scheduled. If the crawler is already running, returns a <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException">CrawlerRunningException</a>. """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_crawler(
    x__amz__target: XAmzTarget163 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartCrawlerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartCrawlerSchedule',
    description=""" Changes the schedule state of the specified crawler to <code>SCHEDULED</code>, unless the crawler is already running or the schedule state is already <code>SCHEDULED</code>. """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_crawler_schedule(
    x__amz__target: XAmzTarget164 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartCrawlerScheduleRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartDataQualityRuleRecommendationRun',
    description=""" Starts a recommendation run that is used to generate rules when you don't know what rules to write. Glue Data Quality analyzes the data and comes up with recommendations for a potential ruleset. You can then triage the ruleset and modify the generated ruleset to your liking. """,
    tags=['data_quality_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_data_quality_rule_recommendation_run(
    x__amz__target: XAmzTarget165 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartDataQualityRuleRecommendationRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartDataQualityRulesetEvaluationRun',
    description=""" Once you have a ruleset definition (either recommended or your own), you call this operation to evaluate the ruleset against a data source (Glue table). The evaluation computes results which you can retrieve with the <code>GetDataQualityResult</code> API. """,
    tags=['data_quality_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_data_quality_ruleset_evaluation_run(
    x__amz__target: XAmzTarget166 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartDataQualityRulesetEvaluationRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartExportLabelsTaskRun',
    description=""" Begins an asynchronous task to export all labeled data for a particular transform. This task is the only label-related API call that is not part of the typical active learning workflow. You typically use <code>StartExportLabelsTaskRun</code> when you want to work with all of your existing labels at the same time, such as when you want to remove or change labels that were previously submitted as truth. This API operation accepts the <code>TransformId</code> whose labels you want to export and an Amazon Simple Storage Service (Amazon S3) path to export the labels to. The operation returns a <code>TaskRunId</code>. You can check on the status of your task run by calling the <code>GetMLTaskRun</code> API. """,
    tags=['task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_export_labels_task_run(
    x__amz__target: XAmzTarget167 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartExportLabelsTaskRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartImportLabelsTaskRun',
    description=""" <p>Enables you to provide additional labels (examples of truth) to be used to teach the machine learning transform and improve its quality. This API operation is generally used as part of the active learning workflow that starts with the <code>StartMLLabelingSetGenerationTaskRun</code> call and that ultimately results in improving the quality of your machine learning transform. </p> <p>After the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, Glue machine learning will have generated a series of questions for humans to answer. (Answering these questions is often called 'labeling' in the machine learning workflows). In the case of the <code>FindMatches</code> transform, these questions are of the form, “What is the correct way to group these rows together into groups composed entirely of matching records?” After the labeling process is finished, users upload their answers/labels with a call to <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine learning transform use the new and improved labels and perform a higher-quality transformation.</p> <p>By default, <code>StartMLLabelingSetGenerationTaskRun</code> continually learns from and combines all labels that you upload unless you set <code>Replace</code> to true. If you set <code>Replace</code> to true, <code>StartImportLabelsTaskRun</code> deletes and forgets all previously uploaded labels and learns only from the exact set that you upload. Replacing labels can be helpful if you realize that you previously uploaded incorrect labels, and you believe that they are having a negative effect on your transform quality.</p> <p>You can check on the status of your task run by calling the <code>GetMLTaskRun</code> operation. </p> """,
    tags=['task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_import_labels_task_run(
    x__amz__target: XAmzTarget168 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartImportLabelsTaskRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartJobRun',
    description=""" Starts a job run using a job definition. """,
    tags=['job_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_job_run(
    x__amz__target: XAmzTarget169 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartJobRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartMLEvaluationTaskRun',
    description=""" <p>Starts a task to estimate the quality of the transform. </p> <p>When you provide label sets as examples of truth, Glue machine learning uses some of those examples to learn from them. The rest of the labels are used as a test to estimate quality.</p> <p>Returns a unique identifier for the run. You can call <code>GetMLTaskRun</code> to get more information about the stats of the <code>EvaluationTaskRun</code>.</p> """,
    tags=['task_execution', 'job_management', 'ml_transform_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_m_l_evaluation_task_run(
    x__amz__target: XAmzTarget170 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartMLEvaluationTaskRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartMLLabelingSetGenerationTaskRun',
    description=""" <p>Starts the active learning workflow for your machine learning transform to improve the transform's quality by generating label sets and adding labels.</p> <p>When the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, Glue will have generated a "labeling set" or a set of questions for humans to answer.</p> <p>In the case of the <code>FindMatches</code> transform, these questions are of the form, “What is the correct way to group these rows together into groups composed entirely of matching records?” </p> <p>After the labeling process is finished, you can upload your labels with a call to <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine learning transform will use the new and improved labels and perform a higher-quality transformation.</p> """,
    tags=['task_execution', 'ml_transform_operations', 'machine_learning_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_m_l_labeling_set_generation_task_run(
    x__amz__target: XAmzTarget171 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartMLLabelingSetGenerationTaskRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartTrigger',
    description=""" Starts an existing trigger. See <a href="https://docs.aws.amazon.com/glue/latest/dg/trigger-job.html">Triggering Jobs</a> for information about how different types of trigger are started. """,
    tags=['security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_trigger(
    x__amz__target: XAmzTarget172 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartTriggerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StartWorkflowRun',
    description=""" Starts a new run of the specified workflow. """,
    tags=['workflow_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_workflow_run(
    x__amz__target: XAmzTarget173 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StartWorkflowRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StopCrawler',
    description=""" If the specified crawler is running, stops the crawl. """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_crawler(
    x__amz__target: XAmzTarget174 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StopCrawlerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StopCrawlerSchedule',
    description=""" Sets the schedule state of the specified crawler to <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is already running. """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_crawler_schedule(
    x__amz__target: XAmzTarget175 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StopCrawlerScheduleRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StopSession',
    description=""" Stops the session. """,
    tags=['session_management', 'security_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_session(
    x__amz__target: XAmzTarget176 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StopSessionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StopTrigger',
    description=""" Stops a specified trigger. """,
    tags=['task_execution', 'data_operations', 'trigger_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_trigger(
    x__amz__target: XAmzTarget177 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StopTriggerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.StopWorkflowRun',
    description=""" Stops the execution of the specified workflow run. """,
    tags=['workflow_management', 'task_execution'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_workflow_run(
    x__amz__target: XAmzTarget178 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: StopWorkflowRunRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.TagResource',
    description=""" Adds tags to a resource. A tag is a label you can assign to an Amazon Web Services resource. In Glue, you can tag only certain resources. For information about what resources you can tag, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a>. """,
    tags=['tag_management', 'resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_resource(
    x__amz__target: XAmzTarget179 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: TagResourceRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UntagResource',
    description=""" Removes tags from a resource. """,
    tags=['database_management', 'resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_resource(
    x__amz__target: XAmzTarget180 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UntagResourceRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateBlueprint',
    description=""" Updates a registered blueprint. """,
    tags=['blueprint_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_blueprint(
    x__amz__target: XAmzTarget181 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateBlueprintRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateClassifier',
    description=""" Modifies an existing classifier (a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on which field is present). """,
    tags=['data_operations', 'database_management', 'data_catalog_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_classifier(
    x__amz__target: XAmzTarget182 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateClassifierRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateColumnStatisticsForPartition',
    description=""" <p>Creates or updates partition statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdatePartition</code>.</p> """,
    tags=['data_operations', 'batch_operations', 'table_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_column_statistics_for_partition(
    x__amz__target: XAmzTarget183 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateColumnStatisticsForPartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateColumnStatisticsForTable',
    description=""" <p>Creates or updates table statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdateTable</code>.</p> """,
    tags=['data_operations', 'batch_operations', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_column_statistics_for_table(
    x__amz__target: XAmzTarget184 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateColumnStatisticsForTableRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateConnection',
    description=""" Updates a connection definition in the Data Catalog. """,
    tags=['connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_connection(
    x__amz__target: XAmzTarget185 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateConnectionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateCrawler',
    description=""" Updates a crawler. If a crawler is running, you must stop it using <code>StopCrawler</code> before updating it. """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_crawler(
    x__amz__target: XAmzTarget186 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateCrawlerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateCrawlerSchedule',
    description=""" Updates the schedule of a crawler using a <code>cron</code> expression.  """,
    tags=['crawler_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_crawler_schedule(
    x__amz__target: XAmzTarget187 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateCrawlerScheduleRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateDataQualityRuleset',
    description=""" Updates the specified data quality ruleset. """,
    tags=['data_quality_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_data_quality_ruleset(
    x__amz__target: XAmzTarget188 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateDataQualityRulesetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateDatabase',
    description=""" Updates an existing database definition in a Data Catalog. """,
    tags=['database_management', 'database_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_database(
    x__amz__target: XAmzTarget189 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateDatabaseRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateDevEndpoint',
    description=""" Updates a specified development endpoint. """,
    tags=['endpoint_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_dev_endpoint(
    x__amz__target: XAmzTarget190 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateDevEndpointRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateJob',
    description=""" Updates an existing job definition. The previous job definition is completely overwritten by this information. """,
    tags=['job_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_job(
    x__amz__target: XAmzTarget191 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateJobFromSourceControl',
    description=""" <p>Synchronizes a job from the source control repository. This operation takes the job artifacts that are located in the remote repository and updates the Glue internal stores with these artifacts.</p> <p>This API supports optional parameters which take in the repository information.</p> """,
    tags=['job_management', 'connection_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_job_from_source_control(
    x__amz__target: XAmzTarget192 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateJobFromSourceControlRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateMLTransform',
    description=""" <p>Updates an existing machine learning transform. Call this operation to tune the algorithm parameters to achieve better results.</p> <p>After calling this operation, you can call the <code>StartMLEvaluationTaskRun</code> operation to assess how well your new parameters achieved your goals (such as improving the quality of your machine learning transform, or making it more cost-effective).</p> """,
    tags=[
        'ml_transform_operations',
        'transform_management',
        'machine_learning_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_m_l_transform(
    x__amz__target: XAmzTarget193 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateMLTransformRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdatePartition',
    description=""" Updates a partition. """,
    tags=['batch_operations', 'partition_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_partition(
    x__amz__target: XAmzTarget194 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdatePartitionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateRegistry',
    description=""" Updates an existing registry which is used to hold a collection of schemas. The updated properties relate to the registry, and do not modify any of the schemas within the registry.  """,
    tags=['registry_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_registry(
    x__amz__target: XAmzTarget195 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateRegistryInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateSchema',
    description=""" <p>Updates the description, compatibility setting, or version checkpoint for a schema set.</p> <p>For updating the compatibility setting, the call will not validate compatibility for the entire set of schema versions with the new compatibility setting. If the value for <code>Compatibility</code> is provided, the <code>VersionNumber</code> (a checkpoint) is also required. The API will validate the checkpoint version number for consistency.</p> <p>If the value for the <code>VersionNumber</code> (checkpoint) is provided, <code>Compatibility</code> is optional and this can be used to set/reset a checkpoint for the schema.</p> <p>This update will happen only if the schema is in the AVAILABLE state.</p> """,
    tags=['data_operations', 'database_management', 'resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_schema(
    x__amz__target: XAmzTarget196 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateSchemaInput = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateSourceControlFromJob',
    description=""" <p>Synchronizes a job to the source control repository. This operation takes the job artifacts from the Glue internal stores and makes a commit to the remote repository that is configured on the job.</p> <p>This API supports optional parameters which take in the repository information.</p> """,
    tags=['custom_entity_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_source_control_from_job(
    x__amz__target: XAmzTarget197 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateSourceControlFromJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateTable',
    description=""" Updates a metadata table in the Data Catalog. """,
    tags=['table_management', 'database_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_table(
    x__amz__target: XAmzTarget198 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateTableRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateTrigger',
    description=""" Updates a trigger definition. """,
    tags=['trigger_management', 'workflow_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_trigger(
    x__amz__target: XAmzTarget199 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateTriggerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateUserDefinedFunction',
    description=""" Updates an existing function definition in the Data Catalog. """,
    tags=['user_defined_function_management', 'schema_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_user_defined_function(
    x__amz__target: XAmzTarget200 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateUserDefinedFunctionRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=AWSGlue.UpdateWorkflow',
    description=""" Updates an existing workflow. """,
    tags=['workflow_management', 'custom_entity_management', 'data_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_workflow(
    x__amz__target: XAmzTarget201 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str_aliased] = Header(
        None, alias='X-Amz-Content-Sha256'
    ),
    x__amz__date: Optional[str_aliased] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str_aliased] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str_aliased] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str_aliased] = Header(
        None, alias='X-Amz-Security-Token'
    ),
    x__amz__signature: Optional[str_aliased] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str_aliased] = Header(
        None, alias='X-Amz-SignedHeaders'
    ),
    body: UpdateWorkflowRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
