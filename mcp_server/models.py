# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:42:41+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, confloat, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountId(RootModel[constr(min_length=0, max_length=12)]):
    root: constr(min_length=0, max_length=12)


class AggFunction(Enum):
    avg = 'avg'
    countDistinct = 'countDistinct'
    count = 'count'
    first = 'first'
    last = 'last'
    kurtosis = 'kurtosis'
    max = 'max'
    min = 'min'
    skewness = 'skewness'
    stddev_samp = 'stddev_samp'
    stddev_pop = 'stddev_pop'
    sum = 'sum'
    sumDistinct = 'sumDistinct'
    var_samp = 'var_samp'
    var_pop = 'var_pop'


class AlreadyExistsException(RootModel[Any]):
    root: Any


class AttemptCount(RootModel[int_aliased]):
    root: int_aliased


class AuditContextString(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class AuthTokenString(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class BackfillErrorCode(Enum):
    ENCRYPTED_PARTITION_ERROR = 'ENCRYPTED_PARTITION_ERROR'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    INVALID_PARTITION_TYPE_DATA_ERROR = 'INVALID_PARTITION_TYPE_DATA_ERROR'
    MISSING_PARTITION_VALUE_ERROR = 'MISSING_PARTITION_VALUE_ERROR'
    UNSUPPORTED_PARTITION_CHARACTER_ERROR = 'UNSUPPORTED_PARTITION_CHARACTER_ERROR'


class BatchSize(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class BatchWindow(RootModel[conint(ge=1, le=900)]):
    root: conint(ge=1, le=900)


class Blob(RootModel[str_aliased]):
    root: str_aliased


class BlueprintParameterSpec(RootModel[constr(min_length=1, max_length=131072)]):
    root: constr(min_length=1, max_length=131072)


class BlueprintParameters(RootModel[constr(min_length=1, max_length=131072)]):
    root: constr(min_length=1, max_length=131072)


class BlueprintRunState(Enum):
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    ROLLING_BACK = 'ROLLING_BACK'


class BlueprintStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    FAILED = 'FAILED'


class Boolean(RootModel[bool_aliased]):
    root: bool_aliased


class BooleanNullable(RootModel[bool_aliased]):
    root: bool_aliased


class BooleanValue(RootModel[bool_aliased]):
    root: bool_aliased


class BoxedBoolean(RootModel[bool_aliased]):
    root: bool_aliased


class BoxedDoubleFraction(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class BoxedLong(RootModel[int_aliased]):
    root: int_aliased


class BoxedNonNegativeInt(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class BoxedNonNegativeLong(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class BoxedPositiveInt(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class CancelDataQualityRuleRecommendationRunResponse(BaseModel):
    pass


class CancelDataQualityRulesetEvaluationRunResponse(BaseModel):
    pass


class CancelStatementResponse(BaseModel):
    pass


class CatalogEncryptionMode(Enum):
    DISABLED = 'DISABLED'
    SSE_KMS = 'SSE-KMS'


class CatalogGetterPageSize(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class CatalogIdString(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class Classification(RootModel[str_aliased]):
    root: str_aliased


class CloudWatchEncryptionMode(Enum):
    DISABLED = 'DISABLED'
    SSE_KMS = 'SSE-KMS'


class CodeGenArgName(RootModel[str_aliased]):
    root: str_aliased


class CodeGenArgValue(RootModel[str_aliased]):
    root: str_aliased


class CodeGenIdentifier(
    RootModel[constr(pattern=r'[A-Za-z_][A-Za-z0-9_]*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[A-Za-z_][A-Za-z0-9_]*', min_length=1, max_length=255)


class CodeGenNodeArg(BaseModel):
    Name: CodeGenArgName
    Param: Optional[Boolean] = None
    Value: CodeGenArgValue


class CodeGenNodeArgs(RootModel[List[CodeGenNodeArg]]):
    root: List[CodeGenNodeArg] = Field(..., max_length=50, min_length=0)


class CodeGenNodeType(RootModel[str_aliased]):
    root: str_aliased


class ColumnNameString(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ColumnStatisticsType(Enum):
    BOOLEAN = 'BOOLEAN'
    DATE = 'DATE'
    DECIMAL = 'DECIMAL'
    DOUBLE = 'DOUBLE'
    LONG = 'LONG'
    STRING = 'STRING'
    BINARY = 'BINARY'


class ColumnTypeString(RootModel[constr(min_length=0, max_length=131072)]):
    root: constr(min_length=0, max_length=131072)


class ColumnValuesString(RootModel[str_aliased]):
    root: str_aliased


class CommentString(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class CommitIdString(RootModel[constr(min_length=1, max_length=40)]):
    root: constr(min_length=1, max_length=40)


class Comparator(Enum):
    EQUALS = 'EQUALS'
    GREATER_THAN = 'GREATER_THAN'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN_EQUALS = 'GREATER_THAN_EQUALS'
    LESS_THAN_EQUALS = 'LESS_THAN_EQUALS'


class Compatibility(Enum):
    NONE = 'NONE'
    DISABLED = 'DISABLED'
    BACKWARD = 'BACKWARD'
    BACKWARD_ALL = 'BACKWARD_ALL'
    FORWARD = 'FORWARD'
    FORWARD_ALL = 'FORWARD_ALL'
    FULL = 'FULL'
    FULL_ALL = 'FULL_ALL'


class CompressionType(Enum):
    gzip = 'gzip'
    bzip2 = 'bzip2'


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConcurrentRunsExceededException(RootModel[Any]):
    root: Any


class ConditionCheckFailureException(RootModel[Any]):
    root: Any


class ConflictException(RootModel[Any]):
    root: Any


class ConnectionName(RootModel[str_aliased]):
    root: str_aliased


class ConnectionPropertyKey(Enum):
    HOST = 'HOST'
    PORT = 'PORT'
    USERNAME = 'USERNAME'
    PASSWORD = 'PASSWORD'
    ENCRYPTED_PASSWORD = 'ENCRYPTED_PASSWORD'
    JDBC_DRIVER_JAR_URI = 'JDBC_DRIVER_JAR_URI'
    JDBC_DRIVER_CLASS_NAME = 'JDBC_DRIVER_CLASS_NAME'
    JDBC_ENGINE = 'JDBC_ENGINE'
    JDBC_ENGINE_VERSION = 'JDBC_ENGINE_VERSION'
    CONFIG_FILES = 'CONFIG_FILES'
    INSTANCE_ID = 'INSTANCE_ID'
    JDBC_CONNECTION_URL = 'JDBC_CONNECTION_URL'
    JDBC_ENFORCE_SSL = 'JDBC_ENFORCE_SSL'
    CUSTOM_JDBC_CERT = 'CUSTOM_JDBC_CERT'
    SKIP_CUSTOM_JDBC_CERT_VALIDATION = 'SKIP_CUSTOM_JDBC_CERT_VALIDATION'
    CUSTOM_JDBC_CERT_STRING = 'CUSTOM_JDBC_CERT_STRING'
    CONNECTION_URL = 'CONNECTION_URL'
    KAFKA_BOOTSTRAP_SERVERS = 'KAFKA_BOOTSTRAP_SERVERS'
    KAFKA_SSL_ENABLED = 'KAFKA_SSL_ENABLED'
    KAFKA_CUSTOM_CERT = 'KAFKA_CUSTOM_CERT'
    KAFKA_SKIP_CUSTOM_CERT_VALIDATION = 'KAFKA_SKIP_CUSTOM_CERT_VALIDATION'
    KAFKA_CLIENT_KEYSTORE = 'KAFKA_CLIENT_KEYSTORE'
    KAFKA_CLIENT_KEYSTORE_PASSWORD = 'KAFKA_CLIENT_KEYSTORE_PASSWORD'
    KAFKA_CLIENT_KEY_PASSWORD = 'KAFKA_CLIENT_KEY_PASSWORD'
    ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD = (
        'ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD'
    )
    ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD = 'ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD'
    SECRET_ID = 'SECRET_ID'
    CONNECTOR_URL = 'CONNECTOR_URL'
    CONNECTOR_TYPE = 'CONNECTOR_TYPE'
    CONNECTOR_CLASS_NAME = 'CONNECTOR_CLASS_NAME'


class ConnectionType(Enum):
    JDBC = 'JDBC'
    SFTP = 'SFTP'
    MONGODB = 'MONGODB'
    KAFKA = 'KAFKA'
    NETWORK = 'NETWORK'
    MARKETPLACE = 'MARKETPLACE'
    CUSTOM = 'CUSTOM'


class CrawlId(RootModel[str_aliased]):
    root: str_aliased


class CrawlState(Enum):
    RUNNING = 'RUNNING'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    ERROR = 'ERROR'


class CrawlerConfiguration(RootModel[str_aliased]):
    root: str_aliased


class CrawlerHistoryState(Enum):
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    STOPPED = 'STOPPED'


class CrawlerLineageSettings(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class CrawlerNotRunningException(RootModel[Any]):
    root: Any


class CrawlerRunningException(RootModel[Any]):
    root: Any


class CrawlerSecurityConfiguration(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class CrawlerState(Enum):
    READY = 'READY'
    RUNNING = 'RUNNING'
    STOPPING = 'STOPPING'


class CrawlerStoppingException(RootModel[Any]):
    root: Any


class CreateClassifierResponse(BaseModel):
    pass


class CreateConnectionResponse(BaseModel):
    pass


class CreateCrawlerResponse(BaseModel):
    pass


class CreateDatabaseResponse(BaseModel):
    pass


class CreatePartitionIndexResponse(BaseModel):
    pass


class CreatePartitionResponse(BaseModel):
    pass


class CreateTableResponse(BaseModel):
    pass


class CreateUserDefinedFunctionResponse(BaseModel):
    pass


class CreatedTimestamp(RootModel[str_aliased]):
    root: str_aliased


class CronExpression(RootModel[str_aliased]):
    root: str_aliased


class CsvColumnDelimiter(
    RootModel[constr(pattern=r'[^\r\n]', min_length=1, max_length=1)]
):
    root: constr(pattern=r'[^\r\n]', min_length=1, max_length=1)


class CsvHeaderOption(Enum):
    UNKNOWN = 'UNKNOWN'
    PRESENT = 'PRESENT'
    ABSENT = 'ABSENT'


class CsvQuoteSymbol(RootModel[constr(pattern=r'[^\r\n]', min_length=1, max_length=1)]):
    root: constr(pattern=r'[^\r\n]', min_length=1, max_length=1)


class CustomPatterns(RootModel[constr(min_length=0, max_length=16000)]):
    root: constr(min_length=0, max_length=16000)


class DQDLString(
    RootModel[
        constr(pattern=r'([\u0020-\u007E\r\s\n])*', min_length=1, max_length=65536)
    ]
):
    root: constr(pattern=r'([\u0020-\u007E\r\s\n])*', min_length=1, max_length=65536)


class DQStopJobOnFailureTiming(Enum):
    Immediate = 'Immediate'
    AfterDataLoad = 'AfterDataLoad'


class DQTransformOutput(Enum):
    PrimaryInput = 'PrimaryInput'
    EvaluationResults = 'EvaluationResults'


class DataFormat(Enum):
    AVRO = 'AVRO'
    JSON = 'JSON'
    PROTOBUF = 'PROTOBUF'


class DataLakePrincipalString(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class DataQualityRuleResultStatus(Enum):
    PASS = 'PASS'
    FAIL = 'FAIL'
    ERROR = 'ERROR'


class DataQualityRulesetString(RootModel[constr(min_length=1, max_length=65536)]):
    root: constr(min_length=1, max_length=65536)


class DatabaseName(RootModel[str_aliased]):
    root: str_aliased


class DeleteBehavior(Enum):
    LOG = 'LOG'
    DELETE_FROM_DATABASE = 'DELETE_FROM_DATABASE'
    DEPRECATE_IN_DATABASE = 'DEPRECATE_IN_DATABASE'


class DeleteClassifierResponse(BaseModel):
    pass


class DeleteColumnStatisticsForPartitionResponse(BaseModel):
    pass


class DeleteColumnStatisticsForTableResponse(BaseModel):
    pass


class DeleteConnectionResponse(BaseModel):
    pass


class DeleteCrawlerResponse(BaseModel):
    pass


class DeleteDataQualityRulesetResponse(BaseModel):
    pass


class DeleteDatabaseResponse(BaseModel):
    pass


class DeleteDevEndpointResponse(BaseModel):
    pass


class DeletePartitionIndexResponse(BaseModel):
    pass


class DeletePartitionResponse(BaseModel):
    pass


class DeleteResourcePolicyResponse(BaseModel):
    pass


class DeleteSecurityConfigurationResponse(BaseModel):
    pass


class DeleteTableResponse(BaseModel):
    pass


class DeleteTableVersionResponse(BaseModel):
    pass


class DeleteUserDefinedFunctionResponse(BaseModel):
    pass


class DeltaTargetCompressionType(Enum):
    uncompressed = 'uncompressed'
    snappy = 'snappy'


class DescriptionString(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class DescriptionStringRemovable(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class Double(RootModel[float_aliased]):
    root: float_aliased


class DoubleValue(RootModel[float_aliased]):
    root: float_aliased


class EnableHybridValues(Enum):
    TRUE = 'TRUE'
    FALSE = 'FALSE'


class EnclosedInStringProperty(RootModel[str_aliased]):
    root: str_aliased


class EnclosedInStringPropertyWithQuote(RootModel[str_aliased]):
    root: str_aliased


class EntityNotFoundException(RootModel[Any]):
    root: Any


class ErrorCodeString(RootModel[str_aliased]):
    root: str_aliased


class ErrorMessageString(RootModel[str_aliased]):
    root: str_aliased


class ErrorString(RootModel[str_aliased]):
    root: str_aliased


class EventBatchingCondition(BaseModel):
    BatchSize_1: BatchSize = Field(..., alias='BatchSize')
    BatchWindow_1: Optional[BatchWindow] = Field(None, alias='BatchWindow')


class EventQueueArn(RootModel[str_aliased]):
    root: str_aliased


class ExecutionClass(Enum):
    FLEX = 'FLEX'
    STANDARD = 'STANDARD'


class ExecutionTime(RootModel[int_aliased]):
    root: int_aliased


class ExistCondition(Enum):
    MUST_EXIST = 'MUST_EXIST'
    NOT_EXIST = 'NOT_EXIST'
    NONE = 'NONE'


class ExtendedString(RootModel[constr(pattern=r'[\s\S]*')]):
    root: constr(pattern=r'[\s\S]*')


class FederatedResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class FederationIdentifier(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class FederationSourceException(RootModel[Any]):
    root: Any


class FederationSourceRetryableException(RootModel[Any]):
    root: Any


class FieldName(Enum):
    CRAWL_ID = 'CRAWL_ID'
    STATE = 'STATE'
    START_TIME = 'START_TIME'
    END_TIME = 'END_TIME'
    DPU_HOUR = 'DPU_HOUR'


class FieldType(RootModel[str_aliased]):
    root: str_aliased


class FilterLogicalOperator(Enum):
    AND = 'AND'
    OR = 'OR'


class FilterOperation(Enum):
    EQ = 'EQ'
    LT = 'LT'
    GT = 'GT'
    LTE = 'LTE'
    GTE = 'GTE'
    REGEX = 'REGEX'
    ISNULL = 'ISNULL'


class FilterOperator(Enum):
    GT = 'GT'
    GE = 'GE'
    LT = 'LT'
    LE = 'LE'
    EQ = 'EQ'
    NE = 'NE'


class FilterString(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class FilterValueType(Enum):
    COLUMNEXTRACTED = 'COLUMNEXTRACTED'
    CONSTANT = 'CONSTANT'


class FormatString(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class Generic512CharString(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class GenericBoundedDouble(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class GenericLimitedString(RootModel[constr(pattern=r'[A-Za-z0-9_-]*')]):
    root: constr(pattern=r'[A-Za-z0-9_-]*')


class GenericString(RootModel[str_aliased]):
    root: str_aliased


class GetCatalogImportStatusRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None


class GetDataCatalogEncryptionSettingsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None


class GetDevEndpointRequest(BaseModel):
    EndpointName: GenericString


class GlueEncryptionException(RootModel[Any]):
    root: Any


class GlueRecordType(Enum):
    DATE = 'DATE'
    STRING = 'STRING'
    TIMESTAMP = 'TIMESTAMP'
    INT = 'INT'
    FLOAT = 'FLOAT'
    LONG = 'LONG'
    BIGDECIMAL = 'BIGDECIMAL'
    BYTE = 'BYTE'
    SHORT = 'SHORT'
    DOUBLE = 'DOUBLE'


class GlueResourceArn(
    RootModel[
        constr(
            pattern=r'arn:(aws|aws-us-gov|aws-cn):glue:.*',
            min_length=1,
            max_length=10240,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws|aws-us-gov|aws-cn):glue:.*', min_length=1, max_length=10240
    )


class GlueStudioColumnNameString(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class GlueStudioSchemaColumn(BaseModel):
    Name: GlueStudioColumnNameString
    Type: Optional[ColumnTypeString] = None


class GlueStudioSchemaColumnList(RootModel[List[GlueStudioSchemaColumn]]):
    root: List[GlueStudioSchemaColumn]


class GlueTableAdditionalOptions(RootModel[Optional[Dict[str, DescriptionString]]]):
    root: Optional[Dict[str, DescriptionString]] = None


class GlueVersionString(
    RootModel[constr(pattern=r'^\w+\.\w+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^\w+\.\w+$', min_length=1, max_length=255)


class GrokPattern(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class HashString(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class HudiTargetCompressionType(Enum):
    gzip = 'gzip'
    lzo = 'lzo'
    uncompressed = 'uncompressed'
    snappy = 'snappy'


class IdString(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class IdempotentParameterMismatchException(RootModel[Any]):
    root: Any


class IllegalBlueprintStateException(RootModel[Any]):
    root: Any


class IllegalSessionStateException(RootModel[Any]):
    root: Any


class IllegalWorkflowStateException(RootModel[Any]):
    root: Any


class ImportCatalogToGlueRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None


class ImportCatalogToGlueResponse(BaseModel):
    pass


class Integer(RootModel[int_aliased]):
    root: int_aliased


class IntegerFlag(RootModel[conint(ge=0, le=1)]):
    root: conint(ge=0, le=1)


class IntegerValue(RootModel[int_aliased]):
    root: int_aliased


class InternalServiceException(RootModel[Any]):
    root: Any


class InvalidInputException(RootModel[Any]):
    root: Any


class InvalidStateException(RootModel[Any]):
    root: Any


class IsVersionValid(RootModel[bool_aliased]):
    root: bool_aliased


class JDBCConnectionType(Enum):
    sqlserver = 'sqlserver'
    mysql = 'mysql'
    oracle = 'oracle'
    postgresql = 'postgresql'
    redshift = 'redshift'


class JDBCDataType(Enum):
    ARRAY = 'ARRAY'
    BIGINT = 'BIGINT'
    BINARY = 'BINARY'
    BIT = 'BIT'
    BLOB = 'BLOB'
    BOOLEAN = 'BOOLEAN'
    CHAR = 'CHAR'
    CLOB = 'CLOB'
    DATALINK = 'DATALINK'
    DATE = 'DATE'
    DECIMAL = 'DECIMAL'
    DISTINCT = 'DISTINCT'
    DOUBLE = 'DOUBLE'
    FLOAT = 'FLOAT'
    INTEGER = 'INTEGER'
    JAVA_OBJECT = 'JAVA_OBJECT'
    LONGNVARCHAR = 'LONGNVARCHAR'
    LONGVARBINARY = 'LONGVARBINARY'
    LONGVARCHAR = 'LONGVARCHAR'
    NCHAR = 'NCHAR'
    NCLOB = 'NCLOB'
    NULL = 'NULL'
    NUMERIC = 'NUMERIC'
    NVARCHAR = 'NVARCHAR'
    OTHER = 'OTHER'
    REAL = 'REAL'
    REF = 'REF'
    REF_CURSOR = 'REF_CURSOR'
    ROWID = 'ROWID'
    SMALLINT = 'SMALLINT'
    SQLXML = 'SQLXML'
    STRUCT = 'STRUCT'
    TIME = 'TIME'
    TIME_WITH_TIMEZONE = 'TIME_WITH_TIMEZONE'
    TIMESTAMP = 'TIMESTAMP'
    TIMESTAMP_WITH_TIMEZONE = 'TIMESTAMP_WITH_TIMEZONE'
    TINYINT = 'TINYINT'
    VARBINARY = 'VARBINARY'
    VARCHAR = 'VARCHAR'


class JDBCDataTypeMapping(RootModel[Optional[Dict[str, GlueRecordType]]]):
    root: Optional[Dict[str, GlueRecordType]] = None


class JdbcMetadataEntry(Enum):
    COMMENTS = 'COMMENTS'
    RAWTYPES = 'RAWTYPES'


class JobBookmarksEncryptionMode(Enum):
    DISABLED = 'DISABLED'
    CSE_KMS = 'CSE-KMS'


class JobName(RootModel[str_aliased]):
    root: str_aliased


class JobRunState(Enum):
    STARTING = 'STARTING'
    RUNNING = 'RUNNING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMEOUT = 'TIMEOUT'
    ERROR = 'ERROR'
    WAITING = 'WAITING'


class JoinType(Enum):
    equijoin = 'equijoin'
    left = 'left'
    right = 'right'
    outer = 'outer'
    leftsemi = 'leftsemi'
    leftanti = 'leftanti'


class JsonPath(RootModel[str_aliased]):
    root: str_aliased


class JsonValue(RootModel[str_aliased]):
    root: str_aliased


class KafkaStreamingSourceOptions(BaseModel):
    AddRecordTimestamp: Optional[EnclosedInStringProperty] = None
    Assign: Optional[EnclosedInStringProperty] = None
    BootstrapServers: Optional[EnclosedInStringProperty] = None
    Classification: Optional[EnclosedInStringProperty] = None
    ConnectionName: Optional[EnclosedInStringProperty] = None
    Delimiter: Optional[EnclosedInStringProperty] = None
    EmitConsumerLagMetrics: Optional[EnclosedInStringProperty] = None
    EndingOffsets: Optional[EnclosedInStringProperty] = None
    IncludeHeaders: Optional[BoxedBoolean] = None
    MaxOffsetsPerTrigger: Optional[BoxedNonNegativeLong] = None
    MinPartitions: Optional[BoxedNonNegativeInt] = None
    NumRetries: Optional[BoxedNonNegativeInt] = None
    PollTimeoutMs: Optional[BoxedNonNegativeLong] = None
    RetryIntervalMs: Optional[BoxedNonNegativeLong] = None
    SecurityProtocol: Optional[EnclosedInStringProperty] = None
    StartingOffsets: Optional[EnclosedInStringProperty] = None
    SubscribePattern: Optional[EnclosedInStringProperty] = None
    TopicName: Optional[EnclosedInStringProperty] = None


class KeyString(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class KmsKeyArn(RootModel[constr(pattern=r'arn:aws:kms:.*')]):
    root: constr(pattern=r'arn:aws:kms:.*')


class LabelCount(RootModel[int_aliased]):
    root: int_aliased


class Language(Enum):
    PYTHON = 'PYTHON'
    SCALA = 'SCALA'


class LastCrawlStatus(Enum):
    SUCCEEDED = 'SUCCEEDED'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'


class LatestSchemaVersionBoolean(RootModel[bool_aliased]):
    root: bool_aliased


class LimitedStringList(RootModel[List[GenericLimitedString]]):
    root: List[GenericLimitedString]


class LineageConfiguration(BaseModel):
    CrawlerLineageSettings_1: Optional[CrawlerLineageSettings] = Field(
        None, alias='CrawlerLineageSettings'
    )


class Location(BaseModel):
    DynamoDB: Optional[CodeGenNodeArgs] = None
    Jdbc: Optional[CodeGenNodeArgs] = None
    S3: Optional[CodeGenNodeArgs] = None


class LocationMap(RootModel[Optional[Dict[str, ColumnValuesString]]]):
    root: Optional[Dict[str, ColumnValuesString]] = None


class LocationString(RootModel[constr(max_length=2056)]):
    root: constr(max_length=2056)


class LocationStringList(RootModel[List[LocationString]]):
    root: List[LocationString]


class LogGroup(
    RootModel[constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=512)


class LogStream(RootModel[constr(pattern=r'[^:*]*', min_length=1, max_length=512)]):
    root: constr(pattern=r'[^:*]*', min_length=1, max_length=512)


class Logical(Enum):
    AND = 'AND'
    ANY = 'ANY'


class LogicalOperator(Enum):
    EQUALS = 'EQUALS'


class Long(RootModel[int_aliased]):
    root: int_aliased


class LongValue(RootModel[int_aliased]):
    root: int_aliased


class MLTransformNotReadyException(RootModel[Any]):
    root: Any


class MLUserDataEncryptionModeString(Enum):
    DISABLED = 'DISABLED'
    SSE_KMS = 'SSE-KMS'


class MapValue(RootModel[Optional[Dict[str, GenericString]]]):
    root: Optional[Dict[str, GenericString]] = None


class MaskValue(
    RootModel[constr(pattern=r'[*A-Za-z0-9_-]*', min_length=0, max_length=256)]
):
    root: constr(pattern=r'[*A-Za-z0-9_-]*', min_length=0, max_length=256)


class MaxConcurrentRuns(RootModel[int_aliased]):
    root: int_aliased


class MaxResultsNumber(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxRetries(RootModel[int_aliased]):
    root: int_aliased


class MessagePrefix(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class MessageString(RootModel[str_aliased]):
    root: str_aliased


class MetadataKeyString(
    RootModel[constr(pattern=r'[a-zA-Z0-9+-=._./@]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9+-=._./@]+', min_length=1, max_length=128)


class MetadataValueString(
    RootModel[constr(pattern=r'[a-zA-Z0-9+-=._./@]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9+-=._./@]+', min_length=1, max_length=256)


class MillisecondsCount(RootModel[int_aliased]):
    root: int_aliased


class NameString(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class NameStringList(RootModel[List[NameString]]):
    root: List[NameString]


class NoScheduleException(RootModel[Any]):
    root: Any


class NodeId(RootModel[constr(pattern=r'[A-Za-z0-9_-]*')]):
    root: constr(pattern=r'[A-Za-z0-9_-]*')


class NodeIdList(RootModel[List[NameString]]):
    root: List[NameString]


class NodeName(RootModel[str_aliased]):
    root: str_aliased


class NodeType(Enum):
    CRAWLER = 'CRAWLER'
    JOB = 'JOB'
    TRIGGER = 'TRIGGER'


class NonNegativeDouble(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class NonNegativeInt(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class NonNegativeInteger(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class NonNegativeLong(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class NotifyDelayAfter(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class NullCheckBoxList(BaseModel):
    IsEmpty: Optional[BoxedBoolean] = None
    IsNegOne: Optional[BoxedBoolean] = None
    IsNullString: Optional[BoxedBoolean] = None


class NullableBoolean(RootModel[bool_aliased]):
    root: bool_aliased


class NullableDouble(RootModel[float_aliased]):
    root: float_aliased


class NullableInteger(RootModel[int_aliased]):
    root: int_aliased


class OneInput(RootModel[List[NodeId]]):
    root: List[NodeId] = Field(..., max_length=1, min_length=1)


class OperationTimeoutException(RootModel[Any]):
    root: Any


class OracleSQLCatalogSource(BaseModel):
    Database: EnclosedInStringProperty
    Name: NodeName
    Table: EnclosedInStringProperty


class OracleSQLCatalogTarget(BaseModel):
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    Table: EnclosedInStringProperty


class OrchestrationArgumentsValue(RootModel[constr(min_length=0, max_length=4096)]):
    root: constr(min_length=0, max_length=4096)


class OrchestrationIAMRoleArn(
    RootModel[
        constr(
            pattern=r'arn:aws[^:]*:iam::[0-9]*:role/.+', min_length=1, max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[^:]*:iam::[0-9]*:role/.+', min_length=1, max_length=1024
    )


class OrchestrationNameString(
    RootModel[constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\.\-_A-Za-z0-9]+', min_length=1, max_length=128)


class OrchestrationRoleArn(
    RootModel[
        constr(
            pattern=r'arn:aws[^:]*:iam::[0-9]*:role/.+', min_length=20, max_length=2048
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[^:]*:iam::[0-9]*:role/.+', min_length=20, max_length=2048
    )


class OrchestrationS3Location(
    RootModel[
        constr(
            pattern=r'^s3://([^/]+)/([^/]+/)*([^/]+)$', min_length=1, max_length=8192
        )
    ]
):
    root: constr(
        pattern=r'^s3://([^/]+)/([^/]+/)*([^/]+)$', min_length=1, max_length=8192
    )


class OrchestrationStatementCodeString(RootModel[constr(max_length=68000)]):
    root: constr(max_length=68000)


class OrchestrationStringList(RootModel[List[GenericString]]):
    root: List[GenericString]


class OrchestrationToken(RootModel[constr(max_length=400000)]):
    root: constr(max_length=400000)


class Order(BaseModel):
    Column: NameString
    SortOrder: IntegerFlag


class OrderList(RootModel[List[Order]]):
    root: List[Order]


class OtherMetadataValueListItem(BaseModel):
    CreatedTime: Optional[CreatedTimestamp] = None
    MetadataValue: Optional[MetadataValueString] = None


class PageSize(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class PaginationToken(RootModel[str_aliased]):
    root: str_aliased


class ParamType(Enum):
    str = 'str'
    int = 'int'
    float = 'float'
    complex = 'complex'
    bool = 'bool'
    list = 'list'
    null = 'null'


class ParametersMapValue(RootModel[constr(max_length=512000)]):
    root: constr(max_length=512000)


class ParquetCompressionType(Enum):
    snappy = 'snappy'
    lzo = 'lzo'
    gzip = 'gzip'
    uncompressed = 'uncompressed'
    none = 'none'


class PartitionIndexStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class Path(RootModel[str_aliased]):
    root: str_aliased


class PathList(RootModel[List[Path]]):
    root: List[Path]


class Permission(Enum):
    ALL = 'ALL'
    SELECT = 'SELECT'
    ALTER = 'ALTER'
    DROP = 'DROP'
    DELETE = 'DELETE'
    INSERT = 'INSERT'
    CREATE_DATABASE = 'CREATE_DATABASE'
    CREATE_TABLE = 'CREATE_TABLE'
    DATA_LOCATION_ACCESS = 'DATA_LOCATION_ACCESS'


class PermissionList(RootModel[List[Permission]]):
    root: List[Permission]


class PermissionType(Enum):
    COLUMN_PERMISSION = 'COLUMN_PERMISSION'
    CELL_FILTER_PERMISSION = 'CELL_FILTER_PERMISSION'


class PermissionTypeList(RootModel[List[PermissionType]]):
    root: List[PermissionType] = Field(..., max_length=255, min_length=1)


class PermissionTypeMismatchException(RootModel[Any]):
    root: Any


class PiiType(Enum):
    RowAudit = 'RowAudit'
    RowMasking = 'RowMasking'
    ColumnAudit = 'ColumnAudit'
    ColumnMasking = 'ColumnMasking'


class PolicyJsonString(RootModel[constr(min_length=2)]):
    root: constr(min_length=2)


class PollingTime(RootModel[conint(ge=10)]):
    root: conint(ge=10)


class PositiveLong(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PostgreSQLCatalogSource(BaseModel):
    Database: EnclosedInStringProperty
    Name: NodeName
    Table: EnclosedInStringProperty


class PostgreSQLCatalogTarget(BaseModel):
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    Table: EnclosedInStringProperty


class Predecessor(BaseModel):
    JobName: Optional[NameString] = None
    RunId: Optional[IdString] = None


class PredecessorList(RootModel[List[Predecessor]]):
    root: List[Predecessor]


class PredicateString(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class PrincipalType(Enum):
    USER = 'USER'
    ROLE = 'ROLE'
    GROUP = 'GROUP'


class Prob(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class PublicKeysList(RootModel[List[GenericString]]):
    root: List[GenericString] = Field(..., max_length=5)


class PutDataCatalogEncryptionSettingsResponse(BaseModel):
    pass


class PutResourcePolicyRequest(BaseModel):
    EnableHybrid: Optional[EnableHybridValues] = None
    PolicyExistsCondition: Optional[ExistCondition] = None
    PolicyHashCondition: Optional[HashString] = None
    PolicyInJson: PolicyJsonString
    ResourceArn: Optional[GlueResourceArn] = None


class PutResourcePolicyResponse(BaseModel):
    PolicyHash: Optional[HashString] = None


class PutWorkflowRunPropertiesResponse(BaseModel):
    pass


class PythonScript(RootModel[str_aliased]):
    root: str_aliased


class PythonVersionString(RootModel[constr(pattern=r'^([2-3]|3[.]9)$')]):
    root: constr(pattern=r'^([2-3]|3[.]9)$')


class QuerySchemaVersionMetadataMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class QuoteChar(Enum):
    quote = 'quote'
    quillemet = 'quillemet'
    single_quote = 'single_quote'
    disabled = 'disabled'


class RecordsCount(RootModel[int_aliased]):
    root: int_aliased


class RecrawlBehavior(Enum):
    CRAWL_EVERYTHING = 'CRAWL_EVERYTHING'
    CRAWL_NEW_FOLDERS_ONLY = 'CRAWL_NEW_FOLDERS_ONLY'
    CRAWL_EVENT_MODE = 'CRAWL_EVENT_MODE'


class RecrawlPolicy(BaseModel):
    RecrawlBehavior_1: Optional[RecrawlBehavior] = Field(None, alias='RecrawlBehavior')


class RedshiftSource(BaseModel):
    Database: EnclosedInStringProperty
    Name: NodeName
    RedshiftTmpDir: Optional[EnclosedInStringProperty] = None
    Table: EnclosedInStringProperty
    TmpDirIAMRole: Optional[EnclosedInStringProperty] = None


class RegistryStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'


class RelationalCatalogSource(BaseModel):
    Database: EnclosedInStringProperty
    Name: NodeName
    Table: EnclosedInStringProperty


class ReplaceBoolean(RootModel[bool_aliased]):
    root: bool_aliased


class ResourceNotReadyException(RootModel[Any]):
    root: Any


class ResourceNumberLimitExceededException(RootModel[Any]):
    root: Any


class ResourceShareType(Enum):
    FOREIGN = 'FOREIGN'
    ALL = 'ALL'
    FEDERATED = 'FEDERATED'


class ResourceType(Enum):
    JAR = 'JAR'
    FILE = 'FILE'
    ARCHIVE = 'ARCHIVE'


class ResumeWorkflowRunRequest(BaseModel):
    Name: NameString
    NodeIds: NodeIdList
    RunId: IdString


class ResumeWorkflowRunResponse(BaseModel):
    NodeIds: Optional[NodeIdList] = None
    RunId: Optional[IdString] = None


class Role(RootModel[str_aliased]):
    root: str_aliased


class RoleArn(RootModel[constr(pattern=r'arn:aws:iam::\d{12}:role/.*')]):
    root: constr(pattern=r'arn:aws:iam::\d{12}:role/.*')


class RoleString(RootModel[str_aliased]):
    root: str_aliased


class RowTag(RootModel[str_aliased]):
    root: str_aliased


class RulesetNames(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=10, min_length=1)


class RunId(RootModel[str_aliased]):
    root: str_aliased


class RunStatementRequest(BaseModel):
    Code: OrchestrationStatementCodeString
    RequestOrigin: Optional[OrchestrationNameString] = None
    SessionId: NameString


class RunStatementResponse(BaseModel):
    Id: Optional[IntegerValue] = None


class S3DirectSourceAdditionalOptions(BaseModel):
    BoundedFiles: Optional[BoxedLong] = None
    BoundedSize: Optional[BoxedLong] = None
    EnableSamplePath: Optional[BoxedBoolean] = None
    SamplePath: Optional[EnclosedInStringProperty] = None


class S3EncryptionMode(Enum):
    DISABLED = 'DISABLED'
    SSE_KMS = 'SSE-KMS'
    SSE_S3 = 'SSE-S3'


class S3SourceAdditionalOptions(BaseModel):
    BoundedFiles: Optional[BoxedLong] = None
    BoundedSize: Optional[BoxedLong] = None


class S3Target(BaseModel):
    ConnectionName_1: Optional[ConnectionName] = Field(None, alias='ConnectionName')
    DlqEventQueueArn: Optional[EventQueueArn] = None
    EventQueueArn_1: Optional[EventQueueArn] = Field(None, alias='EventQueueArn')
    Exclusions: Optional[PathList] = None
    Path_1: Optional[Path] = Field(None, alias='Path')
    SampleSize: Optional[NullableInteger] = None


class S3TargetList(RootModel[List[S3Target]]):
    root: List[S3Target]


class ScalaCode(RootModel[str_aliased]):
    root: str_aliased


class ScheduleState(Enum):
    SCHEDULED = 'SCHEDULED'
    NOT_SCHEDULED = 'NOT_SCHEDULED'
    TRANSITIONING = 'TRANSITIONING'


class SchedulerNotRunningException(RootModel[Any]):
    root: Any


class SchedulerRunningException(RootModel[Any]):
    root: Any


class SchedulerTransitioningException(RootModel[Any]):
    root: Any


class SchemaCheckpointNumber(RootModel[conint(ge=1, le=100000)]):
    root: conint(ge=1, le=100000)


class SchemaColumn(BaseModel):
    DataType: Optional[ColumnTypeString] = None
    Name: Optional[ColumnNameString] = None


class SchemaDefinitionDiff(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=340000)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=340000)


class SchemaDefinitionString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=170000)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=170000)


class SchemaDiffType(Enum):
    SYNTAX_DIFF = 'SYNTAX_DIFF'


class SchemaPathString(RootModel[str_aliased]):
    root: str_aliased


class SchemaRegistryNameString(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_$#.]+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9-_$#.]+', min_length=1, max_length=255)


class SchemaRegistryTokenString(RootModel[str_aliased]):
    root: str_aliased


class SchemaStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    PENDING = 'PENDING'
    DELETING = 'DELETING'


class SchemaValidationError(RootModel[constr(min_length=1, max_length=5000)]):
    root: constr(min_length=1, max_length=5000)


class SchemaVersionIdString(
    RootModel[
        constr(
            pattern=r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}',
        min_length=36,
        max_length=36,
    )


class SchemaVersionStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    PENDING = 'PENDING'
    FAILURE = 'FAILURE'
    DELETING = 'DELETING'


class ScriptLocationString(RootModel[constr(max_length=400000)]):
    root: constr(max_length=400000)


class SecurityGroupIdList(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=50, min_length=0)


class SelectFromCollection(BaseModel):
    Index: NonNegativeInt
    Inputs: OneInput
    Name: NodeName


class Separator(Enum):
    comma = 'comma'
    ctrla = 'ctrla'
    pipe = 'pipe'
    semicolon = 'semicolon'
    tab = 'tab'


class SessionCommand(BaseModel):
    Name: Optional[NameString] = None
    PythonVersion: Optional[PythonVersionString] = None


class SessionIdList(RootModel[List[NameString]]):
    root: List[NameString]


class SessionStatus(Enum):
    PROVISIONING = 'PROVISIONING'
    READY = 'READY'
    FAILED = 'FAILED'
    TIMEOUT = 'TIMEOUT'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'


class Sort(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class SortDirectionType(Enum):
    DESCENDING = 'DESCENDING'
    ASCENDING = 'ASCENDING'


class SourceControlAuthStrategy(Enum):
    PERSONAL_ACCESS_TOKEN = 'PERSONAL_ACCESS_TOKEN'
    AWS_SECRETS_MANAGER = 'AWS_SECRETS_MANAGER'


class SourceControlProvider(Enum):
    GITHUB = 'GITHUB'
    AWS_CODE_COMMIT = 'AWS_CODE_COMMIT'


class SqlAlias(BaseModel):
    Alias: EnclosedInStringPropertyWithQuote
    From: NodeId


class SqlAliases(RootModel[List[SqlAlias]]):
    root: List[SqlAlias]


class SqlQuery(RootModel[str_aliased]):
    root: str_aliased


class StartBlueprintRunRequest(BaseModel):
    BlueprintName: OrchestrationNameString
    Parameters: Optional[BlueprintParameters] = None
    RoleArn: OrchestrationIAMRoleArn


class StartBlueprintRunResponse(BaseModel):
    RunId: Optional[IdString] = None


class StartCrawlerRequest(BaseModel):
    Name: NameString


class StartCrawlerResponse(BaseModel):
    pass


class StartCrawlerScheduleRequest(BaseModel):
    CrawlerName: NameString


class StartCrawlerScheduleResponse(BaseModel):
    pass


class StartDataQualityRuleRecommendationRunResponse(BaseModel):
    RunId: Optional[HashString] = None


class StartDataQualityRulesetEvaluationRunResponse(BaseModel):
    RunId: Optional[HashString] = None


class StartExportLabelsTaskRunResponse(BaseModel):
    TaskRunId: Optional[HashString] = None


class StartImportLabelsTaskRunResponse(BaseModel):
    TaskRunId: Optional[HashString] = None


class StartJobRunResponse(BaseModel):
    JobRunId: Optional[IdString] = None


class StartMLEvaluationTaskRunRequest(BaseModel):
    TransformId: HashString


class StartMLEvaluationTaskRunResponse(BaseModel):
    TaskRunId: Optional[HashString] = None


class StartMLLabelingSetGenerationTaskRunResponse(BaseModel):
    TaskRunId: Optional[HashString] = None


class StartTriggerRequest(BaseModel):
    Name: NameString


class StartTriggerResponse(BaseModel):
    Name: Optional[NameString] = None


class StartWorkflowRunResponse(BaseModel):
    RunId: Optional[IdString] = None


class StartingEventBatchCondition(BaseModel):
    BatchSize: Optional[NullableInteger] = None
    BatchWindow: Optional[NullableInteger] = None


class StartingPosition(Enum):
    latest = 'latest'
    trim_horizon = 'trim_horizon'
    earliest = 'earliest'


class StatementOutputData(BaseModel):
    TextPlain: Optional[GenericString] = None


class StatementState(Enum):
    WAITING = 'WAITING'
    RUNNING = 'RUNNING'
    AVAILABLE = 'AVAILABLE'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    ERROR = 'ERROR'


class StopCrawlerRequest(BaseModel):
    Name: NameString


class StopCrawlerResponse(BaseModel):
    pass


class StopCrawlerScheduleRequest(BaseModel):
    CrawlerName: NameString


class StopCrawlerScheduleResponse(BaseModel):
    pass


class StopSessionRequest(BaseModel):
    Id: NameString
    RequestOrigin: Optional[OrchestrationNameString] = None


class StopSessionResponse(BaseModel):
    Id: Optional[NameString] = None


class StopTriggerRequest(BaseModel):
    Name: NameString


class StopTriggerResponse(BaseModel):
    Name: Optional[NameString] = None


class StopWorkflowRunRequest(BaseModel):
    Name: NameString
    RunId: IdString


class StopWorkflowRunResponse(BaseModel):
    pass


class StreamingDataPreviewOptions(BaseModel):
    PollingTime_1: Optional[PollingTime] = Field(None, alias='PollingTime')
    RecordPollingLimit: Optional[PositiveLong] = None


class StringColumnStatisticsData(BaseModel):
    AverageLength: NonNegativeDouble
    MaximumLength: NonNegativeLong
    NumberOfDistinctValues: NonNegativeLong
    NumberOfNulls: NonNegativeLong


class StringList(RootModel[List[GenericString]]):
    root: List[GenericString]


class TableIdentifier(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: Optional[NameString] = None
    Name: Optional[NameString] = None


class TableName(RootModel[str_aliased]):
    root: str_aliased


class TablePrefix(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class TableTypeString(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeysList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TagsMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TargetFormat(Enum):
    json = 'json'
    csv = 'csv'
    avro = 'avro'
    orc = 'orc'
    parquet = 'parquet'
    hudi = 'hudi'
    delta = 'delta'


class TaskRunSortColumnType(Enum):
    TASK_RUN_TYPE = 'TASK_RUN_TYPE'
    STATUS = 'STATUS'
    STARTED = 'STARTED'


class TaskRunSortCriteria(BaseModel):
    Column: TaskRunSortColumnType
    SortDirection: SortDirectionType


class TaskStatusType(Enum):
    STARTING = 'STARTING'
    RUNNING = 'RUNNING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMEOUT = 'TIMEOUT'


class TaskType(Enum):
    EVALUATION = 'EVALUATION'
    LABELING_SET_GENERATION = 'LABELING_SET_GENERATION'
    IMPORT_LABELS = 'IMPORT_LABELS'
    EXPORT_LABELS = 'EXPORT_LABELS'
    FIND_MATCHES = 'FIND_MATCHES'


class Timeout(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Timestamp(RootModel[datetime]):
    root: datetime


class TimestampValue(RootModel[datetime]):
    root: datetime


class Token(RootModel[str_aliased]):
    root: str_aliased


class Topk(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class TotalSegmentsInteger(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class TransactionIdString(
    RootModel[constr(pattern=r'[\p{L}\p{N}\p{P}]*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[\p{L}\p{N}\p{P}]*', min_length=1, max_length=255)


class TransformIdList(RootModel[List[HashString]]):
    root: List[HashString]


class TransformSchema(RootModel[List[SchemaColumn]]):
    root: List[SchemaColumn] = Field(..., max_length=100)


class TransformSortColumnType(Enum):
    NAME = 'NAME'
    TRANSFORM_TYPE = 'TRANSFORM_TYPE'
    STATUS = 'STATUS'
    CREATED = 'CREATED'
    LAST_MODIFIED = 'LAST_MODIFIED'


class TransformSortCriteria(BaseModel):
    Column: TransformSortColumnType
    SortDirection: SortDirectionType


class TransformStatusType(Enum):
    NOT_READY = 'NOT_READY'
    READY = 'READY'
    DELETING = 'DELETING'


class TransformType(Enum):
    FIND_MATCHES = 'FIND_MATCHES'


class TriggerNameList(RootModel[List[NameString]]):
    root: List[NameString]


class TriggerState(Enum):
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    ACTIVATING = 'ACTIVATING'
    ACTIVATED = 'ACTIVATED'
    DEACTIVATING = 'DEACTIVATING'
    DEACTIVATED = 'DEACTIVATED'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class TriggerType(Enum):
    SCHEDULED = 'SCHEDULED'
    CONDITIONAL = 'CONDITIONAL'
    ON_DEMAND = 'ON_DEMAND'
    EVENT = 'EVENT'


class TwoInputs(RootModel[List[NodeId]]):
    root: List[NodeId] = Field(..., max_length=2, min_length=2)


class TypeString(RootModel[constr(min_length=0, max_length=20000)]):
    root: constr(min_length=0, max_length=20000)


class URI(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class UnionType(Enum):
    ALL = 'ALL'
    DISTINCT = 'DISTINCT'


class UntagResourceRequest(BaseModel):
    ResourceArn: GlueResourceArn
    TagsToRemove: TagKeysList


class UntagResourceResponse(BaseModel):
    pass


class UpdateBehavior(Enum):
    LOG = 'LOG'
    UPDATE_IN_DATABASE = 'UPDATE_IN_DATABASE'


class UpdateBlueprintRequest(BaseModel):
    BlueprintLocation: OrchestrationS3Location
    Description: Optional[Generic512CharString] = None
    Name: OrchestrationNameString


class UpdateBlueprintResponse(BaseModel):
    Name: Optional[NameString] = None


class UpdateCatalogBehavior(Enum):
    UPDATE_IN_DATABASE = 'UPDATE_IN_DATABASE'
    LOG = 'LOG'


class UpdateClassifierResponse(BaseModel):
    pass


class UpdateConnectionResponse(BaseModel):
    pass


class UpdateCrawlerResponse(BaseModel):
    pass


class UpdateCrawlerScheduleRequest(BaseModel):
    CrawlerName: NameString
    Schedule: Optional[CronExpression] = None


class UpdateCrawlerScheduleResponse(BaseModel):
    pass


class UpdateDataQualityRulesetRequest(BaseModel):
    Description: Optional[DescriptionString] = None
    Name: NameString
    Ruleset: Optional[DataQualityRulesetString] = None


class UpdateDataQualityRulesetResponse(BaseModel):
    Description: Optional[DescriptionString] = None
    Name: Optional[NameString] = None
    Ruleset: Optional[DataQualityRulesetString] = None


class UpdateDatabaseResponse(BaseModel):
    pass


class UpdateDevEndpointResponse(BaseModel):
    pass


class UpdateGrokClassifierRequest(BaseModel):
    Classification_1: Optional[Classification] = Field(None, alias='Classification')
    CustomPatterns_1: Optional[CustomPatterns] = Field(None, alias='CustomPatterns')
    GrokPattern_1: Optional[GrokPattern] = Field(None, alias='GrokPattern')
    Name: NameString


class UpdateJobFromSourceControlRequest(BaseModel):
    AuthStrategy: Optional[SourceControlAuthStrategy] = None
    AuthToken: Optional[AuthTokenString] = None
    BranchName: Optional[NameString] = None
    CommitId: Optional[CommitIdString] = None
    Folder: Optional[NameString] = None
    JobName: Optional[NameString] = None
    Provider: Optional[SourceControlProvider] = None
    RepositoryName: Optional[NameString] = None
    RepositoryOwner: Optional[NameString] = None


class UpdateJobFromSourceControlResponse(BaseModel):
    JobName: Optional[NameString] = None


class UpdateJobResponse(BaseModel):
    JobName: Optional[NameString] = None


class UpdateJsonClassifierRequest(BaseModel):
    JsonPath_1: Optional[JsonPath] = Field(None, alias='JsonPath')
    Name: NameString


class UpdateMLTransformResponse(BaseModel):
    TransformId: Optional[HashString] = None


class UpdatePartitionResponse(BaseModel):
    pass


class UpdateRegistryResponse(BaseModel):
    RegistryArn: Optional[GlueResourceArn] = None
    RegistryName: Optional[SchemaRegistryNameString] = None


class UpdateSchemaResponse(BaseModel):
    RegistryName: Optional[SchemaRegistryNameString] = None
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaName: Optional[SchemaRegistryNameString] = None


class UpdateSourceControlFromJobRequest(BaseModel):
    AuthStrategy: Optional[SourceControlAuthStrategy] = None
    AuthToken: Optional[AuthTokenString] = None
    BranchName: Optional[NameString] = None
    CommitId: Optional[CommitIdString] = None
    Folder: Optional[NameString] = None
    JobName: Optional[NameString] = None
    Provider: Optional[SourceControlProvider] = None
    RepositoryName: Optional[NameString] = None
    RepositoryOwner: Optional[NameString] = None


class UpdateSourceControlFromJobResponse(BaseModel):
    JobName: Optional[NameString] = None


class UpdateTableResponse(BaseModel):
    pass


class UpdateUserDefinedFunctionResponse(BaseModel):
    pass


class UpdateWorkflowResponse(BaseModel):
    Name: Optional[NameString] = None


class UpdateXMLClassifierRequest(BaseModel):
    Classification_1: Optional[Classification] = Field(None, alias='Classification')
    Name: NameString
    RowTag_1: Optional[RowTag] = Field(None, alias='RowTag')


class UpdatedTimestamp(RootModel[str_aliased]):
    root: str_aliased


class UriString(RootModel[str_aliased]):
    root: str_aliased


class ValidationException(RootModel[Any]):
    root: Any


class ValueString(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class ValueStringList(RootModel[List[ValueString]]):
    root: List[ValueString]


class VersionId(RootModel[int_aliased]):
    root: int_aliased


class VersionLongNumber(RootModel[conint(ge=1, le=100000)]):
    root: conint(ge=1, le=100000)


class VersionMismatchException(RootModel[Any]):
    root: Any


class VersionString(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class VersionsString(
    RootModel[
        constr(
            pattern=r'[1-9][0-9]*|[1-9][0-9]*-[1-9][0-9]*',
            min_length=1,
            max_length=100000,
        )
    ]
):
    root: constr(
        pattern=r'[1-9][0-9]*|[1-9][0-9]*-[1-9][0-9]*', min_length=1, max_length=100000
    )


class ViewTextString(RootModel[constr(max_length=409600)]):
    root: constr(max_length=409600)


class WorkerType(Enum):
    Standard = 'Standard'
    G_1X = 'G.1X'
    G_2X = 'G.2X'
    G_025X = 'G.025X'


class WorkflowNames(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=25, min_length=1)


class WorkflowRunProperties(RootModel[Optional[Dict[str, GenericString]]]):
    root: Optional[Dict[str, GenericString]] = None


class WorkflowRunStatistics(BaseModel):
    ErroredActions: Optional[IntegerValue] = None
    FailedActions: Optional[IntegerValue] = None
    RunningActions: Optional[IntegerValue] = None
    StoppedActions: Optional[IntegerValue] = None
    SucceededActions: Optional[IntegerValue] = None
    TimeoutActions: Optional[IntegerValue] = None
    TotalActions: Optional[IntegerValue] = None
    WaitingActions: Optional[IntegerValue] = None


class WorkflowRunStatus(Enum):
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    ERROR = 'ERROR'


class XMLClassifier(BaseModel):
    Classification_1: Classification = Field(..., alias='Classification')
    CreationTime: Optional[Timestamp] = None
    LastUpdated: Optional[Timestamp] = None
    Name: NameString
    RowTag_1: Optional[RowTag] = Field(None, alias='RowTag')
    Version: Optional[VersionId] = None


class XAmzTarget(Enum):
    AWSGlue_BatchCreatePartition = 'AWSGlue.BatchCreatePartition'


class XAmzTarget1(Enum):
    AWSGlue_BatchDeleteConnection = 'AWSGlue.BatchDeleteConnection'


class XAmzTarget2(Enum):
    AWSGlue_BatchDeletePartition = 'AWSGlue.BatchDeletePartition'


class XAmzTarget3(Enum):
    AWSGlue_BatchDeleteTable = 'AWSGlue.BatchDeleteTable'


class XAmzTarget4(Enum):
    AWSGlue_BatchDeleteTableVersion = 'AWSGlue.BatchDeleteTableVersion'


class XAmzTarget5(Enum):
    AWSGlue_BatchGetBlueprints = 'AWSGlue.BatchGetBlueprints'


class XAmzTarget6(Enum):
    AWSGlue_BatchGetCrawlers = 'AWSGlue.BatchGetCrawlers'


class XAmzTarget7(Enum):
    AWSGlue_BatchGetCustomEntityTypes = 'AWSGlue.BatchGetCustomEntityTypes'


class XAmzTarget8(Enum):
    AWSGlue_BatchGetDataQualityResult = 'AWSGlue.BatchGetDataQualityResult'


class XAmzTarget9(Enum):
    AWSGlue_BatchGetDevEndpoints = 'AWSGlue.BatchGetDevEndpoints'


class XAmzTarget10(Enum):
    AWSGlue_BatchGetJobs = 'AWSGlue.BatchGetJobs'


class XAmzTarget11(Enum):
    AWSGlue_BatchGetPartition = 'AWSGlue.BatchGetPartition'


class XAmzTarget12(Enum):
    AWSGlue_BatchGetTriggers = 'AWSGlue.BatchGetTriggers'


class XAmzTarget13(Enum):
    AWSGlue_BatchGetWorkflows = 'AWSGlue.BatchGetWorkflows'


class XAmzTarget14(Enum):
    AWSGlue_BatchStopJobRun = 'AWSGlue.BatchStopJobRun'


class XAmzTarget15(Enum):
    AWSGlue_BatchUpdatePartition = 'AWSGlue.BatchUpdatePartition'


class XAmzTarget16(Enum):
    AWSGlue_CancelDataQualityRuleRecommendationRun = (
        'AWSGlue.CancelDataQualityRuleRecommendationRun'
    )


class XAmzTarget17(Enum):
    AWSGlue_CancelDataQualityRulesetEvaluationRun = (
        'AWSGlue.CancelDataQualityRulesetEvaluationRun'
    )


class XAmzTarget18(Enum):
    AWSGlue_CancelMLTaskRun = 'AWSGlue.CancelMLTaskRun'


class XAmzTarget19(Enum):
    AWSGlue_CancelStatement = 'AWSGlue.CancelStatement'


class XAmzTarget20(Enum):
    AWSGlue_CheckSchemaVersionValidity = 'AWSGlue.CheckSchemaVersionValidity'


class XAmzTarget21(Enum):
    AWSGlue_CreateBlueprint = 'AWSGlue.CreateBlueprint'


class XAmzTarget22(Enum):
    AWSGlue_CreateClassifier = 'AWSGlue.CreateClassifier'


class XAmzTarget23(Enum):
    AWSGlue_CreateConnection = 'AWSGlue.CreateConnection'


class XAmzTarget24(Enum):
    AWSGlue_CreateCrawler = 'AWSGlue.CreateCrawler'


class XAmzTarget25(Enum):
    AWSGlue_CreateCustomEntityType = 'AWSGlue.CreateCustomEntityType'


class XAmzTarget26(Enum):
    AWSGlue_CreateDataQualityRuleset = 'AWSGlue.CreateDataQualityRuleset'


class XAmzTarget27(Enum):
    AWSGlue_CreateDatabase = 'AWSGlue.CreateDatabase'


class XAmzTarget28(Enum):
    AWSGlue_CreateDevEndpoint = 'AWSGlue.CreateDevEndpoint'


class XAmzTarget29(Enum):
    AWSGlue_CreateJob = 'AWSGlue.CreateJob'


class XAmzTarget30(Enum):
    AWSGlue_CreateMLTransform = 'AWSGlue.CreateMLTransform'


class XAmzTarget31(Enum):
    AWSGlue_CreatePartition = 'AWSGlue.CreatePartition'


class XAmzTarget32(Enum):
    AWSGlue_CreatePartitionIndex = 'AWSGlue.CreatePartitionIndex'


class XAmzTarget33(Enum):
    AWSGlue_CreateRegistry = 'AWSGlue.CreateRegistry'


class XAmzTarget34(Enum):
    AWSGlue_CreateSchema = 'AWSGlue.CreateSchema'


class XAmzTarget35(Enum):
    AWSGlue_CreateScript = 'AWSGlue.CreateScript'


class XAmzTarget36(Enum):
    AWSGlue_CreateSecurityConfiguration = 'AWSGlue.CreateSecurityConfiguration'


class XAmzTarget37(Enum):
    AWSGlue_CreateSession = 'AWSGlue.CreateSession'


class XAmzTarget38(Enum):
    AWSGlue_CreateTable = 'AWSGlue.CreateTable'


class XAmzTarget39(Enum):
    AWSGlue_CreateTrigger = 'AWSGlue.CreateTrigger'


class XAmzTarget40(Enum):
    AWSGlue_CreateUserDefinedFunction = 'AWSGlue.CreateUserDefinedFunction'


class XAmzTarget41(Enum):
    AWSGlue_CreateWorkflow = 'AWSGlue.CreateWorkflow'


class XAmzTarget42(Enum):
    AWSGlue_DeleteBlueprint = 'AWSGlue.DeleteBlueprint'


class XAmzTarget43(Enum):
    AWSGlue_DeleteClassifier = 'AWSGlue.DeleteClassifier'


class XAmzTarget44(Enum):
    AWSGlue_DeleteColumnStatisticsForPartition = (
        'AWSGlue.DeleteColumnStatisticsForPartition'
    )


class XAmzTarget45(Enum):
    AWSGlue_DeleteColumnStatisticsForTable = 'AWSGlue.DeleteColumnStatisticsForTable'


class XAmzTarget46(Enum):
    AWSGlue_DeleteConnection = 'AWSGlue.DeleteConnection'


class XAmzTarget47(Enum):
    AWSGlue_DeleteCrawler = 'AWSGlue.DeleteCrawler'


class XAmzTarget48(Enum):
    AWSGlue_DeleteCustomEntityType = 'AWSGlue.DeleteCustomEntityType'


class XAmzTarget49(Enum):
    AWSGlue_DeleteDataQualityRuleset = 'AWSGlue.DeleteDataQualityRuleset'


class XAmzTarget50(Enum):
    AWSGlue_DeleteDatabase = 'AWSGlue.DeleteDatabase'


class XAmzTarget51(Enum):
    AWSGlue_DeleteDevEndpoint = 'AWSGlue.DeleteDevEndpoint'


class XAmzTarget52(Enum):
    AWSGlue_DeleteJob = 'AWSGlue.DeleteJob'


class XAmzTarget53(Enum):
    AWSGlue_DeleteMLTransform = 'AWSGlue.DeleteMLTransform'


class XAmzTarget54(Enum):
    AWSGlue_DeletePartition = 'AWSGlue.DeletePartition'


class XAmzTarget55(Enum):
    AWSGlue_DeletePartitionIndex = 'AWSGlue.DeletePartitionIndex'


class XAmzTarget56(Enum):
    AWSGlue_DeleteRegistry = 'AWSGlue.DeleteRegistry'


class XAmzTarget57(Enum):
    AWSGlue_DeleteResourcePolicy = 'AWSGlue.DeleteResourcePolicy'


class XAmzTarget58(Enum):
    AWSGlue_DeleteSchema = 'AWSGlue.DeleteSchema'


class XAmzTarget59(Enum):
    AWSGlue_DeleteSchemaVersions = 'AWSGlue.DeleteSchemaVersions'


class XAmzTarget60(Enum):
    AWSGlue_DeleteSecurityConfiguration = 'AWSGlue.DeleteSecurityConfiguration'


class XAmzTarget61(Enum):
    AWSGlue_DeleteSession = 'AWSGlue.DeleteSession'


class XAmzTarget62(Enum):
    AWSGlue_DeleteTable = 'AWSGlue.DeleteTable'


class XAmzTarget63(Enum):
    AWSGlue_DeleteTableVersion = 'AWSGlue.DeleteTableVersion'


class XAmzTarget64(Enum):
    AWSGlue_DeleteTrigger = 'AWSGlue.DeleteTrigger'


class XAmzTarget65(Enum):
    AWSGlue_DeleteUserDefinedFunction = 'AWSGlue.DeleteUserDefinedFunction'


class XAmzTarget66(Enum):
    AWSGlue_DeleteWorkflow = 'AWSGlue.DeleteWorkflow'


class XAmzTarget67(Enum):
    AWSGlue_GetBlueprint = 'AWSGlue.GetBlueprint'


class XAmzTarget68(Enum):
    AWSGlue_GetBlueprintRun = 'AWSGlue.GetBlueprintRun'


class XAmzTarget69(Enum):
    AWSGlue_GetBlueprintRuns = 'AWSGlue.GetBlueprintRuns'


class XAmzTarget70(Enum):
    AWSGlue_GetCatalogImportStatus = 'AWSGlue.GetCatalogImportStatus'


class XAmzTarget71(Enum):
    AWSGlue_GetClassifier = 'AWSGlue.GetClassifier'


class XAmzTarget72(Enum):
    AWSGlue_GetClassifiers = 'AWSGlue.GetClassifiers'


class XAmzTarget73(Enum):
    AWSGlue_GetColumnStatisticsForPartition = 'AWSGlue.GetColumnStatisticsForPartition'


class XAmzTarget74(Enum):
    AWSGlue_GetColumnStatisticsForTable = 'AWSGlue.GetColumnStatisticsForTable'


class XAmzTarget75(Enum):
    AWSGlue_GetConnection = 'AWSGlue.GetConnection'


class XAmzTarget76(Enum):
    AWSGlue_GetConnections = 'AWSGlue.GetConnections'


class XAmzTarget77(Enum):
    AWSGlue_GetCrawler = 'AWSGlue.GetCrawler'


class XAmzTarget78(Enum):
    AWSGlue_GetCrawlerMetrics = 'AWSGlue.GetCrawlerMetrics'


class XAmzTarget79(Enum):
    AWSGlue_GetCrawlers = 'AWSGlue.GetCrawlers'


class XAmzTarget80(Enum):
    AWSGlue_GetCustomEntityType = 'AWSGlue.GetCustomEntityType'


class XAmzTarget81(Enum):
    AWSGlue_GetDataCatalogEncryptionSettings = (
        'AWSGlue.GetDataCatalogEncryptionSettings'
    )


class XAmzTarget82(Enum):
    AWSGlue_GetDataQualityResult = 'AWSGlue.GetDataQualityResult'


class XAmzTarget83(Enum):
    AWSGlue_GetDataQualityRuleRecommendationRun = (
        'AWSGlue.GetDataQualityRuleRecommendationRun'
    )


class XAmzTarget84(Enum):
    AWSGlue_GetDataQualityRuleset = 'AWSGlue.GetDataQualityRuleset'


class XAmzTarget85(Enum):
    AWSGlue_GetDataQualityRulesetEvaluationRun = (
        'AWSGlue.GetDataQualityRulesetEvaluationRun'
    )


class XAmzTarget86(Enum):
    AWSGlue_GetDatabase = 'AWSGlue.GetDatabase'


class XAmzTarget87(Enum):
    AWSGlue_GetDatabases = 'AWSGlue.GetDatabases'


class XAmzTarget88(Enum):
    AWSGlue_GetDataflowGraph = 'AWSGlue.GetDataflowGraph'


class XAmzTarget89(Enum):
    AWSGlue_GetDevEndpoint = 'AWSGlue.GetDevEndpoint'


class XAmzTarget90(Enum):
    AWSGlue_GetDevEndpoints = 'AWSGlue.GetDevEndpoints'


class XAmzTarget91(Enum):
    AWSGlue_GetJob = 'AWSGlue.GetJob'


class XAmzTarget92(Enum):
    AWSGlue_GetJobBookmark = 'AWSGlue.GetJobBookmark'


class XAmzTarget93(Enum):
    AWSGlue_GetJobRun = 'AWSGlue.GetJobRun'


class XAmzTarget94(Enum):
    AWSGlue_GetJobRuns = 'AWSGlue.GetJobRuns'


class XAmzTarget95(Enum):
    AWSGlue_GetJobs = 'AWSGlue.GetJobs'


class XAmzTarget96(Enum):
    AWSGlue_GetMLTaskRun = 'AWSGlue.GetMLTaskRun'


class XAmzTarget97(Enum):
    AWSGlue_GetMLTaskRuns = 'AWSGlue.GetMLTaskRuns'


class XAmzTarget98(Enum):
    AWSGlue_GetMLTransform = 'AWSGlue.GetMLTransform'


class XAmzTarget99(Enum):
    AWSGlue_GetMLTransforms = 'AWSGlue.GetMLTransforms'


class XAmzTarget100(Enum):
    AWSGlue_GetMapping = 'AWSGlue.GetMapping'


class XAmzTarget101(Enum):
    AWSGlue_GetPartition = 'AWSGlue.GetPartition'


class XAmzTarget102(Enum):
    AWSGlue_GetPartitionIndexes = 'AWSGlue.GetPartitionIndexes'


class XAmzTarget103(Enum):
    AWSGlue_GetPartitions = 'AWSGlue.GetPartitions'


class XAmzTarget104(Enum):
    AWSGlue_GetPlan = 'AWSGlue.GetPlan'


class XAmzTarget105(Enum):
    AWSGlue_GetRegistry = 'AWSGlue.GetRegistry'


class XAmzTarget106(Enum):
    AWSGlue_GetResourcePolicies = 'AWSGlue.GetResourcePolicies'


class XAmzTarget107(Enum):
    AWSGlue_GetResourcePolicy = 'AWSGlue.GetResourcePolicy'


class XAmzTarget108(Enum):
    AWSGlue_GetSchema = 'AWSGlue.GetSchema'


class XAmzTarget109(Enum):
    AWSGlue_GetSchemaByDefinition = 'AWSGlue.GetSchemaByDefinition'


class XAmzTarget110(Enum):
    AWSGlue_GetSchemaVersion = 'AWSGlue.GetSchemaVersion'


class XAmzTarget111(Enum):
    AWSGlue_GetSchemaVersionsDiff = 'AWSGlue.GetSchemaVersionsDiff'


class XAmzTarget112(Enum):
    AWSGlue_GetSecurityConfiguration = 'AWSGlue.GetSecurityConfiguration'


class XAmzTarget113(Enum):
    AWSGlue_GetSecurityConfigurations = 'AWSGlue.GetSecurityConfigurations'


class XAmzTarget114(Enum):
    AWSGlue_GetSession = 'AWSGlue.GetSession'


class XAmzTarget115(Enum):
    AWSGlue_GetStatement = 'AWSGlue.GetStatement'


class XAmzTarget116(Enum):
    AWSGlue_GetTable = 'AWSGlue.GetTable'


class XAmzTarget117(Enum):
    AWSGlue_GetTableVersion = 'AWSGlue.GetTableVersion'


class XAmzTarget118(Enum):
    AWSGlue_GetTableVersions = 'AWSGlue.GetTableVersions'


class XAmzTarget119(Enum):
    AWSGlue_GetTables = 'AWSGlue.GetTables'


class XAmzTarget120(Enum):
    AWSGlue_GetTags = 'AWSGlue.GetTags'


class XAmzTarget121(Enum):
    AWSGlue_GetTrigger = 'AWSGlue.GetTrigger'


class XAmzTarget122(Enum):
    AWSGlue_GetTriggers = 'AWSGlue.GetTriggers'


class XAmzTarget123(Enum):
    AWSGlue_GetUnfilteredPartitionMetadata = 'AWSGlue.GetUnfilteredPartitionMetadata'


class XAmzTarget124(Enum):
    AWSGlue_GetUnfilteredPartitionsMetadata = 'AWSGlue.GetUnfilteredPartitionsMetadata'


class XAmzTarget125(Enum):
    AWSGlue_GetUnfilteredTableMetadata = 'AWSGlue.GetUnfilteredTableMetadata'


class XAmzTarget126(Enum):
    AWSGlue_GetUserDefinedFunction = 'AWSGlue.GetUserDefinedFunction'


class XAmzTarget127(Enum):
    AWSGlue_GetUserDefinedFunctions = 'AWSGlue.GetUserDefinedFunctions'


class XAmzTarget128(Enum):
    AWSGlue_GetWorkflow = 'AWSGlue.GetWorkflow'


class XAmzTarget129(Enum):
    AWSGlue_GetWorkflowRun = 'AWSGlue.GetWorkflowRun'


class XAmzTarget130(Enum):
    AWSGlue_GetWorkflowRunProperties = 'AWSGlue.GetWorkflowRunProperties'


class XAmzTarget131(Enum):
    AWSGlue_GetWorkflowRuns = 'AWSGlue.GetWorkflowRuns'


class XAmzTarget132(Enum):
    AWSGlue_ImportCatalogToGlue = 'AWSGlue.ImportCatalogToGlue'


class XAmzTarget133(Enum):
    AWSGlue_ListBlueprints = 'AWSGlue.ListBlueprints'


class XAmzTarget134(Enum):
    AWSGlue_ListCrawlers = 'AWSGlue.ListCrawlers'


class XAmzTarget135(Enum):
    AWSGlue_ListCrawls = 'AWSGlue.ListCrawls'


class XAmzTarget136(Enum):
    AWSGlue_ListCustomEntityTypes = 'AWSGlue.ListCustomEntityTypes'


class XAmzTarget137(Enum):
    AWSGlue_ListDataQualityResults = 'AWSGlue.ListDataQualityResults'


class XAmzTarget138(Enum):
    AWSGlue_ListDataQualityRuleRecommendationRuns = (
        'AWSGlue.ListDataQualityRuleRecommendationRuns'
    )


class XAmzTarget139(Enum):
    AWSGlue_ListDataQualityRulesetEvaluationRuns = (
        'AWSGlue.ListDataQualityRulesetEvaluationRuns'
    )


class XAmzTarget140(Enum):
    AWSGlue_ListDataQualityRulesets = 'AWSGlue.ListDataQualityRulesets'


class XAmzTarget141(Enum):
    AWSGlue_ListDevEndpoints = 'AWSGlue.ListDevEndpoints'


class XAmzTarget142(Enum):
    AWSGlue_ListJobs = 'AWSGlue.ListJobs'


class XAmzTarget143(Enum):
    AWSGlue_ListMLTransforms = 'AWSGlue.ListMLTransforms'


class XAmzTarget144(Enum):
    AWSGlue_ListRegistries = 'AWSGlue.ListRegistries'


class XAmzTarget145(Enum):
    AWSGlue_ListSchemaVersions = 'AWSGlue.ListSchemaVersions'


class XAmzTarget146(Enum):
    AWSGlue_ListSchemas = 'AWSGlue.ListSchemas'


class XAmzTarget147(Enum):
    AWSGlue_ListSessions = 'AWSGlue.ListSessions'


class XAmzTarget148(Enum):
    AWSGlue_ListStatements = 'AWSGlue.ListStatements'


class XAmzTarget149(Enum):
    AWSGlue_ListTriggers = 'AWSGlue.ListTriggers'


class XAmzTarget150(Enum):
    AWSGlue_ListWorkflows = 'AWSGlue.ListWorkflows'


class XAmzTarget151(Enum):
    AWSGlue_PutDataCatalogEncryptionSettings = (
        'AWSGlue.PutDataCatalogEncryptionSettings'
    )


class XAmzTarget152(Enum):
    AWSGlue_PutResourcePolicy = 'AWSGlue.PutResourcePolicy'


class XAmzTarget153(Enum):
    AWSGlue_PutSchemaVersionMetadata = 'AWSGlue.PutSchemaVersionMetadata'


class XAmzTarget154(Enum):
    AWSGlue_PutWorkflowRunProperties = 'AWSGlue.PutWorkflowRunProperties'


class XAmzTarget155(Enum):
    AWSGlue_QuerySchemaVersionMetadata = 'AWSGlue.QuerySchemaVersionMetadata'


class XAmzTarget156(Enum):
    AWSGlue_RegisterSchemaVersion = 'AWSGlue.RegisterSchemaVersion'


class XAmzTarget157(Enum):
    AWSGlue_RemoveSchemaVersionMetadata = 'AWSGlue.RemoveSchemaVersionMetadata'


class XAmzTarget158(Enum):
    AWSGlue_ResetJobBookmark = 'AWSGlue.ResetJobBookmark'


class XAmzTarget159(Enum):
    AWSGlue_ResumeWorkflowRun = 'AWSGlue.ResumeWorkflowRun'


class XAmzTarget160(Enum):
    AWSGlue_RunStatement = 'AWSGlue.RunStatement'


class XAmzTarget161(Enum):
    AWSGlue_SearchTables = 'AWSGlue.SearchTables'


class XAmzTarget162(Enum):
    AWSGlue_StartBlueprintRun = 'AWSGlue.StartBlueprintRun'


class XAmzTarget163(Enum):
    AWSGlue_StartCrawler = 'AWSGlue.StartCrawler'


class XAmzTarget164(Enum):
    AWSGlue_StartCrawlerSchedule = 'AWSGlue.StartCrawlerSchedule'


class XAmzTarget165(Enum):
    AWSGlue_StartDataQualityRuleRecommendationRun = (
        'AWSGlue.StartDataQualityRuleRecommendationRun'
    )


class XAmzTarget166(Enum):
    AWSGlue_StartDataQualityRulesetEvaluationRun = (
        'AWSGlue.StartDataQualityRulesetEvaluationRun'
    )


class XAmzTarget167(Enum):
    AWSGlue_StartExportLabelsTaskRun = 'AWSGlue.StartExportLabelsTaskRun'


class XAmzTarget168(Enum):
    AWSGlue_StartImportLabelsTaskRun = 'AWSGlue.StartImportLabelsTaskRun'


class XAmzTarget169(Enum):
    AWSGlue_StartJobRun = 'AWSGlue.StartJobRun'


class XAmzTarget170(Enum):
    AWSGlue_StartMLEvaluationTaskRun = 'AWSGlue.StartMLEvaluationTaskRun'


class XAmzTarget171(Enum):
    AWSGlue_StartMLLabelingSetGenerationTaskRun = (
        'AWSGlue.StartMLLabelingSetGenerationTaskRun'
    )


class XAmzTarget172(Enum):
    AWSGlue_StartTrigger = 'AWSGlue.StartTrigger'


class XAmzTarget173(Enum):
    AWSGlue_StartWorkflowRun = 'AWSGlue.StartWorkflowRun'


class XAmzTarget174(Enum):
    AWSGlue_StopCrawler = 'AWSGlue.StopCrawler'


class XAmzTarget175(Enum):
    AWSGlue_StopCrawlerSchedule = 'AWSGlue.StopCrawlerSchedule'


class XAmzTarget176(Enum):
    AWSGlue_StopSession = 'AWSGlue.StopSession'


class XAmzTarget177(Enum):
    AWSGlue_StopTrigger = 'AWSGlue.StopTrigger'


class XAmzTarget178(Enum):
    AWSGlue_StopWorkflowRun = 'AWSGlue.StopWorkflowRun'


class XAmzTarget179(Enum):
    AWSGlue_TagResource = 'AWSGlue.TagResource'


class XAmzTarget180(Enum):
    AWSGlue_UntagResource = 'AWSGlue.UntagResource'


class XAmzTarget181(Enum):
    AWSGlue_UpdateBlueprint = 'AWSGlue.UpdateBlueprint'


class XAmzTarget182(Enum):
    AWSGlue_UpdateClassifier = 'AWSGlue.UpdateClassifier'


class XAmzTarget183(Enum):
    AWSGlue_UpdateColumnStatisticsForPartition = (
        'AWSGlue.UpdateColumnStatisticsForPartition'
    )


class XAmzTarget184(Enum):
    AWSGlue_UpdateColumnStatisticsForTable = 'AWSGlue.UpdateColumnStatisticsForTable'


class XAmzTarget185(Enum):
    AWSGlue_UpdateConnection = 'AWSGlue.UpdateConnection'


class XAmzTarget186(Enum):
    AWSGlue_UpdateCrawler = 'AWSGlue.UpdateCrawler'


class XAmzTarget187(Enum):
    AWSGlue_UpdateCrawlerSchedule = 'AWSGlue.UpdateCrawlerSchedule'


class XAmzTarget188(Enum):
    AWSGlue_UpdateDataQualityRuleset = 'AWSGlue.UpdateDataQualityRuleset'


class XAmzTarget189(Enum):
    AWSGlue_UpdateDatabase = 'AWSGlue.UpdateDatabase'


class XAmzTarget190(Enum):
    AWSGlue_UpdateDevEndpoint = 'AWSGlue.UpdateDevEndpoint'


class XAmzTarget191(Enum):
    AWSGlue_UpdateJob = 'AWSGlue.UpdateJob'


class XAmzTarget192(Enum):
    AWSGlue_UpdateJobFromSourceControl = 'AWSGlue.UpdateJobFromSourceControl'


class XAmzTarget193(Enum):
    AWSGlue_UpdateMLTransform = 'AWSGlue.UpdateMLTransform'


class XAmzTarget194(Enum):
    AWSGlue_UpdatePartition = 'AWSGlue.UpdatePartition'


class XAmzTarget195(Enum):
    AWSGlue_UpdateRegistry = 'AWSGlue.UpdateRegistry'


class XAmzTarget196(Enum):
    AWSGlue_UpdateSchema = 'AWSGlue.UpdateSchema'


class XAmzTarget197(Enum):
    AWSGlue_UpdateSourceControlFromJob = 'AWSGlue.UpdateSourceControlFromJob'


class XAmzTarget198(Enum):
    AWSGlue_UpdateTable = 'AWSGlue.UpdateTable'


class XAmzTarget199(Enum):
    AWSGlue_UpdateTrigger = 'AWSGlue.UpdateTrigger'


class XAmzTarget200(Enum):
    AWSGlue_UpdateUserDefinedFunction = 'AWSGlue.UpdateUserDefinedFunction'


class XAmzTarget201(Enum):
    AWSGlue_UpdateWorkflow = 'AWSGlue.UpdateWorkflow'


class AdditionalOptions(RootModel[Optional[Dict[str, EnclosedInStringProperty]]]):
    root: Optional[Dict[str, EnclosedInStringProperty]] = None


class AdditionalPlanOptionsMap(RootModel[Optional[Dict[str, GenericString]]]):
    root: Optional[Dict[str, GenericString]] = None


class AuditColumnNamesList(RootModel[List[ColumnNameString]]):
    root: List[ColumnNameString]


class AuditContext(BaseModel):
    AdditionalAuditContext: Optional[AuditContextString] = None
    AllColumnsRequested: Optional[NullableBoolean] = None
    RequestedColumns: Optional[AuditColumnNamesList] = None


class BasicCatalogTarget(BaseModel):
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    Table: EnclosedInStringProperty


class BatchDeleteTableNameList(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=100, min_length=0)


class BatchDeleteTableRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    TablesToDelete: BatchDeleteTableNameList
    TransactionId: Optional[TransactionIdString] = None


class BatchDeleteTableVersionList(RootModel[List[VersionString]]):
    root: List[VersionString] = Field(..., max_length=100, min_length=0)


class BatchDeleteTableVersionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    TableName: NameString
    VersionIds: BatchDeleteTableVersionList


class BatchGetBlueprintNames(RootModel[List[OrchestrationNameString]]):
    root: List[OrchestrationNameString] = Field(..., max_length=25, min_length=1)


class BatchGetBlueprintsRequest(BaseModel):
    IncludeBlueprint: Optional[NullableBoolean] = None
    IncludeParameterSpec: Optional[NullableBoolean] = None
    Names: BatchGetBlueprintNames


class BatchGetTriggersRequest(BaseModel):
    TriggerNames: TriggerNameList


class BatchGetWorkflowsRequest(BaseModel):
    IncludeGraph: Optional[NullableBoolean] = None
    Names: WorkflowNames


class BatchStopJobRunJobRunIdList(RootModel[List[IdString]]):
    root: List[IdString] = Field(..., max_length=25, min_length=1)


class BatchStopJobRunRequest(BaseModel):
    JobName: NameString
    JobRunIds: BatchStopJobRunJobRunIdList


class BatchStopJobRunSuccessfulSubmission(BaseModel):
    JobName: Optional[NameString] = None
    JobRunId: Optional[IdString] = None


class BatchStopJobRunSuccessfulSubmissionList(
    RootModel[List[BatchStopJobRunSuccessfulSubmission]]
):
    root: List[BatchStopJobRunSuccessfulSubmission]


class BinaryColumnStatisticsData(BaseModel):
    AverageLength: NonNegativeDouble
    MaximumLength: NonNegativeLong
    NumberOfNulls: NonNegativeLong


class BlueprintDetails(BaseModel):
    BlueprintName: Optional[OrchestrationNameString] = None
    RunId: Optional[IdString] = None


class BlueprintNames(RootModel[List[OrchestrationNameString]]):
    root: List[OrchestrationNameString]


class BlueprintRun(BaseModel):
    BlueprintName: Optional[OrchestrationNameString] = None
    CompletedOn: Optional[TimestampValue] = None
    ErrorMessage: Optional[MessageString] = None
    Parameters: Optional[BlueprintParameters] = None
    RoleArn: Optional[OrchestrationIAMRoleArn] = None
    RollbackErrorMessage: Optional[MessageString] = None
    RunId: Optional[IdString] = None
    StartedOn: Optional[TimestampValue] = None
    State: Optional[BlueprintRunState] = None
    WorkflowName: Optional[NameString] = None


class BlueprintRuns(RootModel[List[BlueprintRun]]):
    root: List[BlueprintRun]


class BooleanColumnStatisticsData(BaseModel):
    NumberOfFalses: NonNegativeLong
    NumberOfNulls: NonNegativeLong
    NumberOfTrues: NonNegativeLong


class BoundedPartitionValueList(RootModel[List[ValueString]]):
    root: List[ValueString] = Field(..., max_length=100, min_length=0)


class CancelDataQualityRuleRecommendationRunRequest(BaseModel):
    RunId: HashString


class CancelDataQualityRulesetEvaluationRunRequest(BaseModel):
    RunId: HashString


class CancelMLTaskRunRequest(BaseModel):
    TaskRunId: HashString
    TransformId: HashString


class CancelMLTaskRunResponse(BaseModel):
    Status: Optional[TaskStatusType] = None
    TaskRunId: Optional[HashString] = None
    TransformId: Optional[HashString] = None


class CancelStatementRequest(BaseModel):
    Id: IntegerValue
    RequestOrigin: Optional[OrchestrationNameString] = None
    SessionId: NameString


class CatalogEntry(BaseModel):
    DatabaseName: NameString
    TableName: NameString


class CatalogImportStatus(BaseModel):
    ImportCompleted: Optional[Boolean] = None
    ImportTime: Optional[Timestamp] = None
    ImportedBy: Optional[NameString] = None


class CatalogKafkaSource(BaseModel):
    DataPreviewOptions: Optional[StreamingDataPreviewOptions] = None
    Database: EnclosedInStringProperty
    DetectSchema: Optional[BoxedBoolean] = None
    Name: NodeName
    StreamingOptions: Optional[KafkaStreamingSourceOptions] = None
    Table: EnclosedInStringProperty
    WindowSize: Optional[BoxedPositiveInt] = None


class CatalogSchemaChangePolicy(BaseModel):
    EnableUpdateCatalog: Optional[BoxedBoolean] = None
    UpdateBehavior: Optional[UpdateCatalogBehavior] = None


class CatalogSource(BaseModel):
    Database: EnclosedInStringProperty
    Name: NodeName
    Table: EnclosedInStringProperty


class CatalogTablesList(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., min_length=1)


class CatalogTarget(BaseModel):
    ConnectionName_1: Optional[ConnectionName] = Field(None, alias='ConnectionName')
    DatabaseName: NameString
    DlqEventQueueArn: Optional[EventQueueArn] = None
    EventQueueArn_1: Optional[EventQueueArn] = Field(None, alias='EventQueueArn')
    Tables: CatalogTablesList


class CatalogTargetList(RootModel[List[CatalogTarget]]):
    root: List[CatalogTarget]


class CheckSchemaVersionValidityInput(BaseModel):
    DataFormat_1: DataFormat = Field(..., alias='DataFormat')
    SchemaDefinition: SchemaDefinitionString


class CheckSchemaVersionValidityResponse(BaseModel):
    Error: Optional[SchemaValidationError] = None
    Valid: Optional[IsVersionValid] = None


class ClassifierNameList(RootModel[List[NameString]]):
    root: List[NameString]


class CloudWatchEncryption(BaseModel):
    CloudWatchEncryptionMode_1: Optional[CloudWatchEncryptionMode] = Field(
        None, alias='CloudWatchEncryptionMode'
    )
    KmsKeyArn_1: Optional[KmsKeyArn] = Field(None, alias='KmsKeyArn')


class CodeGenEdge(BaseModel):
    Source: CodeGenIdentifier
    Target: CodeGenIdentifier
    TargetParameter: Optional[CodeGenArgName] = None


class CodeGenNode(BaseModel):
    Args: CodeGenNodeArgs
    Id: CodeGenIdentifier
    LineNumber: Optional[Integer] = None
    NodeType: CodeGenNodeType


class ColumnImportance(BaseModel):
    ColumnName: Optional[NameString] = None
    Importance: Optional[GenericBoundedDouble] = None


class ColumnImportanceList(RootModel[List[ColumnImportance]]):
    root: List[ColumnImportance] = Field(..., max_length=100, min_length=0)


class ColumnRowFilter(BaseModel):
    ColumnName: Optional[NameString] = None
    RowFilterExpression: Optional[PredicateString] = None


class ColumnRowFilterList(RootModel[List[ColumnRowFilter]]):
    root: List[ColumnRowFilter]


class ColumnValueStringList(RootModel[List[ColumnValuesString]]):
    root: List[ColumnValuesString]


class Condition(BaseModel):
    CrawlState_1: Optional[CrawlState] = Field(None, alias='CrawlState')
    CrawlerName: Optional[NameString] = None
    JobName: Optional[NameString] = None
    LogicalOperator_1: Optional[LogicalOperator] = Field(None, alias='LogicalOperator')
    State: Optional[JobRunState] = None


class ConditionList(RootModel[List[Condition]]):
    root: List[Condition]


class ConfusionMatrix(BaseModel):
    NumFalseNegatives: Optional[RecordsCount] = None
    NumFalsePositives: Optional[RecordsCount] = None
    NumTrueNegatives: Optional[RecordsCount] = None
    NumTruePositives: Optional[RecordsCount] = None


class ConnectionPasswordEncryption(BaseModel):
    AwsKmsKeyId: Optional[NameString] = None
    ReturnConnectionPasswordEncrypted: Boolean


class ConnectionProperties(RootModel[Optional[Dict[str, ValueString]]]):
    root: Optional[Dict[str, ValueString]] = None


class ConnectionsList(BaseModel):
    Connections: Optional[OrchestrationStringList] = None


class ContextWords(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=20, min_length=1)


class Crawl(BaseModel):
    CompletedOn: Optional[TimestampValue] = None
    ErrorMessage: Optional[DescriptionString] = None
    LogGroup_1: Optional[LogGroup] = Field(None, alias='LogGroup')
    LogStream_1: Optional[LogStream] = Field(None, alias='LogStream')
    StartedOn: Optional[TimestampValue] = None
    State: Optional[CrawlState] = None


class CrawlList(RootModel[List[Crawl]]):
    root: List[Crawl]


class CrawlerHistory(BaseModel):
    CrawlId_1: Optional[CrawlId] = Field(None, alias='CrawlId')
    DPUHour: Optional[NonNegativeDouble] = None
    EndTime: Optional[Timestamp] = None
    ErrorMessage: Optional[DescriptionString] = None
    LogGroup_1: Optional[LogGroup] = Field(None, alias='LogGroup')
    LogStream_1: Optional[LogStream] = Field(None, alias='LogStream')
    MessagePrefix_1: Optional[MessagePrefix] = Field(None, alias='MessagePrefix')
    StartTime: Optional[Timestamp] = None
    State: Optional[CrawlerHistoryState] = None
    Summary: Optional[NameString] = None


class CrawlerHistoryList(RootModel[List[CrawlerHistory]]):
    root: List[CrawlerHistory]


class CrawlerMetrics(BaseModel):
    CrawlerName: Optional[NameString] = None
    LastRuntimeSeconds: Optional[NonNegativeDouble] = None
    MedianRuntimeSeconds: Optional[NonNegativeDouble] = None
    StillEstimating: Optional[Boolean] = None
    TablesCreated: Optional[NonNegativeInteger] = None
    TablesDeleted: Optional[NonNegativeInteger] = None
    TablesUpdated: Optional[NonNegativeInteger] = None
    TimeLeftSeconds: Optional[NonNegativeDouble] = None


class CrawlerMetricsList(RootModel[List[CrawlerMetrics]]):
    root: List[CrawlerMetrics]


class CrawlerNameList(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=100, min_length=0)


class CrawlerNodeDetails(BaseModel):
    Crawls: Optional[CrawlList] = None


class CrawlsFilter(BaseModel):
    FieldName_1: Optional[FieldName] = Field(None, alias='FieldName')
    FieldValue: Optional[GenericString] = None
    FilterOperator_1: Optional[FilterOperator] = Field(None, alias='FilterOperator')


class CrawlsFilterList(RootModel[List[CrawlsFilter]]):
    root: List[CrawlsFilter]


class CreateBlueprintRequest(BaseModel):
    BlueprintLocation: OrchestrationS3Location
    Description: Optional[Generic512CharString] = None
    Name: OrchestrationNameString
    Tags: Optional[TagsMap] = None


class CreateBlueprintResponse(BaseModel):
    Name: Optional[NameString] = None


class CreateCustomEntityTypeRequest(BaseModel):
    ContextWords_1: Optional[ContextWords] = Field(None, alias='ContextWords')
    Name: NameString
    RegexString: NameString


class CreateCustomEntityTypeResponse(BaseModel):
    Name: Optional[NameString] = None


class CreateDataQualityRulesetResponse(BaseModel):
    Name: Optional[NameString] = None


class CreateDevEndpointRequest(BaseModel):
    Arguments: Optional[MapValue] = None
    EndpointName: GenericString
    ExtraJarsS3Path: Optional[GenericString] = None
    ExtraPythonLibsS3Path: Optional[GenericString] = None
    GlueVersion: Optional[GlueVersionString] = None
    NumberOfNodes: Optional[IntegerValue] = None
    NumberOfWorkers: Optional[NullableInteger] = None
    PublicKey: Optional[GenericString] = None
    PublicKeys: Optional[PublicKeysList] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    SecurityConfiguration: Optional[NameString] = None
    SecurityGroupIds: Optional[StringList] = None
    SubnetId: Optional[GenericString] = None
    Tags: Optional[TagsMap] = None
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class CreateDevEndpointResponse(BaseModel):
    Arguments: Optional[MapValue] = None
    AvailabilityZone: Optional[GenericString] = None
    CreatedTimestamp: Optional[TimestampValue] = None
    EndpointName: Optional[GenericString] = None
    ExtraJarsS3Path: Optional[GenericString] = None
    ExtraPythonLibsS3Path: Optional[GenericString] = None
    FailureReason: Optional[GenericString] = None
    GlueVersion: Optional[GlueVersionString] = None
    NumberOfNodes: Optional[IntegerValue] = None
    NumberOfWorkers: Optional[NullableInteger] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    SecurityConfiguration: Optional[NameString] = None
    SecurityGroupIds: Optional[StringList] = None
    Status: Optional[GenericString] = None
    SubnetId: Optional[GenericString] = None
    VpcId: Optional[GenericString] = None
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')
    YarnEndpointAddress: Optional[GenericString] = None
    ZeppelinRemoteSparkInterpreterPort: Optional[IntegerValue] = None


class CreateGrokClassifierRequest(BaseModel):
    Classification_1: Classification = Field(..., alias='Classification')
    CustomPatterns_1: Optional[CustomPatterns] = Field(None, alias='CustomPatterns')
    GrokPattern_1: GrokPattern = Field(..., alias='GrokPattern')
    Name: NameString


class CreateJobResponse(BaseModel):
    Name: Optional[NameString] = None


class CreateJsonClassifierRequest(BaseModel):
    JsonPath_1: JsonPath = Field(..., alias='JsonPath')
    Name: NameString


class CreateMLTransformResponse(BaseModel):
    TransformId: Optional[HashString] = None


class CreateRegistryInput(BaseModel):
    Description: Optional[DescriptionString] = None
    RegistryName: SchemaRegistryNameString
    Tags: Optional[TagsMap] = None


class CreateRegistryResponse(BaseModel):
    Description: Optional[DescriptionString] = None
    RegistryArn: Optional[GlueResourceArn] = None
    RegistryName: Optional[SchemaRegistryNameString] = None
    Tags: Optional[TagsMap] = None


class CreateSchemaResponse(BaseModel):
    Compatibility_1: Optional[Compatibility] = Field(None, alias='Compatibility')
    DataFormat_1: Optional[DataFormat] = Field(None, alias='DataFormat')
    Description: Optional[DescriptionString] = None
    LatestSchemaVersion: Optional[VersionLongNumber] = None
    NextSchemaVersion: Optional[VersionLongNumber] = None
    RegistryArn: Optional[GlueResourceArn] = None
    RegistryName: Optional[SchemaRegistryNameString] = None
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaCheckpoint: Optional[SchemaCheckpointNumber] = None
    SchemaName: Optional[SchemaRegistryNameString] = None
    SchemaStatus_1: Optional[SchemaStatus] = Field(None, alias='SchemaStatus')
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    SchemaVersionStatus_1: Optional[SchemaVersionStatus] = Field(
        None, alias='SchemaVersionStatus'
    )
    Tags: Optional[TagsMap] = None


class CreateScriptResponse(BaseModel):
    PythonScript_1: Optional[PythonScript] = Field(None, alias='PythonScript')
    ScalaCode_1: Optional[ScalaCode] = Field(None, alias='ScalaCode')


class CreateSecurityConfigurationResponse(BaseModel):
    CreatedTimestamp: Optional[TimestampValue] = None
    Name: Optional[NameString] = None


class CreateTriggerResponse(BaseModel):
    Name: Optional[NameString] = None


class CreateWorkflowRequest(BaseModel):
    DefaultRunProperties: Optional[WorkflowRunProperties] = None
    Description: Optional[GenericString] = None
    MaxConcurrentRuns: Optional[NullableInteger] = None
    Name: NameString
    Tags: Optional[TagsMap] = None


class CreateWorkflowResponse(BaseModel):
    Name: Optional[NameString] = None


class CreateXMLClassifierRequest(BaseModel):
    Classification_1: Classification = Field(..., alias='Classification')
    Name: NameString
    RowTag_1: Optional[RowTag] = Field(None, alias='RowTag')


class CsvHeader(RootModel[List[NameString]]):
    root: List[NameString]


class CustomDatatypes(RootModel[List[NameString]]):
    root: List[NameString]


class CustomEntityType(BaseModel):
    ContextWords_1: Optional[ContextWords] = Field(None, alias='ContextWords')
    Name: NameString
    RegexString: NameString


class CustomEntityTypeNames(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=50, min_length=1)


class CustomEntityTypes(RootModel[List[CustomEntityType]]):
    root: List[CustomEntityType]


class DQResultsPublishingOptions(BaseModel):
    CloudWatchMetricsEnabled: Optional[BoxedBoolean] = None
    EvaluationContext: Optional[GenericLimitedString] = None
    ResultsPublishingEnabled: Optional[BoxedBoolean] = None
    ResultsS3Prefix: Optional[EnclosedInStringProperty] = None


class DQStopJobOnFailureOptions(BaseModel):
    StopJobOnFailureTiming: Optional[DQStopJobOnFailureTiming] = None


class DagEdges(RootModel[List[CodeGenEdge]]):
    root: List[CodeGenEdge]


class DagNodes(RootModel[List[CodeGenNode]]):
    root: List[CodeGenNode]


class DataLakePrincipal(BaseModel):
    DataLakePrincipalIdentifier: Optional[DataLakePrincipalString] = None


class DataQualityEvaluationRunAdditionalRunOptions(BaseModel):
    CloudWatchMetricsEnabled: Optional[NullableBoolean] = None
    ResultsS3Prefix: Optional[UriString] = None


class DataQualityResultIdList(RootModel[List[HashString]]):
    root: List[HashString] = Field(..., max_length=10, min_length=1)


class DataQualityResultIds(RootModel[List[HashString]]):
    root: List[HashString] = Field(..., max_length=100, min_length=1)


class DataQualityRuleResult(BaseModel):
    Description: Optional[DescriptionString] = None
    EvaluationMessage: Optional[DescriptionString] = None
    Name: Optional[NameString] = None
    Result: Optional[DataQualityRuleResultStatus] = None


class DataQualityRuleResults(RootModel[List[DataQualityRuleResult]]):
    root: List[DataQualityRuleResult] = Field(..., max_length=2000, min_length=1)


class DataQualityTargetTable(BaseModel):
    DatabaseName: NameString
    TableName: NameString


class DatabaseIdentifier(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: Optional[NameString] = None


class Datatype(BaseModel):
    Id: GenericLimitedString
    Label: GenericLimitedString


class DateColumnStatisticsData(BaseModel):
    MaximumValue: Optional[Timestamp] = None
    MinimumValue: Optional[Timestamp] = None
    NumberOfDistinctValues: NonNegativeLong
    NumberOfNulls: NonNegativeLong


class DecimalNumber(BaseModel):
    Scale: Integer
    UnscaledValue: Blob


class DeleteBlueprintRequest(BaseModel):
    Name: NameString


class DeleteBlueprintResponse(BaseModel):
    Name: Optional[NameString] = None


class DeleteClassifierRequest(BaseModel):
    Name: NameString


class DeleteColumnStatisticsForPartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ColumnName: NameString
    DatabaseName: NameString
    PartitionValues: ValueStringList
    TableName: NameString


class DeleteColumnStatisticsForTableRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ColumnName: NameString
    DatabaseName: NameString
    TableName: NameString


class DeleteConnectionNameList(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=25, min_length=0)


class DeleteConnectionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ConnectionName: NameString


class DeleteCrawlerRequest(BaseModel):
    Name: NameString


class DeleteCustomEntityTypeRequest(BaseModel):
    Name: NameString


class DeleteCustomEntityTypeResponse(BaseModel):
    Name: Optional[NameString] = None


class DeleteDataQualityRulesetRequest(BaseModel):
    Name: NameString


class DeleteDatabaseRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Name: NameString


class DeleteDevEndpointRequest(BaseModel):
    EndpointName: GenericString


class DeleteJobRequest(BaseModel):
    JobName: NameString


class DeleteJobResponse(BaseModel):
    JobName: Optional[NameString] = None


class DeleteMLTransformRequest(BaseModel):
    TransformId: HashString


class DeleteMLTransformResponse(BaseModel):
    TransformId: Optional[HashString] = None


class DeletePartitionIndexRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    IndexName: NameString
    TableName: NameString


class DeletePartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    PartitionValues: ValueStringList
    TableName: NameString


class DeleteRegistryResponse(BaseModel):
    RegistryArn: Optional[GlueResourceArn] = None
    RegistryName: Optional[SchemaRegistryNameString] = None
    Status: Optional[RegistryStatus] = None


class DeleteResourcePolicyRequest(BaseModel):
    PolicyHashCondition: Optional[HashString] = None
    ResourceArn: Optional[GlueResourceArn] = None


class DeleteSchemaResponse(BaseModel):
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaName: Optional[SchemaRegistryNameString] = None
    Status: Optional[SchemaStatus] = None


class DeleteSecurityConfigurationRequest(BaseModel):
    Name: NameString


class DeleteSessionRequest(BaseModel):
    Id: NameString
    RequestOrigin: Optional[OrchestrationNameString] = None


class DeleteSessionResponse(BaseModel):
    Id: Optional[NameString] = None


class DeleteTableRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    Name: NameString
    TransactionId: Optional[TransactionIdString] = None


class DeleteTableVersionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    TableName: NameString
    VersionId: VersionString


class DeleteTriggerRequest(BaseModel):
    Name: NameString


class DeleteTriggerResponse(BaseModel):
    Name: Optional[NameString] = None


class DeleteUserDefinedFunctionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    FunctionName: NameString


class DeleteWorkflowRequest(BaseModel):
    Name: NameString


class DeleteWorkflowResponse(BaseModel):
    Name: Optional[NameString] = None


class DeltaTarget(BaseModel):
    ConnectionName_1: Optional[ConnectionName] = Field(None, alias='ConnectionName')
    CreateNativeDeltaTable: Optional[NullableBoolean] = None
    DeltaTables: Optional[PathList] = None
    WriteManifest: Optional[NullableBoolean] = None


class DeltaTargetList(RootModel[List[DeltaTarget]]):
    root: List[DeltaTarget]


class DevEndpoint(BaseModel):
    Arguments: Optional[MapValue] = None
    AvailabilityZone: Optional[GenericString] = None
    CreatedTimestamp: Optional[TimestampValue] = None
    EndpointName: Optional[GenericString] = None
    ExtraJarsS3Path: Optional[GenericString] = None
    ExtraPythonLibsS3Path: Optional[GenericString] = None
    FailureReason: Optional[GenericString] = None
    GlueVersion: Optional[GlueVersionString] = None
    LastModifiedTimestamp: Optional[TimestampValue] = None
    LastUpdateStatus: Optional[GenericString] = None
    NumberOfNodes: Optional[IntegerValue] = None
    NumberOfWorkers: Optional[NullableInteger] = None
    PrivateAddress: Optional[GenericString] = None
    PublicAddress: Optional[GenericString] = None
    PublicKey: Optional[GenericString] = None
    PublicKeys: Optional[PublicKeysList] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    SecurityConfiguration: Optional[NameString] = None
    SecurityGroupIds: Optional[StringList] = None
    Status: Optional[GenericString] = None
    SubnetId: Optional[GenericString] = None
    VpcId: Optional[GenericString] = None
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')
    YarnEndpointAddress: Optional[GenericString] = None
    ZeppelinRemoteSparkInterpreterPort: Optional[IntegerValue] = None


class DevEndpointCustomLibraries(BaseModel):
    ExtraJarsS3Path: Optional[GenericString] = None
    ExtraPythonLibsS3Path: Optional[GenericString] = None


class DevEndpointList(RootModel[List[DevEndpoint]]):
    root: List[DevEndpoint]


class DevEndpointNameList(RootModel[List[NameString]]):
    root: List[NameString]


class DevEndpointNames(RootModel[List[GenericString]]):
    root: List[GenericString] = Field(..., max_length=25, min_length=1)


class DirectJDBCSource(BaseModel):
    ConnectionName: EnclosedInStringProperty
    ConnectionType: JDBCConnectionType
    Database: EnclosedInStringProperty
    Name: NodeName
    RedshiftTmpDir: Optional[EnclosedInStringProperty] = None
    Table: EnclosedInStringProperty


class DirectKafkaSource(BaseModel):
    DataPreviewOptions: Optional[StreamingDataPreviewOptions] = None
    DetectSchema: Optional[BoxedBoolean] = None
    Name: NodeName
    StreamingOptions: Optional[KafkaStreamingSourceOptions] = None
    WindowSize: Optional[BoxedPositiveInt] = None


class DirectSchemaChangePolicy(BaseModel):
    Database: Optional[EnclosedInStringProperty] = None
    EnableUpdateCatalog: Optional[BoxedBoolean] = None
    Table: Optional[EnclosedInStringProperty] = None
    UpdateBehavior: Optional[UpdateCatalogBehavior] = None


class DoubleColumnStatisticsData(BaseModel):
    MaximumValue: Optional[Double] = None
    MinimumValue: Optional[Double] = None
    NumberOfDistinctValues: NonNegativeLong
    NumberOfNulls: NonNegativeLong


class DynamoDBCatalogSource(BaseModel):
    Database: EnclosedInStringProperty
    Name: NodeName
    Table: EnclosedInStringProperty


class DynamoDBTarget(BaseModel):
    Path_1: Optional[Path] = Field(None, alias='Path')
    scanAll: Optional[NullableBoolean] = None
    scanRate: Optional[NullableDouble] = None


class DynamoDBTargetList(RootModel[List[DynamoDBTarget]]):
    root: List[DynamoDBTarget]


class Edge(BaseModel):
    DestinationId: Optional[NameString] = None
    SourceId: Optional[NameString] = None


class EdgeList(RootModel[List[Edge]]):
    root: List[Edge]


class EnableAdditionalMetadata(RootModel[List[JdbcMetadataEntry]]):
    root: List[JdbcMetadataEntry]


class EnclosedInStringProperties(RootModel[List[EnclosedInStringProperty]]):
    root: List[EnclosedInStringProperty]


class EnclosedInStringPropertiesMinOne(RootModel[List[EnclosedInStringProperty]]):
    root: List[EnclosedInStringProperty]


class EncryptionAtRest(BaseModel):
    CatalogEncryptionMode_1: CatalogEncryptionMode = Field(
        ..., alias='CatalogEncryptionMode'
    )
    SseAwsKmsKeyId: Optional[NameString] = None


class ErrorDetail(BaseModel):
    ErrorCode: Optional[NameString] = None
    ErrorMessage: Optional[DescriptionString] = None


class ErrorDetails(BaseModel):
    ErrorCode: Optional[ErrorCodeString] = None
    ErrorMessage: Optional[ErrorMessageString] = None


class EvaluateDataQuality(BaseModel):
    Inputs: OneInput
    Name: NodeName
    Output: Optional[DQTransformOutput] = None
    PublishingOptions: Optional[DQResultsPublishingOptions] = None
    Ruleset: DQDLString
    StopJobOnFailureOptions: Optional[DQStopJobOnFailureOptions] = None


class ExecutionProperty(BaseModel):
    MaxConcurrentRuns_1: Optional[MaxConcurrentRuns] = Field(
        None, alias='MaxConcurrentRuns'
    )


class ExportLabelsTaskRunProperties(BaseModel):
    OutputS3Path: Optional[UriString] = None


class FederatedDatabase(BaseModel):
    ConnectionName: Optional[NameString] = None
    Identifier: Optional[FederationIdentifier] = None


class FederatedTable(BaseModel):
    ConnectionName: Optional[NameString] = None
    DatabaseIdentifier: Optional[FederationIdentifier] = None
    Identifier: Optional[FederationIdentifier] = None


class FillMissingValues(BaseModel):
    FilledPath: Optional[EnclosedInStringProperty] = None
    ImputedPath: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName


class FilterValue(BaseModel):
    Type: FilterValueType
    Value: EnclosedInStringProperties


class FilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue]


class FindMatchesMetrics(BaseModel):
    AreaUnderPRCurve: Optional[GenericBoundedDouble] = None
    ColumnImportances: Optional[ColumnImportanceList] = None
    ConfusionMatrix_1: Optional[ConfusionMatrix] = Field(None, alias='ConfusionMatrix')
    F1: Optional[GenericBoundedDouble] = None
    Precision: Optional[GenericBoundedDouble] = None
    Recall: Optional[GenericBoundedDouble] = None


class FindMatchesParameters(BaseModel):
    AccuracyCostTradeoff: Optional[GenericBoundedDouble] = None
    EnforceProvidedLabels: Optional[NullableBoolean] = None
    PrecisionRecallTradeoff: Optional[GenericBoundedDouble] = None
    PrimaryKeyColumnName: Optional[ColumnNameString] = None


class FindMatchesTaskRunProperties(BaseModel):
    JobId: Optional[HashString] = None
    JobName: Optional[NameString] = None
    JobRunId: Optional[HashString] = None


class GenericMap(RootModel[Optional[Dict[str, GenericString]]]):
    root: Optional[Dict[str, GenericString]] = None


class GetBlueprintRequest(BaseModel):
    IncludeBlueprint: Optional[NullableBoolean] = None
    IncludeParameterSpec: Optional[NullableBoolean] = None
    Name: NameString


class GetBlueprintRunRequest(BaseModel):
    BlueprintName: OrchestrationNameString
    RunId: IdString


class GetBlueprintRunResponse(BaseModel):
    BlueprintRun_1: Optional[BlueprintRun] = Field(None, alias='BlueprintRun')


class GetBlueprintRunsRequest(BaseModel):
    BlueprintName: NameString
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None


class GetBlueprintRunsResponse(BaseModel):
    BlueprintRuns_1: Optional[BlueprintRuns] = Field(None, alias='BlueprintRuns')
    NextToken: Optional[GenericString] = None


class GetCatalogImportStatusResponse(BaseModel):
    ImportStatus: Optional[CatalogImportStatus] = None


class GetClassifierRequest(BaseModel):
    Name: NameString


class GetClassifiersRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None


class GetColumnNamesList(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=100, min_length=0)


class GetColumnStatisticsForPartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ColumnNames: GetColumnNamesList
    DatabaseName: NameString
    PartitionValues: ValueStringList
    TableName: NameString


class GetColumnStatisticsForTableRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ColumnNames: GetColumnNamesList
    DatabaseName: NameString
    TableName: NameString


class GetConnectionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    HidePassword: Optional[Boolean] = None
    Name: NameString


class GetCrawlerMetricsRequest(BaseModel):
    CrawlerNameList_1: Optional[CrawlerNameList] = Field(None, alias='CrawlerNameList')
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None


class GetCrawlerMetricsResponse(BaseModel):
    CrawlerMetricsList_1: Optional[CrawlerMetricsList] = Field(
        None, alias='CrawlerMetricsList'
    )
    NextToken: Optional[Token] = None


class GetCrawlerRequest(BaseModel):
    Name: NameString


class GetCrawlersRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None


class GetCustomEntityTypeRequest(BaseModel):
    Name: NameString


class GetCustomEntityTypeResponse(BaseModel):
    ContextWords_1: Optional[ContextWords] = Field(None, alias='ContextWords')
    Name: Optional[NameString] = None
    RegexString: Optional[NameString] = None


class GetDataQualityResultRequest(BaseModel):
    ResultId: HashString


class GetDataQualityRuleRecommendationRunRequest(BaseModel):
    RunId: HashString


class GetDataQualityRulesetEvaluationRunRequest(BaseModel):
    RunId: HashString


class GetDataQualityRulesetRequest(BaseModel):
    Name: NameString


class GetDataQualityRulesetResponse(BaseModel):
    CreatedOn: Optional[Timestamp] = None
    Description: Optional[DescriptionString] = None
    LastModifiedOn: Optional[Timestamp] = None
    Name: Optional[NameString] = None
    RecommendationRunId: Optional[HashString] = None
    Ruleset: Optional[DataQualityRulesetString] = None
    TargetTable: Optional[DataQualityTargetTable] = None


class GetDatabaseRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Name: NameString


class GetDatabasesRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    MaxResults: Optional[CatalogGetterPageSize] = None
    NextToken: Optional[Token] = None
    ResourceShareType_1: Optional[ResourceShareType] = Field(
        None, alias='ResourceShareType'
    )


class GetDataflowGraphRequest(BaseModel):
    PythonScript_1: Optional[PythonScript] = Field(None, alias='PythonScript')


class GetDataflowGraphResponse(BaseModel):
    DagEdges_1: Optional[DagEdges] = Field(None, alias='DagEdges')
    DagNodes_1: Optional[DagNodes] = Field(None, alias='DagNodes')


class GetDevEndpointResponse(BaseModel):
    DevEndpoint_1: Optional[DevEndpoint] = Field(None, alias='DevEndpoint')


class GetDevEndpointsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None


class GetDevEndpointsResponse(BaseModel):
    DevEndpoints: Optional[DevEndpointList] = None
    NextToken: Optional[GenericString] = None


class GetJobBookmarkRequest(BaseModel):
    JobName_1: JobName = Field(..., alias='JobName')
    RunId_1: Optional[RunId] = Field(None, alias='RunId')


class GetJobRequest(BaseModel):
    JobName: NameString


class GetJobRunRequest(BaseModel):
    JobName: NameString
    PredecessorsIncluded: Optional[BooleanValue] = None
    RunId: IdString


class GetJobRunsRequest(BaseModel):
    JobName: NameString
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None


class GetJobsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None


class GetMLTaskRunRequest(BaseModel):
    TaskRunId: HashString
    TransformId: HashString


class GetMLTransformRequest(BaseModel):
    TransformId: HashString


class GetPartitionIndexesRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    NextToken: Optional[Token] = None
    TableName: NameString


class GetPartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    PartitionValues: ValueStringList
    TableName: NameString


class GetPlanResponse(BaseModel):
    PythonScript_1: Optional[PythonScript] = Field(None, alias='PythonScript')
    ScalaCode_1: Optional[ScalaCode] = Field(None, alias='ScalaCode')


class GetRegistryResponse(BaseModel):
    CreatedTime: Optional[CreatedTimestamp] = None
    Description: Optional[DescriptionString] = None
    RegistryArn: Optional[GlueResourceArn] = None
    RegistryName: Optional[SchemaRegistryNameString] = None
    Status: Optional[RegistryStatus] = None
    UpdatedTime: Optional[UpdatedTimestamp] = None


class GetResourcePoliciesRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None


class GetResourcePolicyRequest(BaseModel):
    ResourceArn: Optional[GlueResourceArn] = None


class GetResourcePolicyResponse(BaseModel):
    CreateTime: Optional[Timestamp] = None
    PolicyHash: Optional[HashString] = None
    PolicyInJson: Optional[PolicyJsonString] = None
    UpdateTime: Optional[Timestamp] = None


class GetSchemaByDefinitionResponse(BaseModel):
    CreatedTime: Optional[CreatedTimestamp] = None
    DataFormat_1: Optional[DataFormat] = Field(None, alias='DataFormat')
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    Status: Optional[SchemaVersionStatus] = None


class GetSchemaResponse(BaseModel):
    Compatibility_1: Optional[Compatibility] = Field(None, alias='Compatibility')
    CreatedTime: Optional[CreatedTimestamp] = None
    DataFormat_1: Optional[DataFormat] = Field(None, alias='DataFormat')
    Description: Optional[DescriptionString] = None
    LatestSchemaVersion: Optional[VersionLongNumber] = None
    NextSchemaVersion: Optional[VersionLongNumber] = None
    RegistryArn: Optional[GlueResourceArn] = None
    RegistryName: Optional[SchemaRegistryNameString] = None
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaCheckpoint: Optional[SchemaCheckpointNumber] = None
    SchemaName: Optional[SchemaRegistryNameString] = None
    SchemaStatus_1: Optional[SchemaStatus] = Field(None, alias='SchemaStatus')
    UpdatedTime: Optional[UpdatedTimestamp] = None


class GetSchemaVersionResponse(BaseModel):
    CreatedTime: Optional[CreatedTimestamp] = None
    DataFormat_1: Optional[DataFormat] = Field(None, alias='DataFormat')
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaDefinition: Optional[SchemaDefinitionString] = None
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    Status: Optional[SchemaVersionStatus] = None
    VersionNumber: Optional[VersionLongNumber] = None


class GetSchemaVersionsDiffResponse(BaseModel):
    Diff: Optional[SchemaDefinitionDiff] = None


class GetSecurityConfigurationRequest(BaseModel):
    Name: NameString


class GetSecurityConfigurationsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None


class GetSessionRequest(BaseModel):
    Id: NameString
    RequestOrigin: Optional[OrchestrationNameString] = None


class GetStatementRequest(BaseModel):
    Id: IntegerValue
    RequestOrigin: Optional[OrchestrationNameString] = None
    SessionId: NameString


class GetTableRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    Name: NameString
    QueryAsOfTime: Optional[Timestamp] = None
    TransactionId: Optional[TransactionIdString] = None


class GetTableVersionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    TableName: NameString
    VersionId: Optional[VersionString] = None


class GetTableVersionsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    MaxResults: Optional[CatalogGetterPageSize] = None
    NextToken: Optional[Token] = None
    TableName: NameString


class GetTablesRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    Expression: Optional[FilterString] = None
    MaxResults: Optional[CatalogGetterPageSize] = None
    NextToken: Optional[Token] = None
    QueryAsOfTime: Optional[Timestamp] = None
    TransactionId: Optional[TransactionIdString] = None


class GetTagsRequest(BaseModel):
    ResourceArn: GlueResourceArn


class GetTagsResponse(BaseModel):
    Tags: Optional[TagsMap] = None


class GetTriggerRequest(BaseModel):
    Name: NameString


class GetTriggersRequest(BaseModel):
    DependentJobName: Optional[NameString] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None


class GetUnfilteredPartitionMetadataRequest(BaseModel):
    AuditContext_1: Optional[AuditContext] = Field(None, alias='AuditContext')
    CatalogId: CatalogIdString
    DatabaseName: NameString
    PartitionValues: ValueStringList
    SupportedPermissionTypes: PermissionTypeList
    TableName: NameString


class GetUnfilteredTableMetadataRequest(BaseModel):
    AuditContext_1: Optional[AuditContext] = Field(None, alias='AuditContext')
    CatalogId: CatalogIdString
    DatabaseName: NameString
    Name: NameString
    SupportedPermissionTypes: PermissionTypeList


class GetUserDefinedFunctionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    FunctionName: NameString


class GetUserDefinedFunctionsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: Optional[NameString] = None
    MaxResults: Optional[CatalogGetterPageSize] = None
    NextToken: Optional[Token] = None
    Pattern: NameString


class GetWorkflowRequest(BaseModel):
    IncludeGraph: Optional[NullableBoolean] = None
    Name: NameString


class GetWorkflowRunPropertiesRequest(BaseModel):
    Name: NameString
    RunId: IdString


class GetWorkflowRunPropertiesResponse(BaseModel):
    RunProperties: Optional[WorkflowRunProperties] = None


class GetWorkflowRunRequest(BaseModel):
    IncludeGraph: Optional[NullableBoolean] = None
    Name: NameString
    RunId: IdString


class GetWorkflowRunsRequest(BaseModel):
    IncludeGraph: Optional[NullableBoolean] = None
    MaxResults: Optional[PageSize] = None
    Name: NameString
    NextToken: Optional[GenericString] = None


class GluePolicy(BaseModel):
    CreateTime: Optional[Timestamp] = None
    PolicyHash: Optional[HashString] = None
    PolicyInJson: Optional[PolicyJsonString] = None
    UpdateTime: Optional[Timestamp] = None


class GlueSchema(BaseModel):
    Columns: Optional[GlueStudioSchemaColumnList] = None


class GlueSchemas(RootModel[List[GlueSchema]]):
    root: List[GlueSchema]


class GlueStudioPathList(RootModel[List[EnclosedInStringProperties]]):
    root: List[EnclosedInStringProperties]


class GlueTable(BaseModel):
    AdditionalOptions: Optional[GlueTableAdditionalOptions] = None
    CatalogId: Optional[NameString] = None
    ConnectionName: Optional[NameString] = None
    DatabaseName: NameString
    TableName: NameString


class GlueTables(RootModel[List[GlueTable]]):
    root: List[GlueTable] = Field(..., max_length=10, min_length=0)


class GovernedCatalogSource(BaseModel):
    AdditionalOptions: Optional[S3SourceAdditionalOptions] = None
    Database: EnclosedInStringProperty
    Name: NodeName
    PartitionPredicate: Optional[EnclosedInStringProperty] = None
    Table: EnclosedInStringProperty


class GovernedCatalogTarget(BaseModel):
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    PartitionKeys: Optional[GlueStudioPathList] = None
    SchemaChangePolicy: Optional[CatalogSchemaChangePolicy] = None
    Table: EnclosedInStringProperty


class GrokClassifier(BaseModel):
    Classification_1: Classification = Field(..., alias='Classification')
    CreationTime: Optional[Timestamp] = None
    CustomPatterns_1: Optional[CustomPatterns] = Field(None, alias='CustomPatterns')
    GrokPattern_1: GrokPattern = Field(..., alias='GrokPattern')
    LastUpdated: Optional[Timestamp] = None
    Name: NameString
    Version: Optional[VersionId] = None


class ImportLabelsTaskRunProperties(BaseModel):
    InputS3Path: Optional[UriString] = None
    Replace: Optional[ReplaceBoolean] = None


class JDBCConnectorOptions(BaseModel):
    DataTypeMapping: Optional[JDBCDataTypeMapping] = None
    FilterPredicate: Optional[EnclosedInStringProperty] = None
    JobBookmarkKeys: Optional[EnclosedInStringProperties] = None
    JobBookmarkKeysSortOrder: Optional[EnclosedInStringProperty] = None
    LowerBound: Optional[BoxedNonNegativeLong] = None
    NumPartitions: Optional[BoxedNonNegativeLong] = None
    PartitionColumn: Optional[EnclosedInStringProperty] = None
    UpperBound: Optional[BoxedNonNegativeLong] = None


class JDBCConnectorSource(BaseModel):
    AdditionalOptions: Optional[JDBCConnectorOptions] = None
    ConnectionName: EnclosedInStringProperty
    ConnectionTable: Optional[EnclosedInStringPropertyWithQuote] = None
    ConnectionType: EnclosedInStringProperty
    ConnectorName: EnclosedInStringProperty
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    Query: Optional[SqlQuery] = None


class JDBCConnectorTarget(BaseModel):
    AdditionalOptions_1: Optional[AdditionalOptions] = Field(
        None, alias='AdditionalOptions'
    )
    ConnectionName: EnclosedInStringProperty
    ConnectionTable: EnclosedInStringPropertyWithQuote
    ConnectionType: EnclosedInStringProperty
    ConnectorName: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None


class JdbcTarget(BaseModel):
    ConnectionName_1: Optional[ConnectionName] = Field(None, alias='ConnectionName')
    EnableAdditionalMetadata_1: Optional[EnableAdditionalMetadata] = Field(
        None, alias='EnableAdditionalMetadata'
    )
    Exclusions: Optional[PathList] = None
    Path_1: Optional[Path] = Field(None, alias='Path')


class JdbcTargetList(RootModel[List[JdbcTarget]]):
    root: List[JdbcTarget]


class JobBookmarkEntry(BaseModel):
    Attempt: Optional[IntegerValue] = None
    JobBookmark: Optional[JsonValue] = None
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    PreviousRunId: Optional[RunId] = None
    Run: Optional[IntegerValue] = None
    RunId_1: Optional[RunId] = Field(None, alias='RunId')
    Version: Optional[IntegerValue] = None


class JobBookmarksEncryption(BaseModel):
    JobBookmarksEncryptionMode_1: Optional[JobBookmarksEncryptionMode] = Field(
        None, alias='JobBookmarksEncryptionMode'
    )
    KmsKeyArn_1: Optional[KmsKeyArn] = Field(None, alias='KmsKeyArn')


class JobCommand(BaseModel):
    Name: Optional[GenericString] = None
    PythonVersion: Optional[PythonVersionString] = None
    ScriptLocation: Optional[ScriptLocationString] = None


class JobNameList(RootModel[List[NameString]]):
    root: List[NameString]


class JoinColumn(BaseModel):
    From: EnclosedInStringProperty
    Keys: GlueStudioPathList


class JoinColumns(RootModel[List[JoinColumn]]):
    root: List[JoinColumn] = Field(..., max_length=2, min_length=2)


class JsonClassifier(BaseModel):
    CreationTime: Optional[Timestamp] = None
    JsonPath_1: JsonPath = Field(..., alias='JsonPath')
    LastUpdated: Optional[Timestamp] = None
    Name: NameString
    Version: Optional[VersionId] = None


class KeyList(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., min_length=1)


class KeySchemaElement(BaseModel):
    Name: NameString
    Type: ColumnTypeString


class KeySchemaElementList(RootModel[List[KeySchemaElement]]):
    root: List[KeySchemaElement] = Field(..., min_length=1)


class KinesisStreamingSourceOptions(BaseModel):
    AddIdleTimeBetweenReads: Optional[BoxedBoolean] = None
    AddRecordTimestamp: Optional[EnclosedInStringProperty] = None
    AvoidEmptyBatches: Optional[BoxedBoolean] = None
    Classification: Optional[EnclosedInStringProperty] = None
    Delimiter: Optional[EnclosedInStringProperty] = None
    DescribeShardInterval: Optional[BoxedNonNegativeLong] = None
    EmitConsumerLagMetrics: Optional[EnclosedInStringProperty] = None
    EndpointUrl: Optional[EnclosedInStringProperty] = None
    IdleTimeBetweenReadsInMs: Optional[BoxedNonNegativeLong] = None
    MaxFetchRecordsPerShard: Optional[BoxedNonNegativeLong] = None
    MaxFetchTimeInMs: Optional[BoxedNonNegativeLong] = None
    MaxRecordPerRead: Optional[BoxedNonNegativeLong] = None
    MaxRetryIntervalMs: Optional[BoxedNonNegativeLong] = None
    NumRetries: Optional[BoxedNonNegativeInt] = None
    RetryIntervalMs: Optional[BoxedNonNegativeLong] = None
    RoleArn: Optional[EnclosedInStringProperty] = None
    RoleSessionName: Optional[EnclosedInStringProperty] = None
    StartingPosition_1: Optional[StartingPosition] = Field(
        None, alias='StartingPosition'
    )
    StreamArn: Optional[EnclosedInStringProperty] = None
    StreamName: Optional[EnclosedInStringProperty] = None


class LabelingSetGenerationTaskRunProperties(BaseModel):
    OutputS3Path: Optional[UriString] = None


class LakeFormationConfiguration(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    UseLakeFormationCredentials: Optional[NullableBoolean] = None


class LastActiveDefinition(BaseModel):
    BlueprintLocation: Optional[GenericString] = None
    BlueprintServiceLocation: Optional[GenericString] = None
    Description: Optional[Generic512CharString] = None
    LastModifiedOn: Optional[TimestampValue] = None
    ParameterSpec: Optional[BlueprintParameterSpec] = None


class LastCrawlInfo(BaseModel):
    ErrorMessage: Optional[DescriptionString] = None
    LogGroup_1: Optional[LogGroup] = Field(None, alias='LogGroup')
    LogStream_1: Optional[LogStream] = Field(None, alias='LogStream')
    MessagePrefix_1: Optional[MessagePrefix] = Field(None, alias='MessagePrefix')
    StartTime: Optional[Timestamp] = None
    Status: Optional[LastCrawlStatus] = None


class LimitedPathList(RootModel[List[LimitedStringList]]):
    root: List[LimitedStringList]


class ListBlueprintsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None
    Tags: Optional[TagsMap] = None


class ListBlueprintsResponse(BaseModel):
    Blueprints: Optional[BlueprintNames] = None
    NextToken: Optional[GenericString] = None


class ListCrawlersRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None
    Tags: Optional[TagsMap] = None


class ListCrawlersResponse(BaseModel):
    CrawlerNames: Optional[CrawlerNameList] = None
    NextToken: Optional[Token] = None


class ListCrawlsRequest(BaseModel):
    CrawlerName: NameString
    Filters: Optional[CrawlsFilterList] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None


class ListCrawlsResponse(BaseModel):
    Crawls: Optional[CrawlerHistoryList] = None
    NextToken: Optional[Token] = None


class ListCustomEntityTypesRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None


class ListCustomEntityTypesResponse(BaseModel):
    CustomEntityTypes_1: Optional[CustomEntityTypes] = Field(
        None, alias='CustomEntityTypes'
    )
    NextToken: Optional[PaginationToken] = None


class ListDevEndpointsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None
    Tags: Optional[TagsMap] = None


class ListDevEndpointsResponse(BaseModel):
    DevEndpointNames: Optional[DevEndpointNameList] = None
    NextToken: Optional[GenericString] = None


class ListJobsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None
    Tags: Optional[TagsMap] = None


class ListJobsResponse(BaseModel):
    JobNames: Optional[JobNameList] = None
    NextToken: Optional[GenericString] = None


class ListMLTransformsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    TransformIds: TransformIdList


class ListRegistriesInput(BaseModel):
    MaxResults: Optional[MaxResultsNumber] = None
    NextToken: Optional[SchemaRegistryTokenString] = None


class ListSessionsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[OrchestrationToken] = None
    RequestOrigin: Optional[OrchestrationNameString] = None
    Tags: Optional[TagsMap] = None


class ListStatementsRequest(BaseModel):
    NextToken: Optional[OrchestrationToken] = None
    RequestOrigin: Optional[OrchestrationNameString] = None
    SessionId: NameString


class ListTriggersRequest(BaseModel):
    DependentJobName: Optional[NameString] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None
    Tags: Optional[TagsMap] = None


class ListTriggersResponse(BaseModel):
    NextToken: Optional[GenericString] = None
    TriggerNames: Optional[TriggerNameList] = None


class ListWorkflowsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[GenericString] = None


class ListWorkflowsResponse(BaseModel):
    NextToken: Optional[GenericString] = None
    Workflows: Optional[WorkflowNames] = None


class LongColumnStatisticsData(BaseModel):
    MaximumValue: Optional[Long] = None
    MinimumValue: Optional[Long] = None
    NumberOfDistinctValues: NonNegativeLong
    NumberOfNulls: NonNegativeLong


class MLUserDataEncryption(BaseModel):
    KmsKeyId: Optional[NameString] = None
    MlUserDataEncryptionMode: MLUserDataEncryptionModeString


class ManyInputs(RootModel[List[NodeId]]):
    root: List[NodeId] = Field(..., min_length=1)


class MappingEntry(BaseModel):
    SourcePath: Optional[SchemaPathString] = None
    SourceTable: Optional[TableName] = None
    SourceType: Optional[FieldType] = None
    TargetPath: Optional[SchemaPathString] = None
    TargetTable: Optional[TableName] = None
    TargetType: Optional[FieldType] = None


class MappingList(RootModel[List[MappingEntry]]):
    root: List[MappingEntry]


class MatchCriteria(RootModel[List[NameString]]):
    root: List[NameString] = Field(..., max_length=10, min_length=0)


class Merge(BaseModel):
    Inputs: TwoInputs
    Name: NodeName
    PrimaryKeys: GlueStudioPathList
    Source: NodeId


class MetadataKeyValuePair(BaseModel):
    MetadataKey: Optional[MetadataKeyString] = None
    MetadataValue: Optional[MetadataValueString] = None


class MetadataList(RootModel[List[MetadataKeyValuePair]]):
    root: List[MetadataKeyValuePair]


class MicrosoftSQLServerCatalogSource(BaseModel):
    Database: EnclosedInStringProperty
    Name: NodeName
    Table: EnclosedInStringProperty


class MicrosoftSQLServerCatalogTarget(BaseModel):
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    Table: EnclosedInStringProperty


class MongoDBTarget(BaseModel):
    ConnectionName_1: Optional[ConnectionName] = Field(None, alias='ConnectionName')
    Path_1: Optional[Path] = Field(None, alias='Path')
    ScanAll: Optional[NullableBoolean] = None


class MongoDBTargetList(RootModel[List[MongoDBTarget]]):
    root: List[MongoDBTarget]


class MySQLCatalogSource(BaseModel):
    Database: EnclosedInStringProperty
    Name: NodeName
    Table: EnclosedInStringProperty


class MySQLCatalogTarget(BaseModel):
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    Table: EnclosedInStringProperty


class NotificationProperty(BaseModel):
    NotifyDelayAfter_1: Optional[NotifyDelayAfter] = Field(
        None, alias='NotifyDelayAfter'
    )


class NullValueField(BaseModel):
    Datatype_1: Datatype = Field(..., alias='Datatype')
    Value: EnclosedInStringProperty


class NullValueFields(RootModel[List[NullValueField]]):
    root: List[NullValueField] = Field(..., max_length=50, min_length=0)


class OrchestrationArgumentsMap(
    RootModel[Optional[Dict[str, OrchestrationArgumentsValue]]]
):
    root: Optional[Dict[str, OrchestrationArgumentsValue]] = None


class OtherMetadataValueList(RootModel[List[OtherMetadataValueListItem]]):
    root: List[OtherMetadataValueListItem]


class PIIDetection(BaseModel):
    EntityTypesToDetect: EnclosedInStringProperties
    Inputs: OneInput
    MaskValue_1: Optional[MaskValue] = Field(None, alias='MaskValue')
    Name: NodeName
    OutputColumnName: Optional[EnclosedInStringProperty] = None
    PiiType_1: PiiType = Field(..., alias='PiiType')
    SampleFraction: Optional[BoxedDoubleFraction] = None
    ThresholdFraction: Optional[BoxedDoubleFraction] = None


class ParametersMap(RootModel[Optional[Dict[str, ParametersMapValue]]]):
    root: Optional[Dict[str, ParametersMapValue]] = None


class PartitionError(BaseModel):
    ErrorDetail_1: Optional[ErrorDetail] = Field(None, alias='ErrorDetail')
    PartitionValues: Optional[ValueStringList] = None


class PartitionErrors(RootModel[List[PartitionError]]):
    root: List[PartitionError]


class PartitionIndex(BaseModel):
    IndexName: NameString
    Keys: KeyList


class PartitionIndexList(RootModel[List[PartitionIndex]]):
    root: List[PartitionIndex] = Field(..., max_length=3)


class PartitionValueList(BaseModel):
    Values: ValueStringList


class PhysicalConnectionRequirements(BaseModel):
    AvailabilityZone: Optional[NameString] = None
    SecurityGroupIdList_1: Optional[SecurityGroupIdList] = Field(
        None, alias='SecurityGroupIdList'
    )
    SubnetId: Optional[NameString] = None


class Predicate(BaseModel):
    Conditions: Optional[ConditionList] = None
    Logical_1: Optional[Logical] = Field(None, alias='Logical')


class PrincipalPermissions(BaseModel):
    Permissions: Optional[PermissionList] = None
    Principal: Optional[DataLakePrincipal] = None


class PrincipalPermissionsList(RootModel[List[PrincipalPermissions]]):
    root: List[PrincipalPermissions]


class PropertyPredicate(BaseModel):
    Comparator_1: Optional[Comparator] = Field(None, alias='Comparator')
    Key: Optional[ValueString] = None
    Value: Optional[ValueString] = None


class PutSchemaVersionMetadataResponse(BaseModel):
    LatestVersion: Optional[LatestSchemaVersionBoolean] = None
    MetadataKey: Optional[MetadataKeyString] = None
    MetadataValue: Optional[MetadataValueString] = None
    RegistryName: Optional[SchemaRegistryNameString] = None
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaName: Optional[SchemaRegistryNameString] = None
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    VersionNumber: Optional[VersionLongNumber] = None


class PutWorkflowRunPropertiesRequest(BaseModel):
    Name: NameString
    RunId: IdString
    RunProperties: WorkflowRunProperties


class RegisterSchemaVersionResponse(BaseModel):
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    Status: Optional[SchemaVersionStatus] = None
    VersionNumber: Optional[VersionLongNumber] = None


class RegistryId(BaseModel):
    RegistryArn: Optional[GlueResourceArn] = None
    RegistryName: Optional[SchemaRegistryNameString] = None


class RegistryListItem(BaseModel):
    CreatedTime: Optional[CreatedTimestamp] = None
    Description: Optional[DescriptionString] = None
    RegistryArn: Optional[GlueResourceArn] = None
    RegistryName: Optional[SchemaRegistryNameString] = None
    Status: Optional[RegistryStatus] = None
    UpdatedTime: Optional[UpdatedTimestamp] = None


class RemoveSchemaVersionMetadataResponse(BaseModel):
    LatestVersion: Optional[LatestSchemaVersionBoolean] = None
    MetadataKey: Optional[MetadataKeyString] = None
    MetadataValue: Optional[MetadataValueString] = None
    RegistryName: Optional[SchemaRegistryNameString] = None
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaName: Optional[SchemaRegistryNameString] = None
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    VersionNumber: Optional[VersionLongNumber] = None


class RenameField(BaseModel):
    Inputs: OneInput
    Name: NodeName
    SourcePath: EnclosedInStringProperties
    TargetPath: EnclosedInStringProperties


class ResetJobBookmarkRequest(BaseModel):
    JobName_1: JobName = Field(..., alias='JobName')
    RunId_1: Optional[RunId] = Field(None, alias='RunId')


class ResetJobBookmarkResponse(BaseModel):
    JobBookmarkEntry_1: Optional[JobBookmarkEntry] = Field(
        None, alias='JobBookmarkEntry'
    )


class ResourceUri(BaseModel):
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    Uri: Optional[URI] = None


class ResourceUriList(RootModel[List[ResourceUri]]):
    root: List[ResourceUri] = Field(..., max_length=1000, min_length=0)


class S3CatalogDeltaSource(BaseModel):
    AdditionalDeltaOptions: Optional[AdditionalOptions] = None
    Database: EnclosedInStringProperty
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    Table: EnclosedInStringProperty


class S3CatalogHudiSource(BaseModel):
    AdditionalHudiOptions: Optional[AdditionalOptions] = None
    Database: EnclosedInStringProperty
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    Table: EnclosedInStringProperty


class S3CatalogSource(BaseModel):
    AdditionalOptions: Optional[S3SourceAdditionalOptions] = None
    Database: EnclosedInStringProperty
    Name: NodeName
    PartitionPredicate: Optional[EnclosedInStringProperty] = None
    Table: EnclosedInStringProperty


class S3CatalogTarget(BaseModel):
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    PartitionKeys: Optional[GlueStudioPathList] = None
    SchemaChangePolicy: Optional[CatalogSchemaChangePolicy] = None
    Table: EnclosedInStringProperty


class S3CsvSource(BaseModel):
    AdditionalOptions: Optional[S3DirectSourceAdditionalOptions] = None
    CompressionType_1: Optional[CompressionType] = Field(None, alias='CompressionType')
    Escaper: Optional[EnclosedInStringPropertyWithQuote] = None
    Exclusions: Optional[EnclosedInStringProperties] = None
    GroupFiles: Optional[EnclosedInStringProperty] = None
    GroupSize: Optional[EnclosedInStringProperty] = None
    MaxBand: Optional[BoxedNonNegativeInt] = None
    MaxFilesInBand: Optional[BoxedNonNegativeInt] = None
    Multiline: Optional[BoxedBoolean] = None
    Name: NodeName
    OptimizePerformance: Optional[BooleanValue] = None
    OutputSchemas: Optional[GlueSchemas] = None
    Paths: EnclosedInStringProperties
    QuoteChar_1: QuoteChar = Field(..., alias='QuoteChar')
    Recurse: Optional[BoxedBoolean] = None
    Separator_1: Separator = Field(..., alias='Separator')
    SkipFirst: Optional[BoxedBoolean] = None
    WithHeader: Optional[BoxedBoolean] = None
    WriteHeader: Optional[BoxedBoolean] = None


class S3DeltaCatalogTarget(BaseModel):
    AdditionalOptions_1: Optional[AdditionalOptions] = Field(
        None, alias='AdditionalOptions'
    )
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    PartitionKeys: Optional[GlueStudioPathList] = None
    SchemaChangePolicy: Optional[CatalogSchemaChangePolicy] = None
    Table: EnclosedInStringProperty


class S3DeltaDirectTarget(BaseModel):
    AdditionalOptions_1: Optional[AdditionalOptions] = Field(
        None, alias='AdditionalOptions'
    )
    Compression: DeltaTargetCompressionType
    Format: TargetFormat
    Inputs: OneInput
    Name: NodeName
    PartitionKeys: Optional[GlueStudioPathList] = None
    Path: EnclosedInStringProperty
    SchemaChangePolicy: Optional[DirectSchemaChangePolicy] = None


class S3DeltaSource(BaseModel):
    AdditionalDeltaOptions: Optional[AdditionalOptions] = None
    AdditionalOptions: Optional[S3DirectSourceAdditionalOptions] = None
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    Paths: EnclosedInStringProperties


class S3DirectTarget(BaseModel):
    Compression: Optional[EnclosedInStringProperty] = None
    Format: TargetFormat
    Inputs: OneInput
    Name: NodeName
    PartitionKeys: Optional[GlueStudioPathList] = None
    Path: EnclosedInStringProperty
    SchemaChangePolicy: Optional[DirectSchemaChangePolicy] = None


class S3Encryption(BaseModel):
    KmsKeyArn_1: Optional[KmsKeyArn] = Field(None, alias='KmsKeyArn')
    S3EncryptionMode_1: Optional[S3EncryptionMode] = Field(
        None, alias='S3EncryptionMode'
    )


class S3EncryptionList(RootModel[List[S3Encryption]]):
    root: List[S3Encryption]


class S3GlueParquetTarget(BaseModel):
    Compression: Optional[ParquetCompressionType] = None
    Inputs: OneInput
    Name: NodeName
    PartitionKeys: Optional[GlueStudioPathList] = None
    Path: EnclosedInStringProperty
    SchemaChangePolicy: Optional[DirectSchemaChangePolicy] = None


class S3HudiCatalogTarget(BaseModel):
    AdditionalOptions_1: AdditionalOptions = Field(..., alias='AdditionalOptions')
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    PartitionKeys: Optional[GlueStudioPathList] = None
    SchemaChangePolicy: Optional[CatalogSchemaChangePolicy] = None
    Table: EnclosedInStringProperty


class S3HudiDirectTarget(BaseModel):
    AdditionalOptions_1: AdditionalOptions = Field(..., alias='AdditionalOptions')
    Compression: HudiTargetCompressionType
    Format: TargetFormat
    Inputs: OneInput
    Name: NodeName
    PartitionKeys: Optional[GlueStudioPathList] = None
    Path: EnclosedInStringProperty
    SchemaChangePolicy: Optional[DirectSchemaChangePolicy] = None


class S3HudiSource(BaseModel):
    AdditionalHudiOptions: Optional[AdditionalOptions] = None
    AdditionalOptions: Optional[S3DirectSourceAdditionalOptions] = None
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    Paths: EnclosedInStringProperties


class S3JsonSource(BaseModel):
    AdditionalOptions: Optional[S3DirectSourceAdditionalOptions] = None
    CompressionType_1: Optional[CompressionType] = Field(None, alias='CompressionType')
    Exclusions: Optional[EnclosedInStringProperties] = None
    GroupFiles: Optional[EnclosedInStringProperty] = None
    GroupSize: Optional[EnclosedInStringProperty] = None
    JsonPath: Optional[EnclosedInStringProperty] = None
    MaxBand: Optional[BoxedNonNegativeInt] = None
    MaxFilesInBand: Optional[BoxedNonNegativeInt] = None
    Multiline: Optional[BoxedBoolean] = None
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    Paths: EnclosedInStringProperties
    Recurse: Optional[BoxedBoolean] = None


class S3ParquetSource(BaseModel):
    AdditionalOptions: Optional[S3DirectSourceAdditionalOptions] = None
    CompressionType: Optional[ParquetCompressionType] = None
    Exclusions: Optional[EnclosedInStringProperties] = None
    GroupFiles: Optional[EnclosedInStringProperty] = None
    GroupSize: Optional[EnclosedInStringProperty] = None
    MaxBand: Optional[BoxedNonNegativeInt] = None
    MaxFilesInBand: Optional[BoxedNonNegativeInt] = None
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    Paths: EnclosedInStringProperties
    Recurse: Optional[BoxedBoolean] = None


class Schedule(BaseModel):
    ScheduleExpression: Optional[CronExpression] = None
    State: Optional[ScheduleState] = None


class SchemaChangePolicy(BaseModel):
    DeleteBehavior_1: Optional[DeleteBehavior] = Field(None, alias='DeleteBehavior')
    UpdateBehavior_1: Optional[UpdateBehavior] = Field(None, alias='UpdateBehavior')


class SchemaId(BaseModel):
    RegistryName: Optional[SchemaRegistryNameString] = None
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaName: Optional[SchemaRegistryNameString] = None


class SchemaListItem(BaseModel):
    CreatedTime: Optional[CreatedTimestamp] = None
    Description: Optional[DescriptionString] = None
    RegistryName: Optional[SchemaRegistryNameString] = None
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaName: Optional[SchemaRegistryNameString] = None
    SchemaStatus_1: Optional[SchemaStatus] = Field(None, alias='SchemaStatus')
    UpdatedTime: Optional[UpdatedTimestamp] = None


class SchemaReference(BaseModel):
    SchemaId_1: Optional[SchemaId] = Field(None, alias='SchemaId')
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    SchemaVersionNumber: Optional[VersionLongNumber] = None


class SchemaVersionErrorItem(BaseModel):
    ErrorDetails_1: Optional[ErrorDetails] = Field(None, alias='ErrorDetails')
    VersionNumber: Optional[VersionLongNumber] = None


class SchemaVersionErrorList(RootModel[List[SchemaVersionErrorItem]]):
    root: List[SchemaVersionErrorItem]


class SchemaVersionListItem(BaseModel):
    CreatedTime: Optional[CreatedTimestamp] = None
    SchemaArn: Optional[GlueResourceArn] = None
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    Status: Optional[SchemaVersionStatus] = None
    VersionNumber: Optional[VersionLongNumber] = None


class SchemaVersionNumber(BaseModel):
    LatestVersion: Optional[LatestSchemaVersionBoolean] = None
    VersionNumber: Optional[VersionLongNumber] = None


class SearchPropertyPredicates(RootModel[List[PropertyPredicate]]):
    root: List[PropertyPredicate]


class Segment(BaseModel):
    SegmentNumber: NonNegativeInteger
    TotalSegments: TotalSegmentsInteger


class SelectFields(BaseModel):
    Inputs: OneInput
    Name: NodeName
    Paths: GlueStudioPathList


class SerDeInfo(BaseModel):
    Name: Optional[NameString] = None
    Parameters: Optional[ParametersMap] = None
    SerializationLibrary: Optional[NameString] = None


class Session(BaseModel):
    Command: Optional[SessionCommand] = None
    Connections: Optional[ConnectionsList] = None
    CreatedOn: Optional[TimestampValue] = None
    DefaultArguments: Optional[OrchestrationArgumentsMap] = None
    Description: Optional[DescriptionString] = None
    ErrorMessage: Optional[DescriptionString] = None
    GlueVersion: Optional[GlueVersionString] = None
    Id: Optional[NameString] = None
    MaxCapacity: Optional[NullableDouble] = None
    Progress: Optional[DoubleValue] = None
    Role: Optional[OrchestrationRoleArn] = None
    SecurityConfiguration: Optional[NameString] = None
    Status: Optional[SessionStatus] = None


class SessionList(RootModel[List[Session]]):
    root: List[Session]


class SkewedInfo(BaseModel):
    SkewedColumnNames: Optional[NameStringList] = None
    SkewedColumnValueLocationMaps: Optional[LocationMap] = None
    SkewedColumnValues: Optional[ColumnValueStringList] = None


class SortCriterion(BaseModel):
    FieldName: Optional[ValueString] = None
    Sort_1: Optional[Sort] = Field(None, alias='Sort')


class SourceControlDetails(BaseModel):
    AuthStrategy: Optional[SourceControlAuthStrategy] = None
    AuthToken: Optional[Generic512CharString] = None
    Branch: Optional[Generic512CharString] = None
    Folder: Optional[Generic512CharString] = None
    LastCommitId: Optional[Generic512CharString] = None
    Owner: Optional[Generic512CharString] = None
    Provider: Optional[SourceControlProvider] = None
    Repository: Optional[Generic512CharString] = None


class SparkConnectorSource(BaseModel):
    AdditionalOptions_1: Optional[AdditionalOptions] = Field(
        None, alias='AdditionalOptions'
    )
    ConnectionName: EnclosedInStringProperty
    ConnectionType: EnclosedInStringProperty
    ConnectorName: EnclosedInStringProperty
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None


class SparkConnectorTarget(BaseModel):
    AdditionalOptions_1: Optional[AdditionalOptions] = Field(
        None, alias='AdditionalOptions'
    )
    ConnectionName: EnclosedInStringProperty
    ConnectionType: EnclosedInStringProperty
    ConnectorName: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None


class SparkSQL(BaseModel):
    Inputs: ManyInputs
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    SqlAliases_1: SqlAliases = Field(..., alias='SqlAliases')
    SqlQuery_1: SqlQuery = Field(..., alias='SqlQuery')


class Spigot(BaseModel):
    Inputs: OneInput
    Name: NodeName
    Path: EnclosedInStringProperty
    Prob_1: Optional[Prob] = Field(None, alias='Prob')
    Topk_1: Optional[Topk] = Field(None, alias='Topk')


class SplitFields(BaseModel):
    Inputs: OneInput
    Name: NodeName
    Paths: GlueStudioPathList


class StartExportLabelsTaskRunRequest(BaseModel):
    OutputS3Path: UriString
    TransformId: HashString


class StartImportLabelsTaskRunRequest(BaseModel):
    InputS3Path: UriString
    ReplaceAllLabels: Optional[ReplaceBoolean] = None
    TransformId: HashString


class StartJobRunRequest(BaseModel):
    AllocatedCapacity: Optional[IntegerValue] = None
    Arguments: Optional[GenericMap] = None
    ExecutionClass_1: Optional[ExecutionClass] = Field(None, alias='ExecutionClass')
    JobName: NameString
    JobRunId: Optional[IdString] = None
    MaxCapacity: Optional[NullableDouble] = None
    NotificationProperty_1: Optional[NotificationProperty] = Field(
        None, alias='NotificationProperty'
    )
    NumberOfWorkers: Optional[NullableInteger] = None
    SecurityConfiguration: Optional[NameString] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class StartMLLabelingSetGenerationTaskRunRequest(BaseModel):
    OutputS3Path: UriString
    TransformId: HashString


class StartWorkflowRunRequest(BaseModel):
    Name: NameString
    RunProperties: Optional[WorkflowRunProperties] = None


class StatementOutput(BaseModel):
    Data: Optional[StatementOutputData] = None
    ErrorName: Optional[GenericString] = None
    ErrorValue: Optional[GenericString] = None
    ExecutionCount: Optional[IntegerValue] = None
    Status: Optional[StatementState] = None
    Traceback: Optional[OrchestrationStringList] = None


class TableError(BaseModel):
    ErrorDetail_1: Optional[ErrorDetail] = Field(None, alias='ErrorDetail')
    TableName: Optional[NameString] = None


class TableErrors(RootModel[List[TableError]]):
    root: List[TableError]


class TableVersionError(BaseModel):
    ErrorDetail_1: Optional[ErrorDetail] = Field(None, alias='ErrorDetail')
    TableName: Optional[NameString] = None
    VersionId: Optional[VersionString] = None


class TableVersionErrors(RootModel[List[TableVersionError]]):
    root: List[TableVersionError]


class TagResourceRequest(BaseModel):
    ResourceArn: GlueResourceArn
    TagsToAdd: TagsMap


class TaskRunFilterCriteria(BaseModel):
    StartedAfter: Optional[Timestamp] = None
    StartedBefore: Optional[Timestamp] = None
    Status: Optional[TaskStatusType] = None
    TaskRunType: Optional[TaskType] = None


class TaskRunProperties(BaseModel):
    ExportLabelsTaskRunProperties_1: Optional[ExportLabelsTaskRunProperties] = Field(
        None, alias='ExportLabelsTaskRunProperties'
    )
    FindMatchesTaskRunProperties_1: Optional[FindMatchesTaskRunProperties] = Field(
        None, alias='FindMatchesTaskRunProperties'
    )
    ImportLabelsTaskRunProperties_1: Optional[ImportLabelsTaskRunProperties] = Field(
        None, alias='ImportLabelsTaskRunProperties'
    )
    LabelingSetGenerationTaskRunProperties_1: Optional[
        LabelingSetGenerationTaskRunProperties
    ] = Field(None, alias='LabelingSetGenerationTaskRunProperties')
    TaskType_1: Optional[TaskType] = Field(None, alias='TaskType')


class TransformConfigParameter(BaseModel):
    IsOptional: Optional[BoxedBoolean] = None
    ListType: Optional[ParamType] = None
    Name: EnclosedInStringProperty
    Type: ParamType
    ValidationMessage: Optional[EnclosedInStringProperty] = None
    ValidationRule: Optional[EnclosedInStringProperty] = None
    Value: Optional[EnclosedInStringProperties] = None


class TransformConfigParameterList(RootModel[List[TransformConfigParameter]]):
    root: List[TransformConfigParameter]


class TransformEncryption(BaseModel):
    MlUserDataEncryption: Optional[MLUserDataEncryption] = None
    TaskRunSecurityConfigurationName: Optional[NameString] = None


class TransformFilterCriteria(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    GlueVersion: Optional[GlueVersionString] = None
    LastModifiedAfter: Optional[Timestamp] = None
    LastModifiedBefore: Optional[Timestamp] = None
    Name: Optional[NameString] = None
    Schema: Optional[TransformSchema] = None
    Status: Optional[TransformStatusType] = None
    TransformType_1: Optional[TransformType] = Field(None, alias='TransformType')


class TransformParameters(BaseModel):
    FindMatchesParameters_1: Optional[FindMatchesParameters] = Field(
        None, alias='FindMatchesParameters'
    )
    TransformType_1: TransformType = Field(..., alias='TransformType')


class Union(BaseModel):
    Inputs: TwoInputs
    Name: NodeName
    UnionType_1: UnionType = Field(..., alias='UnionType')


class UpdateCsvClassifierRequest(BaseModel):
    AllowSingleColumn: Optional[NullableBoolean] = None
    ContainsHeader: Optional[CsvHeaderOption] = None
    CustomDatatypeConfigured: Optional[NullableBoolean] = None
    CustomDatatypes_1: Optional[CustomDatatypes] = Field(None, alias='CustomDatatypes')
    Delimiter: Optional[CsvColumnDelimiter] = None
    DisableValueTrimming: Optional[NullableBoolean] = None
    Header: Optional[CsvHeader] = None
    Name: NameString
    QuoteSymbol: Optional[CsvQuoteSymbol] = None


class UpdateDevEndpointRequest(BaseModel):
    AddArguments: Optional[MapValue] = None
    AddPublicKeys: Optional[PublicKeysList] = None
    CustomLibraries: Optional[DevEndpointCustomLibraries] = None
    DeleteArguments: Optional[StringList] = None
    DeletePublicKeys: Optional[PublicKeysList] = None
    EndpointName: GenericString
    PublicKey: Optional[GenericString] = None
    UpdateEtlLibraries: Optional[BooleanValue] = None


class UpdateMLTransformRequest(BaseModel):
    Description: Optional[DescriptionString] = None
    GlueVersion: Optional[GlueVersionString] = None
    MaxCapacity: Optional[NullableDouble] = None
    MaxRetries: Optional[NullableInteger] = None
    Name: Optional[NameString] = None
    NumberOfWorkers: Optional[NullableInteger] = None
    Parameters: Optional[TransformParameters] = None
    Role: Optional[RoleString] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    TransformId: HashString
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class UpdateRegistryInput(BaseModel):
    Description: DescriptionString
    RegistryId_1: RegistryId = Field(..., alias='RegistryId')


class UpdateSchemaInput(BaseModel):
    Compatibility_1: Optional[Compatibility] = Field(None, alias='Compatibility')
    Description: Optional[DescriptionString] = None
    SchemaId_1: SchemaId = Field(..., alias='SchemaId')
    SchemaVersionNumber_1: Optional[SchemaVersionNumber] = Field(
        None, alias='SchemaVersionNumber'
    )


class UpdateWorkflowRequest(BaseModel):
    DefaultRunProperties: Optional[WorkflowRunProperties] = None
    Description: Optional[GenericString] = None
    MaxConcurrentRuns: Optional[NullableInteger] = None
    Name: NameString


class UpsertRedshiftTargetOptions(BaseModel):
    ConnectionName: Optional[EnclosedInStringProperty] = None
    TableLocation: Optional[EnclosedInStringProperty] = None
    UpsertKeys: Optional[EnclosedInStringPropertiesMinOne] = None


class UserDefinedFunction(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ClassName: Optional[NameString] = None
    CreateTime: Optional[Timestamp] = None
    DatabaseName: Optional[NameString] = None
    FunctionName: Optional[NameString] = None
    OwnerName: Optional[NameString] = None
    OwnerType: Optional[PrincipalType] = None
    ResourceUris: Optional[ResourceUriList] = None


class UserDefinedFunctionInput(BaseModel):
    ClassName: Optional[NameString] = None
    FunctionName: Optional[NameString] = None
    OwnerName: Optional[NameString] = None
    OwnerType: Optional[PrincipalType] = None
    ResourceUris: Optional[ResourceUriList] = None


class UserDefinedFunctionList(RootModel[List[UserDefinedFunction]]):
    root: List[UserDefinedFunction]


class Action(BaseModel):
    Arguments: Optional[GenericMap] = None
    CrawlerName: Optional[NameString] = None
    JobName: Optional[NameString] = None
    NotificationProperty_1: Optional[NotificationProperty] = Field(
        None, alias='NotificationProperty'
    )
    SecurityConfiguration: Optional[NameString] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')


class ActionList(RootModel[List[Action]]):
    root: List[Action]


class AggregateOperation(BaseModel):
    AggFunc: AggFunction
    Column: EnclosedInStringProperties


class AggregateOperations(RootModel[List[AggregateOperation]]):
    root: List[AggregateOperation] = Field(..., max_length=30, min_length=1)


class AthenaConnectorSource(BaseModel):
    ConnectionName: EnclosedInStringProperty
    ConnectionTable: Optional[EnclosedInStringPropertyWithQuote] = None
    ConnectionType: EnclosedInStringProperty
    ConnectorName: EnclosedInStringProperty
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    SchemaName: EnclosedInStringProperty


class BackfillErroredPartitionsList(RootModel[List[PartitionValueList]]):
    root: List[PartitionValueList]


class BatchCreatePartitionResponse(BaseModel):
    Errors: Optional[PartitionErrors] = None


class BatchDeleteConnectionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ConnectionNameList: DeleteConnectionNameList


class BatchDeletePartitionResponse(BaseModel):
    Errors: Optional[PartitionErrors] = None


class BatchDeletePartitionValueList(RootModel[List[PartitionValueList]]):
    root: List[PartitionValueList] = Field(..., max_length=25, min_length=0)


class BatchDeleteTableResponse(BaseModel):
    Errors: Optional[TableErrors] = None


class BatchDeleteTableVersionResponse(BaseModel):
    Errors: Optional[TableVersionErrors] = None


class BatchGetCrawlersRequest(BaseModel):
    CrawlerNames: CrawlerNameList


class BatchGetCustomEntityTypesRequest(BaseModel):
    Names: CustomEntityTypeNames


class BatchGetCustomEntityTypesResponse(BaseModel):
    CustomEntityTypes_1: Optional[CustomEntityTypes] = Field(
        None, alias='CustomEntityTypes'
    )
    CustomEntityTypesNotFound: Optional[CustomEntityTypeNames] = None


class BatchGetDataQualityResultRequest(BaseModel):
    ResultIds: DataQualityResultIds


class BatchGetDevEndpointsRequest(BaseModel):
    DevEndpointNames_1: DevEndpointNames = Field(..., alias='DevEndpointNames')


class BatchGetDevEndpointsResponse(BaseModel):
    DevEndpoints: Optional[DevEndpointList] = None
    DevEndpointsNotFound: Optional[DevEndpointNames] = None


class BatchGetJobsRequest(BaseModel):
    JobNames: JobNameList


class BatchGetPartitionValueList(RootModel[List[PartitionValueList]]):
    root: List[PartitionValueList] = Field(..., max_length=1000, min_length=0)


class BatchStopJobRunError(BaseModel):
    ErrorDetail_1: Optional[ErrorDetail] = Field(None, alias='ErrorDetail')
    JobName: Optional[NameString] = None
    JobRunId: Optional[IdString] = None


class BatchStopJobRunErrorList(RootModel[List[BatchStopJobRunError]]):
    root: List[BatchStopJobRunError]


class BatchStopJobRunResponse(BaseModel):
    Errors: Optional[BatchStopJobRunErrorList] = None
    SuccessfulSubmissions: Optional[BatchStopJobRunSuccessfulSubmissionList] = None


class BatchUpdatePartitionFailureEntry(BaseModel):
    ErrorDetail_1: Optional[ErrorDetail] = Field(None, alias='ErrorDetail')
    PartitionValueList: Optional[BoundedPartitionValueList] = None


class BatchUpdatePartitionFailureList(
    RootModel[List[BatchUpdatePartitionFailureEntry]]
):
    root: List[BatchUpdatePartitionFailureEntry]


class BatchUpdatePartitionResponse(BaseModel):
    Errors: Optional[BatchUpdatePartitionFailureList] = None


class Blueprint(BaseModel):
    BlueprintLocation: Optional[GenericString] = None
    BlueprintServiceLocation: Optional[GenericString] = None
    CreatedOn: Optional[TimestampValue] = None
    Description: Optional[Generic512CharString] = None
    ErrorMessage: Optional[ErrorString] = None
    LastActiveDefinition_1: Optional[LastActiveDefinition] = Field(
        None, alias='LastActiveDefinition'
    )
    LastModifiedOn: Optional[TimestampValue] = None
    Name: Optional[OrchestrationNameString] = None
    ParameterSpec: Optional[BlueprintParameterSpec] = None
    Status: Optional[BlueprintStatus] = None


class Blueprints(RootModel[List[Blueprint]]):
    root: List[Blueprint]


class CatalogDeltaSource(BaseModel):
    AdditionalDeltaOptions: Optional[AdditionalOptions] = None
    Database: EnclosedInStringProperty
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    Table: EnclosedInStringProperty


class CatalogEntries(RootModel[List[CatalogEntry]]):
    root: List[CatalogEntry]


class CatalogHudiSource(BaseModel):
    AdditionalHudiOptions: Optional[AdditionalOptions] = None
    Database: EnclosedInStringProperty
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None
    Table: EnclosedInStringProperty


class CatalogKinesisSource(BaseModel):
    DataPreviewOptions: Optional[StreamingDataPreviewOptions] = None
    Database: EnclosedInStringProperty
    DetectSchema: Optional[BoxedBoolean] = None
    Name: NodeName
    StreamingOptions: Optional[KinesisStreamingSourceOptions] = None
    Table: EnclosedInStringProperty
    WindowSize: Optional[BoxedPositiveInt] = None


class Column(BaseModel):
    Comment: Optional[CommentString] = None
    Name: NameString
    Parameters: Optional[ParametersMap] = None
    Type: Optional[ColumnTypeString] = None


class ColumnError(BaseModel):
    ColumnName: Optional[NameString] = None
    Error: Optional[ErrorDetail] = None


class ColumnErrors(RootModel[List[ColumnError]]):
    root: List[ColumnError]


class ColumnList(RootModel[List[Column]]):
    root: List[Column]


class Connection(BaseModel):
    ConnectionProperties_1: Optional[ConnectionProperties] = Field(
        None, alias='ConnectionProperties'
    )
    ConnectionType_1: Optional[ConnectionType] = Field(None, alias='ConnectionType')
    CreationTime: Optional[Timestamp] = None
    Description: Optional[DescriptionString] = None
    LastUpdatedBy: Optional[NameString] = None
    LastUpdatedTime: Optional[Timestamp] = None
    MatchCriteria_1: Optional[MatchCriteria] = Field(None, alias='MatchCriteria')
    Name: Optional[NameString] = None
    PhysicalConnectionRequirements_1: Optional[PhysicalConnectionRequirements] = Field(
        None, alias='PhysicalConnectionRequirements'
    )


class ConnectionInput(BaseModel):
    ConnectionProperties_1: ConnectionProperties = Field(
        ..., alias='ConnectionProperties'
    )
    ConnectionType_1: ConnectionType = Field(..., alias='ConnectionType')
    Description: Optional[DescriptionString] = None
    MatchCriteria_1: Optional[MatchCriteria] = Field(None, alias='MatchCriteria')
    Name: NameString
    PhysicalConnectionRequirements_1: Optional[PhysicalConnectionRequirements] = Field(
        None, alias='PhysicalConnectionRequirements'
    )


class ConnectionList(RootModel[List[Connection]]):
    root: List[Connection]


class CrawlerTargets(BaseModel):
    CatalogTargets: Optional[CatalogTargetList] = None
    DeltaTargets: Optional[DeltaTargetList] = None
    DynamoDBTargets: Optional[DynamoDBTargetList] = None
    JdbcTargets: Optional[JdbcTargetList] = None
    MongoDBTargets: Optional[MongoDBTargetList] = None
    S3Targets: Optional[S3TargetList] = None


class CreateConnectionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ConnectionInput_1: ConnectionInput = Field(..., alias='ConnectionInput')
    Tags: Optional[TagsMap] = None


class CreateCrawlerRequest(BaseModel):
    Classifiers: Optional[ClassifierNameList] = None
    Configuration: Optional[CrawlerConfiguration] = None
    CrawlerSecurityConfiguration_1: Optional[CrawlerSecurityConfiguration] = Field(
        None, alias='CrawlerSecurityConfiguration'
    )
    DatabaseName_1: Optional[DatabaseName] = Field(None, alias='DatabaseName')
    Description: Optional[DescriptionString] = None
    LakeFormationConfiguration_1: Optional[LakeFormationConfiguration] = Field(
        None, alias='LakeFormationConfiguration'
    )
    LineageConfiguration_1: Optional[LineageConfiguration] = Field(
        None, alias='LineageConfiguration'
    )
    Name: NameString
    RecrawlPolicy_1: Optional[RecrawlPolicy] = Field(None, alias='RecrawlPolicy')
    Role_1: Role = Field(..., alias='Role')
    Schedule: Optional[CronExpression] = None
    SchemaChangePolicy_1: Optional[SchemaChangePolicy] = Field(
        None, alias='SchemaChangePolicy'
    )
    TablePrefix_1: Optional[TablePrefix] = Field(None, alias='TablePrefix')
    Tags: Optional[TagsMap] = None
    Targets: CrawlerTargets


class CreateCsvClassifierRequest(BaseModel):
    AllowSingleColumn: Optional[NullableBoolean] = None
    ContainsHeader: Optional[CsvHeaderOption] = None
    CustomDatatypeConfigured: Optional[NullableBoolean] = None
    CustomDatatypes_1: Optional[CustomDatatypes] = Field(None, alias='CustomDatatypes')
    Delimiter: Optional[CsvColumnDelimiter] = None
    DisableValueTrimming: Optional[NullableBoolean] = None
    Header: Optional[CsvHeader] = None
    Name: NameString
    QuoteSymbol: Optional[CsvQuoteSymbol] = None


class CreateDataQualityRulesetRequest(BaseModel):
    ClientToken: Optional[HashString] = None
    Description: Optional[DescriptionString] = None
    Name: NameString
    Ruleset: DataQualityRulesetString
    Tags: Optional[TagsMap] = None
    TargetTable: Optional[DataQualityTargetTable] = None


class CreateMLTransformRequest(BaseModel):
    Description: Optional[DescriptionString] = None
    GlueVersion: Optional[GlueVersionString] = None
    InputRecordTables: GlueTables
    MaxCapacity: Optional[NullableDouble] = None
    MaxRetries: Optional[NullableInteger] = None
    Name: NameString
    NumberOfWorkers: Optional[NullableInteger] = None
    Parameters: TransformParameters
    Role: RoleString
    Tags: Optional[TagsMap] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    TransformEncryption_1: Optional[TransformEncryption] = Field(
        None, alias='TransformEncryption'
    )
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class CreatePartitionIndexRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    PartitionIndex_1: PartitionIndex = Field(..., alias='PartitionIndex')
    TableName: NameString


class CreateSchemaInput(BaseModel):
    Compatibility_1: Optional[Compatibility] = Field(None, alias='Compatibility')
    DataFormat_1: DataFormat = Field(..., alias='DataFormat')
    Description: Optional[DescriptionString] = None
    RegistryId_1: Optional[RegistryId] = Field(None, alias='RegistryId')
    SchemaDefinition: Optional[SchemaDefinitionString] = None
    SchemaName: SchemaRegistryNameString
    Tags: Optional[TagsMap] = None


class CreateScriptRequest(BaseModel):
    DagEdges_1: Optional[DagEdges] = Field(None, alias='DagEdges')
    DagNodes_1: Optional[DagNodes] = Field(None, alias='DagNodes')
    Language_1: Optional[Language] = Field(None, alias='Language')


class CreateSessionRequest(BaseModel):
    Command: SessionCommand
    Connections: Optional[ConnectionsList] = None
    DefaultArguments: Optional[OrchestrationArgumentsMap] = None
    Description: Optional[DescriptionString] = None
    GlueVersion: Optional[GlueVersionString] = None
    Id: NameString
    IdleTimeout: Optional[Timeout] = None
    MaxCapacity: Optional[NullableDouble] = None
    NumberOfWorkers: Optional[NullableInteger] = None
    RequestOrigin: Optional[OrchestrationNameString] = None
    Role: OrchestrationRoleArn
    SecurityConfiguration: Optional[NameString] = None
    Tags: Optional[TagsMap] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class CreateSessionResponse(BaseModel):
    Session_1: Optional[Session] = Field(None, alias='Session')


class CreateTriggerRequest(BaseModel):
    Actions: ActionList
    Description: Optional[DescriptionString] = None
    EventBatchingCondition_1: Optional[EventBatchingCondition] = Field(
        None, alias='EventBatchingCondition'
    )
    Name: NameString
    Predicate_1: Optional[Predicate] = Field(None, alias='Predicate')
    Schedule: Optional[GenericString] = None
    StartOnCreation: Optional[BooleanValue] = None
    Tags: Optional[TagsMap] = None
    Type: TriggerType
    WorkflowName: Optional[NameString] = None


class CreateUserDefinedFunctionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    FunctionInput: UserDefinedFunctionInput


class CsvClassifier(BaseModel):
    AllowSingleColumn: Optional[NullableBoolean] = None
    ContainsHeader: Optional[CsvHeaderOption] = None
    CreationTime: Optional[Timestamp] = None
    CustomDatatypeConfigured: Optional[NullableBoolean] = None
    CustomDatatypes_1: Optional[CustomDatatypes] = Field(None, alias='CustomDatatypes')
    Delimiter: Optional[CsvColumnDelimiter] = None
    DisableValueTrimming: Optional[NullableBoolean] = None
    Header: Optional[CsvHeader] = None
    LastUpdated: Optional[Timestamp] = None
    Name: NameString
    QuoteSymbol: Optional[CsvQuoteSymbol] = None
    Version: Optional[VersionId] = None


class CustomCode(BaseModel):
    ClassName: EnclosedInStringProperty
    Code: ExtendedString
    Inputs: ManyInputs
    Name: NodeName
    OutputSchemas: Optional[GlueSchemas] = None


class DataCatalogEncryptionSettings(BaseModel):
    ConnectionPasswordEncryption_1: Optional[ConnectionPasswordEncryption] = Field(
        None, alias='ConnectionPasswordEncryption'
    )
    EncryptionAtRest_1: Optional[EncryptionAtRest] = Field(
        None, alias='EncryptionAtRest'
    )


class DataQualityRulesetFilterCriteria(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    Description: Optional[DescriptionString] = None
    LastModifiedAfter: Optional[Timestamp] = None
    LastModifiedBefore: Optional[Timestamp] = None
    Name: Optional[NameString] = None
    TargetTable: Optional[DataQualityTargetTable] = None


class DataQualityRulesetListDetails(BaseModel):
    CreatedOn: Optional[Timestamp] = None
    Description: Optional[DescriptionString] = None
    LastModifiedOn: Optional[Timestamp] = None
    Name: Optional[NameString] = None
    RecommendationRunId: Optional[HashString] = None
    RuleCount: Optional[NullableInteger] = None
    TargetTable: Optional[DataQualityTargetTable] = None


class DataSource(BaseModel):
    GlueTable_1: GlueTable = Field(..., alias='GlueTable')


class Database(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    CreateTableDefaultPermissions: Optional[PrincipalPermissionsList] = None
    CreateTime: Optional[Timestamp] = None
    Description: Optional[DescriptionString] = None
    FederatedDatabase_1: Optional[FederatedDatabase] = Field(
        None, alias='FederatedDatabase'
    )
    LocationUri: Optional[URI] = None
    Name: NameString
    Parameters: Optional[ParametersMap] = None
    TargetDatabase: Optional[DatabaseIdentifier] = None


class DatabaseInput(BaseModel):
    CreateTableDefaultPermissions: Optional[PrincipalPermissionsList] = None
    Description: Optional[DescriptionString] = None
    FederatedDatabase_1: Optional[FederatedDatabase] = Field(
        None, alias='FederatedDatabase'
    )
    LocationUri: Optional[URI] = None
    Name: NameString
    Parameters: Optional[ParametersMap] = None
    TargetDatabase: Optional[DatabaseIdentifier] = None


class DatabaseList(RootModel[List[Database]]):
    root: List[Database]


class DecimalColumnStatisticsData(BaseModel):
    MaximumValue: Optional[DecimalNumber] = None
    MinimumValue: Optional[DecimalNumber] = None
    NumberOfDistinctValues: NonNegativeLong
    NumberOfNulls: NonNegativeLong


class DeleteRegistryInput(BaseModel):
    RegistryId_1: RegistryId = Field(..., alias='RegistryId')


class DeleteSchemaInput(BaseModel):
    SchemaId_1: SchemaId = Field(..., alias='SchemaId')


class DeleteSchemaVersionsInput(BaseModel):
    SchemaId_1: SchemaId = Field(..., alias='SchemaId')
    Versions: VersionsString


class DeleteSchemaVersionsResponse(BaseModel):
    SchemaVersionErrors: Optional[SchemaVersionErrorList] = None


class DirectKinesisSource(BaseModel):
    DataPreviewOptions: Optional[StreamingDataPreviewOptions] = None
    DetectSchema: Optional[BoxedBoolean] = None
    Name: NodeName
    StreamingOptions: Optional[KinesisStreamingSourceOptions] = None
    WindowSize: Optional[BoxedPositiveInt] = None


class DropDuplicates(BaseModel):
    Columns: Optional[LimitedPathList] = None
    Inputs: OneInput
    Name: NodeName


class DropFields(BaseModel):
    Inputs: OneInput
    Name: NodeName
    Paths: GlueStudioPathList


class DropNullFields(BaseModel):
    Inputs: OneInput
    Name: NodeName
    NullCheckBoxList_1: Optional[NullCheckBoxList] = Field(
        None, alias='NullCheckBoxList'
    )
    NullTextList: Optional[NullValueFields] = None


class DynamicTransform(BaseModel):
    FunctionName: EnclosedInStringProperty
    Inputs: OneInput
    Name: EnclosedInStringProperty
    Parameters: Optional[TransformConfigParameterList] = None
    Path: EnclosedInStringProperty
    TransformName: EnclosedInStringProperty
    Version: Optional[EnclosedInStringProperty] = None


class EncryptionConfiguration(BaseModel):
    CloudWatchEncryption_1: Optional[CloudWatchEncryption] = Field(
        None, alias='CloudWatchEncryption'
    )
    JobBookmarksEncryption_1: Optional[JobBookmarksEncryption] = Field(
        None, alias='JobBookmarksEncryption'
    )
    S3Encryption: Optional[S3EncryptionList] = None


class ErrorByName(RootModel[Optional[Dict[str, ErrorDetail]]]):
    root: Optional[Dict[str, ErrorDetail]] = None


class EvaluationMetrics(BaseModel):
    FindMatchesMetrics_1: Optional[FindMatchesMetrics] = Field(
        None, alias='FindMatchesMetrics'
    )
    TransformType_1: TransformType = Field(..., alias='TransformType')


class FilterExpression(BaseModel):
    Negated: Optional[BoxedBoolean] = None
    Operation: FilterOperation
    Values: FilterValues


class FilterExpressions(RootModel[List[FilterExpression]]):
    root: List[FilterExpression]


class GetBlueprintResponse(BaseModel):
    Blueprint_1: Optional[Blueprint] = Field(None, alias='Blueprint')


class GetConnectionResponse(BaseModel):
    Connection_1: Optional[Connection] = Field(None, alias='Connection')


class GetConnectionsFilter(BaseModel):
    ConnectionType_1: Optional[ConnectionType] = Field(None, alias='ConnectionType')
    MatchCriteria_1: Optional[MatchCriteria] = Field(None, alias='MatchCriteria')


class GetConnectionsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Filter: Optional[GetConnectionsFilter] = None
    HidePassword: Optional[Boolean] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None


class GetConnectionsResponse(BaseModel):
    ConnectionList_1: Optional[ConnectionList] = Field(None, alias='ConnectionList')
    NextToken: Optional[Token] = None


class GetDataCatalogEncryptionSettingsResponse(BaseModel):
    DataCatalogEncryptionSettings_1: Optional[DataCatalogEncryptionSettings] = Field(
        None, alias='DataCatalogEncryptionSettings'
    )


class GetDataQualityResultResponse(BaseModel):
    CompletedOn: Optional[Timestamp] = None
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    EvaluationContext: Optional[GenericString] = None
    JobName: Optional[NameString] = None
    JobRunId: Optional[HashString] = None
    ResultId: Optional[HashString] = None
    RuleResults: Optional[DataQualityRuleResults] = None
    RulesetEvaluationRunId: Optional[HashString] = None
    RulesetName: Optional[NameString] = None
    Score: Optional[GenericBoundedDouble] = None
    StartedOn: Optional[Timestamp] = None


class GetDataQualityRuleRecommendationRunResponse(BaseModel):
    CompletedOn: Optional[Timestamp] = None
    CreatedRulesetName: Optional[NameString] = None
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    ErrorString: Optional[GenericString] = None
    ExecutionTime_1: Optional[ExecutionTime] = Field(None, alias='ExecutionTime')
    LastModifiedOn: Optional[Timestamp] = None
    NumberOfWorkers: Optional[NullableInteger] = None
    RecommendedRuleset: Optional[DataQualityRulesetString] = None
    Role: Optional[RoleString] = None
    RunId: Optional[HashString] = None
    StartedOn: Optional[Timestamp] = None
    Status: Optional[TaskStatusType] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')


class GetDataQualityRulesetEvaluationRunResponse(BaseModel):
    AdditionalRunOptions: Optional[DataQualityEvaluationRunAdditionalRunOptions] = None
    CompletedOn: Optional[Timestamp] = None
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    ErrorString: Optional[GenericString] = None
    ExecutionTime_1: Optional[ExecutionTime] = Field(None, alias='ExecutionTime')
    LastModifiedOn: Optional[Timestamp] = None
    NumberOfWorkers: Optional[NullableInteger] = None
    ResultIds: Optional[DataQualityResultIdList] = None
    Role: Optional[RoleString] = None
    RulesetNames_1: Optional[RulesetNames] = Field(None, alias='RulesetNames')
    RunId: Optional[HashString] = None
    StartedOn: Optional[Timestamp] = None
    Status: Optional[TaskStatusType] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')


class GetDatabaseResponse(BaseModel):
    Database_1: Optional[Database] = Field(None, alias='Database')


class GetDatabasesResponse(BaseModel):
    DatabaseList_1: DatabaseList = Field(..., alias='DatabaseList')
    NextToken: Optional[Token] = None


class GetJobBookmarkResponse(BaseModel):
    JobBookmarkEntry_1: Optional[JobBookmarkEntry] = Field(
        None, alias='JobBookmarkEntry'
    )


class GetMLTaskRunResponse(BaseModel):
    CompletedOn: Optional[Timestamp] = None
    ErrorString: Optional[GenericString] = None
    ExecutionTime_1: Optional[ExecutionTime] = Field(None, alias='ExecutionTime')
    LastModifiedOn: Optional[Timestamp] = None
    LogGroupName: Optional[GenericString] = None
    Properties: Optional[TaskRunProperties] = None
    StartedOn: Optional[Timestamp] = None
    Status: Optional[TaskStatusType] = None
    TaskRunId: Optional[HashString] = None
    TransformId: Optional[HashString] = None


class GetMLTaskRunsRequest(BaseModel):
    Filter: Optional[TaskRunFilterCriteria] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None
    Sort: Optional[TaskRunSortCriteria] = None
    TransformId: HashString


class GetMLTransformResponse(BaseModel):
    CreatedOn: Optional[Timestamp] = None
    Description: Optional[DescriptionString] = None
    EvaluationMetrics_1: Optional[EvaluationMetrics] = Field(
        None, alias='EvaluationMetrics'
    )
    GlueVersion: Optional[GlueVersionString] = None
    InputRecordTables: Optional[GlueTables] = None
    LabelCount_1: Optional[LabelCount] = Field(None, alias='LabelCount')
    LastModifiedOn: Optional[Timestamp] = None
    MaxCapacity: Optional[NullableDouble] = None
    MaxRetries: Optional[NullableInteger] = None
    Name: Optional[NameString] = None
    NumberOfWorkers: Optional[NullableInteger] = None
    Parameters: Optional[TransformParameters] = None
    Role: Optional[RoleString] = None
    Schema: Optional[TransformSchema] = None
    Status: Optional[TransformStatusType] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    TransformEncryption_1: Optional[TransformEncryption] = Field(
        None, alias='TransformEncryption'
    )
    TransformId: Optional[HashString] = None
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class GetMLTransformsRequest(BaseModel):
    Filter: Optional[TransformFilterCriteria] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None
    Sort: Optional[TransformSortCriteria] = None


class GetMappingRequest(BaseModel):
    Location_1: Optional[Location] = Field(None, alias='Location')
    Sinks: Optional[CatalogEntries] = None
    Source: CatalogEntry


class GetMappingResponse(BaseModel):
    Mapping: MappingList


class GetPartitionsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    ExcludeColumnSchema: Optional[BooleanNullable] = None
    Expression: Optional[PredicateString] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None
    QueryAsOfTime: Optional[Timestamp] = None
    Segment_1: Optional[Segment] = Field(None, alias='Segment')
    TableName: NameString
    TransactionId: Optional[TransactionIdString] = None


class GetPlanRequest(BaseModel):
    AdditionalPlanOptionsMap_1: Optional[AdditionalPlanOptionsMap] = Field(
        None, alias='AdditionalPlanOptionsMap'
    )
    Language_1: Optional[Language] = Field(None, alias='Language')
    Location_1: Optional[Location] = Field(None, alias='Location')
    Mapping: MappingList
    Sinks: Optional[CatalogEntries] = None
    Source: CatalogEntry


class GetRegistryInput(BaseModel):
    RegistryId_1: RegistryId = Field(..., alias='RegistryId')


class GetResourcePoliciesResponseList(RootModel[List[GluePolicy]]):
    root: List[GluePolicy]


class GetSchemaByDefinitionInput(BaseModel):
    SchemaDefinition: SchemaDefinitionString
    SchemaId_1: SchemaId = Field(..., alias='SchemaId')


class GetSchemaInput(BaseModel):
    SchemaId_1: SchemaId = Field(..., alias='SchemaId')


class GetSchemaVersionInput(BaseModel):
    SchemaId_1: Optional[SchemaId] = Field(None, alias='SchemaId')
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    SchemaVersionNumber_1: Optional[SchemaVersionNumber] = Field(
        None, alias='SchemaVersionNumber'
    )


class GetSchemaVersionsDiffInput(BaseModel):
    FirstSchemaVersionNumber: SchemaVersionNumber
    SchemaDiffType_1: SchemaDiffType = Field(..., alias='SchemaDiffType')
    SchemaId_1: SchemaId = Field(..., alias='SchemaId')
    SecondSchemaVersionNumber: SchemaVersionNumber


class GetSessionResponse(BaseModel):
    Session_1: Optional[Session] = Field(None, alias='Session')


class GetUnfilteredPartitionsMetadataRequest(BaseModel):
    AuditContext_1: Optional[AuditContext] = Field(None, alias='AuditContext')
    CatalogId: CatalogIdString
    DatabaseName: NameString
    Expression: Optional[PredicateString] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None
    Segment_1: Optional[Segment] = Field(None, alias='Segment')
    SupportedPermissionTypes: PermissionTypeList
    TableName: NameString


class GetUserDefinedFunctionResponse(BaseModel):
    UserDefinedFunction_1: Optional[UserDefinedFunction] = Field(
        None, alias='UserDefinedFunction'
    )


class GetUserDefinedFunctionsResponse(BaseModel):
    NextToken: Optional[Token] = None
    UserDefinedFunctions: Optional[UserDefinedFunctionList] = None


class JobRun(BaseModel):
    AllocatedCapacity: Optional[IntegerValue] = None
    Arguments: Optional[GenericMap] = None
    Attempt: Optional[AttemptCount] = None
    CompletedOn: Optional[TimestampValue] = None
    DPUSeconds: Optional[NullableDouble] = None
    ErrorMessage: Optional[ErrorString] = None
    ExecutionClass_1: Optional[ExecutionClass] = Field(None, alias='ExecutionClass')
    ExecutionTime_1: Optional[ExecutionTime] = Field(None, alias='ExecutionTime')
    GlueVersion: Optional[GlueVersionString] = None
    Id: Optional[IdString] = None
    JobName: Optional[NameString] = None
    JobRunState_1: Optional[JobRunState] = Field(None, alias='JobRunState')
    LastModifiedOn: Optional[TimestampValue] = None
    LogGroupName: Optional[GenericString] = None
    MaxCapacity: Optional[NullableDouble] = None
    NotificationProperty_1: Optional[NotificationProperty] = Field(
        None, alias='NotificationProperty'
    )
    NumberOfWorkers: Optional[NullableInteger] = None
    PredecessorRuns: Optional[PredecessorList] = None
    PreviousRunId: Optional[IdString] = None
    SecurityConfiguration: Optional[NameString] = None
    StartedOn: Optional[TimestampValue] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    TriggerName: Optional[NameString] = None
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class JobRunList(RootModel[List[JobRun]]):
    root: List[JobRun]


class Join(BaseModel):
    Columns: JoinColumns
    Inputs: TwoInputs
    JoinType_1: JoinType = Field(..., alias='JoinType')
    Name: NodeName


class ListDataQualityRulesetsRequest(BaseModel):
    Filter: Optional[DataQualityRulesetFilterCriteria] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None
    Tags: Optional[TagsMap] = None


class ListMLTransformsRequest(BaseModel):
    Filter: Optional[TransformFilterCriteria] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None
    Sort: Optional[TransformSortCriteria] = None
    Tags: Optional[TagsMap] = None


class ListSchemaVersionsInput(BaseModel):
    MaxResults: Optional[MaxResultsNumber] = None
    NextToken: Optional[SchemaRegistryTokenString] = None
    SchemaId_1: SchemaId = Field(..., alias='SchemaId')


class ListSchemasInput(BaseModel):
    MaxResults: Optional[MaxResultsNumber] = None
    NextToken: Optional[SchemaRegistryTokenString] = None
    RegistryId_1: Optional[RegistryId] = Field(None, alias='RegistryId')


class ListSessionsResponse(BaseModel):
    Ids: Optional[SessionIdList] = None
    NextToken: Optional[OrchestrationToken] = None
    Sessions: Optional[SessionList] = None


class MLTransform(BaseModel):
    CreatedOn: Optional[Timestamp] = None
    Description: Optional[DescriptionString] = None
    EvaluationMetrics_1: Optional[EvaluationMetrics] = Field(
        None, alias='EvaluationMetrics'
    )
    GlueVersion: Optional[GlueVersionString] = None
    InputRecordTables: Optional[GlueTables] = None
    LabelCount_1: Optional[LabelCount] = Field(None, alias='LabelCount')
    LastModifiedOn: Optional[Timestamp] = None
    MaxCapacity: Optional[NullableDouble] = None
    MaxRetries: Optional[NullableInteger] = None
    Name: Optional[NameString] = None
    NumberOfWorkers: Optional[NullableInteger] = None
    Parameters: Optional[TransformParameters] = None
    Role: Optional[RoleString] = None
    Schema: Optional[TransformSchema] = None
    Status: Optional[TransformStatusType] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    TransformEncryption_1: Optional[TransformEncryption] = Field(
        None, alias='TransformEncryption'
    )
    TransformId: Optional[HashString] = None
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class MetadataInfo(BaseModel):
    CreatedTime: Optional[CreatedTimestamp] = None
    MetadataValue: Optional[MetadataValueString] = None
    OtherMetadataValueList_1: Optional[OtherMetadataValueList] = Field(
        None, alias='OtherMetadataValueList'
    )


class MetadataInfoMap(RootModel[Optional[Dict[str, MetadataInfo]]]):
    root: Optional[Dict[str, MetadataInfo]] = None


class PutDataCatalogEncryptionSettingsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DataCatalogEncryptionSettings_1: DataCatalogEncryptionSettings = Field(
        ..., alias='DataCatalogEncryptionSettings'
    )


class PutSchemaVersionMetadataInput(BaseModel):
    MetadataKeyValue: MetadataKeyValuePair
    SchemaId_1: Optional[SchemaId] = Field(None, alias='SchemaId')
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    SchemaVersionNumber_1: Optional[SchemaVersionNumber] = Field(
        None, alias='SchemaVersionNumber'
    )


class QuerySchemaVersionMetadataInput(BaseModel):
    MaxResults: Optional[QuerySchemaVersionMetadataMaxResults] = None
    MetadataList_1: Optional[MetadataList] = Field(None, alias='MetadataList')
    NextToken: Optional[SchemaRegistryTokenString] = None
    SchemaId_1: Optional[SchemaId] = Field(None, alias='SchemaId')
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    SchemaVersionNumber_1: Optional[SchemaVersionNumber] = Field(
        None, alias='SchemaVersionNumber'
    )


class QuerySchemaVersionMetadataResponse(BaseModel):
    MetadataInfoMap_1: Optional[MetadataInfoMap] = Field(None, alias='MetadataInfoMap')
    NextToken: Optional[SchemaRegistryTokenString] = None
    SchemaVersionId: Optional[SchemaVersionIdString] = None


class RedshiftTarget(BaseModel):
    Database: EnclosedInStringProperty
    Inputs: OneInput
    Name: NodeName
    RedshiftTmpDir: Optional[EnclosedInStringProperty] = None
    Table: EnclosedInStringProperty
    TmpDirIAMRole: Optional[EnclosedInStringProperty] = None
    UpsertRedshiftOptions: Optional[UpsertRedshiftTargetOptions] = None


class RegisterSchemaVersionInput(BaseModel):
    SchemaDefinition: SchemaDefinitionString
    SchemaId_1: SchemaId = Field(..., alias='SchemaId')


class RegistryListDefinition(RootModel[List[RegistryListItem]]):
    root: List[RegistryListItem]


class RemoveSchemaVersionMetadataInput(BaseModel):
    MetadataKeyValue: MetadataKeyValuePair
    SchemaId_1: Optional[SchemaId] = Field(None, alias='SchemaId')
    SchemaVersionId: Optional[SchemaVersionIdString] = None
    SchemaVersionNumber_1: Optional[SchemaVersionNumber] = Field(
        None, alias='SchemaVersionNumber'
    )


class SchemaListDefinition(RootModel[List[SchemaListItem]]):
    root: List[SchemaListItem]


class SchemaVersionList(RootModel[List[SchemaVersionListItem]]):
    root: List[SchemaVersionListItem]


class SecurityConfiguration(BaseModel):
    CreatedTimeStamp: Optional[TimestampValue] = None
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    Name: Optional[NameString] = None


class SecurityConfigurationList(RootModel[List[SecurityConfiguration]]):
    root: List[SecurityConfiguration]


class SortCriteria(RootModel[List[SortCriterion]]):
    root: List[SortCriterion] = Field(..., max_length=1, min_length=0)


class StartDataQualityRuleRecommendationRunRequest(BaseModel):
    ClientToken: Optional[HashString] = None
    CreatedRulesetName: Optional[NameString] = None
    DataSource_1: DataSource = Field(..., alias='DataSource')
    NumberOfWorkers: Optional[NullableInteger] = None
    Role: RoleString
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')


class StartDataQualityRulesetEvaluationRunRequest(BaseModel):
    AdditionalRunOptions: Optional[DataQualityEvaluationRunAdditionalRunOptions] = None
    ClientToken: Optional[HashString] = None
    DataSource_1: DataSource = Field(..., alias='DataSource')
    NumberOfWorkers: Optional[NullableInteger] = None
    Role: RoleString
    RulesetNames_1: RulesetNames = Field(..., alias='RulesetNames')
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')


class Statement(BaseModel):
    Code: Optional[GenericString] = None
    CompletedOn: Optional[LongValue] = None
    Id: Optional[IntegerValue] = None
    Output: Optional[StatementOutput] = None
    Progress: Optional[DoubleValue] = None
    StartedOn: Optional[LongValue] = None
    State: Optional[StatementState] = None


class StatementList(RootModel[List[Statement]]):
    root: List[Statement]


class StorageDescriptor(BaseModel):
    AdditionalLocations: Optional[LocationStringList] = None
    BucketColumns: Optional[NameStringList] = None
    Columns: Optional[ColumnList] = None
    Compressed: Optional[Boolean] = None
    InputFormat: Optional[FormatString] = None
    Location: Optional[LocationString] = None
    NumberOfBuckets: Optional[Integer] = None
    OutputFormat: Optional[FormatString] = None
    Parameters: Optional[ParametersMap] = None
    SchemaReference_1: Optional[SchemaReference] = Field(None, alias='SchemaReference')
    SerdeInfo: Optional[SerDeInfo] = None
    SkewedInfo_1: Optional[SkewedInfo] = Field(None, alias='SkewedInfo')
    SortColumns: Optional[OrderList] = None
    StoredAsSubDirectories: Optional[Boolean] = None


class Table(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    CreateTime: Optional[Timestamp] = None
    CreatedBy: Optional[NameString] = None
    DatabaseName: Optional[NameString] = None
    Description: Optional[DescriptionString] = None
    FederatedTable_1: Optional[FederatedTable] = Field(None, alias='FederatedTable')
    IsRegisteredWithLakeFormation: Optional[Boolean] = None
    LastAccessTime: Optional[Timestamp] = None
    LastAnalyzedTime: Optional[Timestamp] = None
    Name: NameString
    Owner: Optional[NameString] = None
    Parameters: Optional[ParametersMap] = None
    PartitionKeys: Optional[ColumnList] = None
    Retention: Optional[NonNegativeInteger] = None
    StorageDescriptor_1: Optional[StorageDescriptor] = Field(
        None, alias='StorageDescriptor'
    )
    TableType: Optional[TableTypeString] = None
    TargetTable: Optional[TableIdentifier] = None
    UpdateTime: Optional[Timestamp] = None
    VersionId: Optional[VersionString] = None
    ViewExpandedText: Optional[ViewTextString] = None
    ViewOriginalText: Optional[ViewTextString] = None


class TableInput(BaseModel):
    Description: Optional[DescriptionString] = None
    LastAccessTime: Optional[Timestamp] = None
    LastAnalyzedTime: Optional[Timestamp] = None
    Name: NameString
    Owner: Optional[NameString] = None
    Parameters: Optional[ParametersMap] = None
    PartitionKeys: Optional[ColumnList] = None
    Retention: Optional[NonNegativeInteger] = None
    StorageDescriptor_1: Optional[StorageDescriptor] = Field(
        None, alias='StorageDescriptor'
    )
    TableType: Optional[TableTypeString] = None
    TargetTable: Optional[TableIdentifier] = None
    ViewExpandedText: Optional[ViewTextString] = None
    ViewOriginalText: Optional[ViewTextString] = None


class TableList(RootModel[List[Table]]):
    root: List[Table]


class TableVersion(BaseModel):
    Table_1: Optional[Table] = Field(None, alias='Table')
    VersionId: Optional[VersionString] = None


class TaskRun(BaseModel):
    CompletedOn: Optional[Timestamp] = None
    ErrorString: Optional[GenericString] = None
    ExecutionTime_1: Optional[ExecutionTime] = Field(None, alias='ExecutionTime')
    LastModifiedOn: Optional[Timestamp] = None
    LogGroupName: Optional[GenericString] = None
    Properties: Optional[TaskRunProperties] = None
    StartedOn: Optional[Timestamp] = None
    Status: Optional[TaskStatusType] = None
    TaskRunId: Optional[HashString] = None
    TransformId: Optional[HashString] = None


class TaskRunList(RootModel[List[TaskRun]]):
    root: List[TaskRun]


class TransformList(RootModel[List[MLTransform]]):
    root: List[MLTransform]


class Trigger(BaseModel):
    Actions: Optional[ActionList] = None
    Description: Optional[DescriptionString] = None
    EventBatchingCondition_1: Optional[EventBatchingCondition] = Field(
        None, alias='EventBatchingCondition'
    )
    Id: Optional[IdString] = None
    Name: Optional[NameString] = None
    Predicate_1: Optional[Predicate] = Field(None, alias='Predicate')
    Schedule: Optional[GenericString] = None
    State: Optional[TriggerState] = None
    Type: Optional[TriggerType] = None
    WorkflowName: Optional[NameString] = None


class TriggerList(RootModel[List[Trigger]]):
    root: List[Trigger]


class TriggerNodeDetails(BaseModel):
    Trigger_1: Optional[Trigger] = Field(None, alias='Trigger')


class TriggerUpdate(BaseModel):
    Actions: Optional[ActionList] = None
    Description: Optional[DescriptionString] = None
    EventBatchingCondition_1: Optional[EventBatchingCondition] = Field(
        None, alias='EventBatchingCondition'
    )
    Name: Optional[NameString] = None
    Predicate_1: Optional[Predicate] = Field(None, alias='Predicate')
    Schedule: Optional[GenericString] = None


class UpdateClassifierRequest(BaseModel):
    CsvClassifier: Optional[UpdateCsvClassifierRequest] = None
    GrokClassifier: Optional[UpdateGrokClassifierRequest] = None
    JsonClassifier: Optional[UpdateJsonClassifierRequest] = None
    XMLClassifier: Optional[UpdateXMLClassifierRequest] = None


class UpdateConnectionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ConnectionInput_1: ConnectionInput = Field(..., alias='ConnectionInput')
    Name: NameString


class UpdateCrawlerRequest(BaseModel):
    Classifiers: Optional[ClassifierNameList] = None
    Configuration: Optional[CrawlerConfiguration] = None
    CrawlerSecurityConfiguration_1: Optional[CrawlerSecurityConfiguration] = Field(
        None, alias='CrawlerSecurityConfiguration'
    )
    DatabaseName_1: Optional[DatabaseName] = Field(None, alias='DatabaseName')
    Description: Optional[DescriptionStringRemovable] = None
    LakeFormationConfiguration_1: Optional[LakeFormationConfiguration] = Field(
        None, alias='LakeFormationConfiguration'
    )
    LineageConfiguration_1: Optional[LineageConfiguration] = Field(
        None, alias='LineageConfiguration'
    )
    Name: NameString
    RecrawlPolicy_1: Optional[RecrawlPolicy] = Field(None, alias='RecrawlPolicy')
    Role_1: Optional[Role] = Field(None, alias='Role')
    Schedule: Optional[CronExpression] = None
    SchemaChangePolicy_1: Optional[SchemaChangePolicy] = Field(
        None, alias='SchemaChangePolicy'
    )
    TablePrefix_1: Optional[TablePrefix] = Field(None, alias='TablePrefix')
    Targets: Optional[CrawlerTargets] = None


class UpdateDatabaseRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseInput_1: DatabaseInput = Field(..., alias='DatabaseInput')
    Name: NameString


class UpdateTableRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    SkipArchive: Optional[BooleanNullable] = None
    TableInput_1: TableInput = Field(..., alias='TableInput')
    TransactionId: Optional[TransactionIdString] = None
    VersionId: Optional[VersionString] = None


class UpdateTriggerRequest(BaseModel):
    Name: NameString
    TriggerUpdate_1: TriggerUpdate = Field(..., alias='TriggerUpdate')


class UpdateTriggerResponse(BaseModel):
    Trigger_1: Optional[Trigger] = Field(None, alias='Trigger')


class UpdateUserDefinedFunctionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    FunctionInput: UserDefinedFunctionInput
    FunctionName: NameString


class Aggregate(BaseModel):
    Aggs: AggregateOperations
    Groups: GlueStudioPathList
    Inputs: OneInput
    Name: NodeName


class BackfillError(BaseModel):
    Code: Optional[BackfillErrorCode] = None
    Partitions: Optional[BackfillErroredPartitionsList] = None


class BackfillErrors(RootModel[List[BackfillError]]):
    root: List[BackfillError]


class BatchDeleteConnectionResponse(BaseModel):
    Errors: Optional[ErrorByName] = None
    Succeeded: Optional[NameStringList] = None


class BatchDeletePartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    PartitionsToDelete: BatchDeletePartitionValueList
    TableName: NameString


class BatchGetBlueprintsResponse(BaseModel):
    Blueprints_1: Optional[Blueprints] = Field(None, alias='Blueprints')
    MissingBlueprints: Optional[BlueprintNames] = None


class BatchGetPartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    PartitionsToGet: BatchGetPartitionValueList
    TableName: NameString


class BatchGetTriggersResponse(BaseModel):
    Triggers: Optional[TriggerList] = None
    TriggersNotFound: Optional[TriggerNameList] = None


class Classifier(BaseModel):
    CsvClassifier_1: Optional[CsvClassifier] = Field(None, alias='CsvClassifier')
    GrokClassifier_1: Optional[GrokClassifier] = Field(None, alias='GrokClassifier')
    JsonClassifier_1: Optional[JsonClassifier] = Field(None, alias='JsonClassifier')
    XMLClassifier_1: Optional[XMLClassifier] = Field(None, alias='XMLClassifier')


class ClassifierList(RootModel[List[Classifier]]):
    root: List[Classifier]


class ColumnStatisticsData(BaseModel):
    BinaryColumnStatisticsData_1: Optional[BinaryColumnStatisticsData] = Field(
        None, alias='BinaryColumnStatisticsData'
    )
    BooleanColumnStatisticsData_1: Optional[BooleanColumnStatisticsData] = Field(
        None, alias='BooleanColumnStatisticsData'
    )
    DateColumnStatisticsData_1: Optional[DateColumnStatisticsData] = Field(
        None, alias='DateColumnStatisticsData'
    )
    DecimalColumnStatisticsData_1: Optional[DecimalColumnStatisticsData] = Field(
        None, alias='DecimalColumnStatisticsData'
    )
    DoubleColumnStatisticsData_1: Optional[DoubleColumnStatisticsData] = Field(
        None, alias='DoubleColumnStatisticsData'
    )
    LongColumnStatisticsData_1: Optional[LongColumnStatisticsData] = Field(
        None, alias='LongColumnStatisticsData'
    )
    StringColumnStatisticsData_1: Optional[StringColumnStatisticsData] = Field(
        None, alias='StringColumnStatisticsData'
    )
    Type: ColumnStatisticsType


class Crawler(BaseModel):
    Classifiers: Optional[ClassifierNameList] = None
    Configuration: Optional[CrawlerConfiguration] = None
    CrawlElapsedTime: Optional[MillisecondsCount] = None
    CrawlerSecurityConfiguration_1: Optional[CrawlerSecurityConfiguration] = Field(
        None, alias='CrawlerSecurityConfiguration'
    )
    CreationTime: Optional[Timestamp] = None
    DatabaseName_1: Optional[DatabaseName] = Field(None, alias='DatabaseName')
    Description: Optional[DescriptionString] = None
    LakeFormationConfiguration_1: Optional[LakeFormationConfiguration] = Field(
        None, alias='LakeFormationConfiguration'
    )
    LastCrawl: Optional[LastCrawlInfo] = None
    LastUpdated: Optional[Timestamp] = None
    LineageConfiguration_1: Optional[LineageConfiguration] = Field(
        None, alias='LineageConfiguration'
    )
    Name: Optional[NameString] = None
    RecrawlPolicy_1: Optional[RecrawlPolicy] = Field(None, alias='RecrawlPolicy')
    Role_1: Optional[Role] = Field(None, alias='Role')
    Schedule_1: Optional[Schedule] = Field(None, alias='Schedule')
    SchemaChangePolicy_1: Optional[SchemaChangePolicy] = Field(
        None, alias='SchemaChangePolicy'
    )
    State: Optional[CrawlerState] = None
    TablePrefix_1: Optional[TablePrefix] = Field(None, alias='TablePrefix')
    Targets: Optional[CrawlerTargets] = None
    Version: Optional[VersionId] = None


class CrawlerList(RootModel[List[Crawler]]):
    root: List[Crawler]


class CreateClassifierRequest(BaseModel):
    CsvClassifier: Optional[CreateCsvClassifierRequest] = None
    GrokClassifier: Optional[CreateGrokClassifierRequest] = None
    JsonClassifier: Optional[CreateJsonClassifierRequest] = None
    XMLClassifier: Optional[CreateXMLClassifierRequest] = None


class CreateDatabaseRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseInput_1: DatabaseInput = Field(..., alias='DatabaseInput')
    Tags: Optional[TagsMap] = None


class CreateSecurityConfigurationRequest(BaseModel):
    EncryptionConfiguration_1: EncryptionConfiguration = Field(
        ..., alias='EncryptionConfiguration'
    )
    Name: NameString


class CreateTableRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    PartitionIndexes: Optional[PartitionIndexList] = None
    TableInput_1: TableInput = Field(..., alias='TableInput')
    TransactionId: Optional[TransactionIdString] = None


class DataQualityResult(BaseModel):
    CompletedOn: Optional[Timestamp] = None
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    EvaluationContext: Optional[GenericString] = None
    JobName: Optional[NameString] = None
    JobRunId: Optional[HashString] = None
    ResultId: Optional[HashString] = None
    RuleResults: Optional[DataQualityRuleResults] = None
    RulesetEvaluationRunId: Optional[HashString] = None
    RulesetName: Optional[NameString] = None
    Score: Optional[GenericBoundedDouble] = None
    StartedOn: Optional[Timestamp] = None


class DataQualityResultDescription(BaseModel):
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    JobName: Optional[NameString] = None
    JobRunId: Optional[HashString] = None
    ResultId: Optional[HashString] = None
    StartedOn: Optional[Timestamp] = None


class DataQualityResultDescriptionList(RootModel[List[DataQualityResultDescription]]):
    root: List[DataQualityResultDescription]


class DataQualityResultFilterCriteria(BaseModel):
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    JobName: Optional[NameString] = None
    JobRunId: Optional[HashString] = None
    StartedAfter: Optional[Timestamp] = None
    StartedBefore: Optional[Timestamp] = None


class DataQualityResultsList(RootModel[List[DataQualityResult]]):
    root: List[DataQualityResult]


class DataQualityRuleRecommendationRunDescription(BaseModel):
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    RunId: Optional[HashString] = None
    StartedOn: Optional[Timestamp] = None
    Status: Optional[TaskStatusType] = None


class DataQualityRuleRecommendationRunFilter(BaseModel):
    DataSource_1: DataSource = Field(..., alias='DataSource')
    StartedAfter: Optional[Timestamp] = None
    StartedBefore: Optional[Timestamp] = None


class DataQualityRuleRecommendationRunList(
    RootModel[List[DataQualityRuleRecommendationRunDescription]]
):
    root: List[DataQualityRuleRecommendationRunDescription]


class DataQualityRulesetEvaluationRunDescription(BaseModel):
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    RunId: Optional[HashString] = None
    StartedOn: Optional[Timestamp] = None
    Status: Optional[TaskStatusType] = None


class DataQualityRulesetEvaluationRunFilter(BaseModel):
    DataSource_1: DataSource = Field(..., alias='DataSource')
    StartedAfter: Optional[Timestamp] = None
    StartedBefore: Optional[Timestamp] = None


class DataQualityRulesetEvaluationRunList(
    RootModel[List[DataQualityRulesetEvaluationRunDescription]]
):
    root: List[DataQualityRulesetEvaluationRunDescription]


class DataQualityRulesetList(RootModel[List[DataQualityRulesetListDetails]]):
    root: List[DataQualityRulesetListDetails]


class Filter(BaseModel):
    Filters: FilterExpressions
    Inputs: OneInput
    LogicalOperator: FilterLogicalOperator
    Name: NodeName


class GetClassifierResponse(BaseModel):
    Classifier_1: Optional[Classifier] = Field(None, alias='Classifier')


class GetClassifiersResponse(BaseModel):
    Classifiers: Optional[ClassifierList] = None
    NextToken: Optional[Token] = None


class GetCrawlerResponse(BaseModel):
    Crawler_1: Optional[Crawler] = Field(None, alias='Crawler')


class GetCrawlersResponse(BaseModel):
    Crawlers: Optional[CrawlerList] = None
    NextToken: Optional[Token] = None


class GetJobRunResponse(BaseModel):
    JobRun_1: Optional[JobRun] = Field(None, alias='JobRun')


class GetJobRunsResponse(BaseModel):
    JobRuns: Optional[JobRunList] = None
    NextToken: Optional[GenericString] = None


class GetMLTaskRunsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    TaskRuns: Optional[TaskRunList] = None


class GetMLTransformsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Transforms: TransformList


class GetResourcePoliciesResponse(BaseModel):
    GetResourcePoliciesResponseList_1: Optional[GetResourcePoliciesResponseList] = (
        Field(None, alias='GetResourcePoliciesResponseList')
    )
    NextToken: Optional[Token] = None


class GetSecurityConfigurationResponse(BaseModel):
    SecurityConfiguration_1: Optional[SecurityConfiguration] = Field(
        None, alias='SecurityConfiguration'
    )


class GetSecurityConfigurationsResponse(BaseModel):
    NextToken: Optional[GenericString] = None
    SecurityConfigurations: Optional[SecurityConfigurationList] = None


class GetStatementResponse(BaseModel):
    Statement_1: Optional[Statement] = Field(None, alias='Statement')


class GetTableResponse(BaseModel):
    Table_1: Optional[Table] = Field(None, alias='Table')


class GetTableVersionResponse(BaseModel):
    TableVersion_1: Optional[TableVersion] = Field(None, alias='TableVersion')


class GetTableVersionsList(RootModel[List[TableVersion]]):
    root: List[TableVersion]


class GetTableVersionsResponse(BaseModel):
    NextToken: Optional[Token] = None
    TableVersions: Optional[GetTableVersionsList] = None


class GetTablesResponse(BaseModel):
    NextToken: Optional[Token] = None
    TableList_1: Optional[TableList] = Field(None, alias='TableList')


class GetTriggerResponse(BaseModel):
    Trigger_1: Optional[Trigger] = Field(None, alias='Trigger')


class GetTriggersResponse(BaseModel):
    NextToken: Optional[GenericString] = None
    Triggers: Optional[TriggerList] = None


class GetUnfilteredTableMetadataResponse(BaseModel):
    AuthorizedColumns: Optional[NameStringList] = None
    CellFilters: Optional[ColumnRowFilterList] = None
    IsRegisteredWithLakeFormation: Optional[Boolean] = None
    Table_1: Optional[Table] = Field(None, alias='Table')


class JobNodeDetails(BaseModel):
    JobRuns: Optional[JobRunList] = None


class ListDataQualityResultsRequest(BaseModel):
    Filter: Optional[DataQualityResultFilterCriteria] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None


class ListDataQualityResultsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Results: DataQualityResultDescriptionList


class ListDataQualityRuleRecommendationRunsRequest(BaseModel):
    Filter: Optional[DataQualityRuleRecommendationRunFilter] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None


class ListDataQualityRuleRecommendationRunsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Runs: Optional[DataQualityRuleRecommendationRunList] = None


class ListDataQualityRulesetEvaluationRunsRequest(BaseModel):
    Filter: Optional[DataQualityRulesetEvaluationRunFilter] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None


class ListDataQualityRulesetEvaluationRunsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Runs: Optional[DataQualityRulesetEvaluationRunList] = None


class ListDataQualityRulesetsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Rulesets: Optional[DataQualityRulesetList] = None


class ListRegistriesResponse(BaseModel):
    NextToken: Optional[SchemaRegistryTokenString] = None
    Registries: Optional[RegistryListDefinition] = None


class ListSchemaVersionsResponse(BaseModel):
    NextToken: Optional[SchemaRegistryTokenString] = None
    Schemas: Optional[SchemaVersionList] = None


class ListSchemasResponse(BaseModel):
    NextToken: Optional[SchemaRegistryTokenString] = None
    Schemas: Optional[SchemaListDefinition] = None


class ListStatementsResponse(BaseModel):
    NextToken: Optional[OrchestrationToken] = None
    Statements: Optional[StatementList] = None


class Node(BaseModel):
    CrawlerDetails: Optional[CrawlerNodeDetails] = None
    JobDetails: Optional[JobNodeDetails] = None
    Name: Optional[NameString] = None
    TriggerDetails: Optional[TriggerNodeDetails] = None
    Type: Optional[NodeType] = None
    UniqueId: Optional[NameString] = None


class NodeList(RootModel[List[Node]]):
    root: List[Node]


class Partition(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    CreationTime: Optional[Timestamp] = None
    DatabaseName: Optional[NameString] = None
    LastAccessTime: Optional[Timestamp] = None
    LastAnalyzedTime: Optional[Timestamp] = None
    Parameters: Optional[ParametersMap] = None
    StorageDescriptor_1: Optional[StorageDescriptor] = Field(
        None, alias='StorageDescriptor'
    )
    TableName: Optional[NameString] = None
    Values: Optional[ValueStringList] = None


class PartitionIndexDescriptor(BaseModel):
    BackfillErrors_1: Optional[BackfillErrors] = Field(None, alias='BackfillErrors')
    IndexName: NameString
    IndexStatus: PartitionIndexStatus
    Keys: KeySchemaElementList


class PartitionIndexDescriptorList(RootModel[List[PartitionIndexDescriptor]]):
    root: List[PartitionIndexDescriptor]


class PartitionInput(BaseModel):
    LastAccessTime: Optional[Timestamp] = None
    LastAnalyzedTime: Optional[Timestamp] = None
    Parameters: Optional[ParametersMap] = None
    StorageDescriptor_1: Optional[StorageDescriptor] = Field(
        None, alias='StorageDescriptor'
    )
    Values: Optional[ValueStringList] = None


class PartitionInputList(RootModel[List[PartitionInput]]):
    root: List[PartitionInput] = Field(..., max_length=100, min_length=0)


class PartitionList(RootModel[List[Partition]]):
    root: List[Partition]


class SearchTablesRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Filters: Optional[SearchPropertyPredicates] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None
    ResourceShareType_1: Optional[ResourceShareType] = Field(
        None, alias='ResourceShareType'
    )
    SearchText: Optional[ValueString] = None
    SortCriteria_1: Optional[SortCriteria] = Field(None, alias='SortCriteria')


class SearchTablesResponse(BaseModel):
    NextToken: Optional[Token] = None
    TableList_1: Optional[TableList] = Field(None, alias='TableList')


class UnfilteredPartition(BaseModel):
    AuthorizedColumns: Optional[NameStringList] = None
    IsRegisteredWithLakeFormation: Optional[Boolean] = None
    Partition_1: Optional[Partition] = Field(None, alias='Partition')


class UnfilteredPartitionList(RootModel[List[UnfilteredPartition]]):
    root: List[UnfilteredPartition]


class UpdatePartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    PartitionInput_1: PartitionInput = Field(..., alias='PartitionInput')
    PartitionValueList: BoundedPartitionValueList
    TableName: NameString


class WorkflowGraph(BaseModel):
    Edges: Optional[EdgeList] = None
    Nodes: Optional[NodeList] = None


class WorkflowRun(BaseModel):
    CompletedOn: Optional[TimestampValue] = None
    ErrorMessage: Optional[ErrorString] = None
    Graph: Optional[WorkflowGraph] = None
    Name: Optional[NameString] = None
    PreviousRunId: Optional[IdString] = None
    StartedOn: Optional[TimestampValue] = None
    StartingEventBatchCondition_1: Optional[StartingEventBatchCondition] = Field(
        None, alias='StartingEventBatchCondition'
    )
    Statistics: Optional[WorkflowRunStatistics] = None
    Status: Optional[WorkflowRunStatus] = None
    WorkflowRunId: Optional[IdString] = None
    WorkflowRunProperties_1: Optional[WorkflowRunProperties] = Field(
        None, alias='WorkflowRunProperties'
    )


class WorkflowRuns(RootModel[List[WorkflowRun]]):
    root: List[WorkflowRun] = Field(..., max_length=1000, min_length=1)


class BatchCreatePartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    PartitionInputList_1: PartitionInputList = Field(..., alias='PartitionInputList')
    TableName: NameString


class BatchGetCrawlersResponse(BaseModel):
    Crawlers: Optional[CrawlerList] = None
    CrawlersNotFound: Optional[CrawlerNameList] = None


class BatchGetDataQualityResultResponse(BaseModel):
    Results: DataQualityResultsList
    ResultsNotFound: Optional[DataQualityResultIds] = None


class BatchGetPartitionResponse(BaseModel):
    Partitions: Optional[PartitionList] = None
    UnprocessedKeys: Optional[BatchGetPartitionValueList] = None


class BatchUpdatePartitionRequestEntry(BaseModel):
    PartitionInput_1: PartitionInput = Field(..., alias='PartitionInput')
    PartitionValueList: BoundedPartitionValueList


class BatchUpdatePartitionRequestEntryList(
    RootModel[List[BatchUpdatePartitionRequestEntry]]
):
    root: List[BatchUpdatePartitionRequestEntry] = Field(
        ..., max_length=100, min_length=1
    )


class ColumnStatistics(BaseModel):
    AnalyzedTime: Timestamp
    ColumnName: NameString
    ColumnType: TypeString
    StatisticsData: ColumnStatisticsData


class ColumnStatisticsError(BaseModel):
    ColumnStatistics_1: Optional[ColumnStatistics] = Field(
        None, alias='ColumnStatistics'
    )
    Error: Optional[ErrorDetail] = None


class ColumnStatisticsErrors(RootModel[List[ColumnStatisticsError]]):
    root: List[ColumnStatisticsError]


class ColumnStatisticsList(RootModel[List[ColumnStatistics]]):
    root: List[ColumnStatistics]


class CreatePartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    PartitionInput_1: PartitionInput = Field(..., alias='PartitionInput')
    TableName: NameString


class GetColumnStatisticsForPartitionResponse(BaseModel):
    ColumnStatisticsList_1: Optional[ColumnStatisticsList] = Field(
        None, alias='ColumnStatisticsList'
    )
    Errors: Optional[ColumnErrors] = None


class GetColumnStatisticsForTableResponse(BaseModel):
    ColumnStatisticsList_1: Optional[ColumnStatisticsList] = Field(
        None, alias='ColumnStatisticsList'
    )
    Errors: Optional[ColumnErrors] = None


class GetPartitionIndexesResponse(BaseModel):
    NextToken: Optional[Token] = None
    PartitionIndexDescriptorList_1: Optional[PartitionIndexDescriptorList] = Field(
        None, alias='PartitionIndexDescriptorList'
    )


class GetPartitionResponse(BaseModel):
    Partition_1: Optional[Partition] = Field(None, alias='Partition')


class GetPartitionsResponse(BaseModel):
    NextToken: Optional[Token] = None
    Partitions: Optional[PartitionList] = None


class GetUnfilteredPartitionMetadataResponse(BaseModel):
    AuthorizedColumns: Optional[NameStringList] = None
    IsRegisteredWithLakeFormation: Optional[Boolean] = None
    Partition_1: Optional[Partition] = Field(None, alias='Partition')


class GetUnfilteredPartitionsMetadataResponse(BaseModel):
    NextToken: Optional[Token] = None
    UnfilteredPartitions: Optional[UnfilteredPartitionList] = None


class GetWorkflowRunResponse(BaseModel):
    Run: Optional[WorkflowRun] = None


class GetWorkflowRunsResponse(BaseModel):
    NextToken: Optional[GenericString] = None
    Runs: Optional[WorkflowRuns] = None


class UpdateColumnStatisticsForPartitionResponse(BaseModel):
    Errors: Optional[ColumnStatisticsErrors] = None


class UpdateColumnStatisticsForTableResponse(BaseModel):
    Errors: Optional[ColumnStatisticsErrors] = None


class UpdateColumnStatisticsList(RootModel[List[ColumnStatistics]]):
    root: List[ColumnStatistics] = Field(..., max_length=25, min_length=0)


class Workflow(BaseModel):
    BlueprintDetails_1: Optional[BlueprintDetails] = Field(
        None, alias='BlueprintDetails'
    )
    CreatedOn: Optional[TimestampValue] = None
    DefaultRunProperties: Optional[WorkflowRunProperties] = None
    Description: Optional[GenericString] = None
    Graph: Optional[WorkflowGraph] = None
    LastModifiedOn: Optional[TimestampValue] = None
    LastRun: Optional[WorkflowRun] = None
    MaxConcurrentRuns: Optional[NullableInteger] = None
    Name: Optional[NameString] = None


class Workflows(RootModel[List[Workflow]]):
    root: List[Workflow] = Field(..., max_length=25, min_length=1)


class BatchGetWorkflowsResponse(BaseModel):
    MissingWorkflows: Optional[WorkflowNames] = None
    Workflows_1: Optional[Workflows] = Field(None, alias='Workflows')


class BatchUpdatePartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    Entries: BatchUpdatePartitionRequestEntryList
    TableName: NameString


class GetWorkflowResponse(BaseModel):
    Workflow_1: Optional[Workflow] = Field(None, alias='Workflow')


class UpdateColumnStatisticsForPartitionRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ColumnStatisticsList: UpdateColumnStatisticsList
    DatabaseName: NameString
    PartitionValues: ValueStringList
    TableName: NameString


class UpdateColumnStatisticsForTableRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ColumnStatisticsList: UpdateColumnStatisticsList
    DatabaseName: NameString
    TableName: NameString


class ApplyMapping(BaseModel):
    Inputs: OneInput
    Mapping: Mappings
    Name: NodeName


class BatchGetJobsResponse(BaseModel):
    Jobs: Optional[JobList] = None
    JobsNotFound: Optional[JobNameList] = None


class CodeGenConfigurationNode(BaseModel):
    Aggregate_1: Optional[Aggregate] = Field(None, alias='Aggregate')
    ApplyMapping_1: Optional[ApplyMapping] = Field(None, alias='ApplyMapping')
    AthenaConnectorSource_1: Optional[AthenaConnectorSource] = Field(
        None, alias='AthenaConnectorSource'
    )
    CatalogDeltaSource_1: Optional[CatalogDeltaSource] = Field(
        None, alias='CatalogDeltaSource'
    )
    CatalogHudiSource_1: Optional[CatalogHudiSource] = Field(
        None, alias='CatalogHudiSource'
    )
    CatalogKafkaSource_1: Optional[CatalogKafkaSource] = Field(
        None, alias='CatalogKafkaSource'
    )
    CatalogKinesisSource_1: Optional[CatalogKinesisSource] = Field(
        None, alias='CatalogKinesisSource'
    )
    CatalogSource_1: Optional[CatalogSource] = Field(None, alias='CatalogSource')
    CatalogTarget: Optional[BasicCatalogTarget] = None
    CustomCode_1: Optional[CustomCode] = Field(None, alias='CustomCode')
    DirectJDBCSource_1: Optional[DirectJDBCSource] = Field(
        None, alias='DirectJDBCSource'
    )
    DirectKafkaSource_1: Optional[DirectKafkaSource] = Field(
        None, alias='DirectKafkaSource'
    )
    DirectKinesisSource_1: Optional[DirectKinesisSource] = Field(
        None, alias='DirectKinesisSource'
    )
    DropDuplicates_1: Optional[DropDuplicates] = Field(None, alias='DropDuplicates')
    DropFields_1: Optional[DropFields] = Field(None, alias='DropFields')
    DropNullFields_1: Optional[DropNullFields] = Field(None, alias='DropNullFields')
    DynamicTransform_1: Optional[DynamicTransform] = Field(
        None, alias='DynamicTransform'
    )
    DynamoDBCatalogSource_1: Optional[DynamoDBCatalogSource] = Field(
        None, alias='DynamoDBCatalogSource'
    )
    EvaluateDataQuality_1: Optional[EvaluateDataQuality] = Field(
        None, alias='EvaluateDataQuality'
    )
    FillMissingValues_1: Optional[FillMissingValues] = Field(
        None, alias='FillMissingValues'
    )
    Filter_1: Optional[Filter] = Field(None, alias='Filter')
    GovernedCatalogSource_1: Optional[GovernedCatalogSource] = Field(
        None, alias='GovernedCatalogSource'
    )
    GovernedCatalogTarget_1: Optional[GovernedCatalogTarget] = Field(
        None, alias='GovernedCatalogTarget'
    )
    JDBCConnectorSource_1: Optional[JDBCConnectorSource] = Field(
        None, alias='JDBCConnectorSource'
    )
    JDBCConnectorTarget_1: Optional[JDBCConnectorTarget] = Field(
        None, alias='JDBCConnectorTarget'
    )
    Join_1: Optional[Join] = Field(None, alias='Join')
    Merge_1: Optional[Merge] = Field(None, alias='Merge')
    MicrosoftSQLServerCatalogSource_1: Optional[MicrosoftSQLServerCatalogSource] = (
        Field(None, alias='MicrosoftSQLServerCatalogSource')
    )
    MicrosoftSQLServerCatalogTarget_1: Optional[MicrosoftSQLServerCatalogTarget] = (
        Field(None, alias='MicrosoftSQLServerCatalogTarget')
    )
    MySQLCatalogSource_1: Optional[MySQLCatalogSource] = Field(
        None, alias='MySQLCatalogSource'
    )
    MySQLCatalogTarget_1: Optional[MySQLCatalogTarget] = Field(
        None, alias='MySQLCatalogTarget'
    )
    OracleSQLCatalogSource_1: Optional[OracleSQLCatalogSource] = Field(
        None, alias='OracleSQLCatalogSource'
    )
    OracleSQLCatalogTarget_1: Optional[OracleSQLCatalogTarget] = Field(
        None, alias='OracleSQLCatalogTarget'
    )
    PIIDetection_1: Optional[PIIDetection] = Field(None, alias='PIIDetection')
    PostgreSQLCatalogSource_1: Optional[PostgreSQLCatalogSource] = Field(
        None, alias='PostgreSQLCatalogSource'
    )
    PostgreSQLCatalogTarget_1: Optional[PostgreSQLCatalogTarget] = Field(
        None, alias='PostgreSQLCatalogTarget'
    )
    RedshiftSource_1: Optional[RedshiftSource] = Field(None, alias='RedshiftSource')
    RedshiftTarget_1: Optional[RedshiftTarget] = Field(None, alias='RedshiftTarget')
    RelationalCatalogSource_1: Optional[RelationalCatalogSource] = Field(
        None, alias='RelationalCatalogSource'
    )
    RenameField_1: Optional[RenameField] = Field(None, alias='RenameField')
    S3CatalogDeltaSource_1: Optional[S3CatalogDeltaSource] = Field(
        None, alias='S3CatalogDeltaSource'
    )
    S3CatalogHudiSource_1: Optional[S3CatalogHudiSource] = Field(
        None, alias='S3CatalogHudiSource'
    )
    S3CatalogSource_1: Optional[S3CatalogSource] = Field(None, alias='S3CatalogSource')
    S3CatalogTarget_1: Optional[S3CatalogTarget] = Field(None, alias='S3CatalogTarget')
    S3CsvSource_1: Optional[S3CsvSource] = Field(None, alias='S3CsvSource')
    S3DeltaCatalogTarget_1: Optional[S3DeltaCatalogTarget] = Field(
        None, alias='S3DeltaCatalogTarget'
    )
    S3DeltaDirectTarget_1: Optional[S3DeltaDirectTarget] = Field(
        None, alias='S3DeltaDirectTarget'
    )
    S3DeltaSource_1: Optional[S3DeltaSource] = Field(None, alias='S3DeltaSource')
    S3DirectTarget_1: Optional[S3DirectTarget] = Field(None, alias='S3DirectTarget')
    S3GlueParquetTarget_1: Optional[S3GlueParquetTarget] = Field(
        None, alias='S3GlueParquetTarget'
    )
    S3HudiCatalogTarget_1: Optional[S3HudiCatalogTarget] = Field(
        None, alias='S3HudiCatalogTarget'
    )
    S3HudiDirectTarget_1: Optional[S3HudiDirectTarget] = Field(
        None, alias='S3HudiDirectTarget'
    )
    S3HudiSource_1: Optional[S3HudiSource] = Field(None, alias='S3HudiSource')
    S3JsonSource_1: Optional[S3JsonSource] = Field(None, alias='S3JsonSource')
    S3ParquetSource_1: Optional[S3ParquetSource] = Field(None, alias='S3ParquetSource')
    SelectFields_1: Optional[SelectFields] = Field(None, alias='SelectFields')
    SelectFromCollection_1: Optional[SelectFromCollection] = Field(
        None, alias='SelectFromCollection'
    )
    SparkConnectorSource_1: Optional[SparkConnectorSource] = Field(
        None, alias='SparkConnectorSource'
    )
    SparkConnectorTarget_1: Optional[SparkConnectorTarget] = Field(
        None, alias='SparkConnectorTarget'
    )
    SparkSQL_1: Optional[SparkSQL] = Field(None, alias='SparkSQL')
    Spigot_1: Optional[Spigot] = Field(None, alias='Spigot')
    SplitFields_1: Optional[SplitFields] = Field(None, alias='SplitFields')
    Union_1: Optional[Union] = Field(None, alias='Union')


class CodeGenConfigurationNodes(
    RootModel[Optional[Dict[str, CodeGenConfigurationNode]]]
):
    root: Optional[Dict[str, CodeGenConfigurationNode]] = None


class CreateJobRequest(BaseModel):
    AllocatedCapacity: Optional[IntegerValue] = None
    CodeGenConfigurationNodes_1: Optional[CodeGenConfigurationNodes] = Field(
        None, alias='CodeGenConfigurationNodes'
    )
    Command: JobCommand
    Connections: Optional[ConnectionsList] = None
    DefaultArguments: Optional[GenericMap] = None
    Description: Optional[DescriptionString] = None
    ExecutionClass_1: Optional[ExecutionClass] = Field(None, alias='ExecutionClass')
    ExecutionProperty_1: Optional[ExecutionProperty] = Field(
        None, alias='ExecutionProperty'
    )
    GlueVersion: Optional[GlueVersionString] = None
    LogUri: Optional[UriString] = None
    MaxCapacity: Optional[NullableDouble] = None
    MaxRetries_1: Optional[MaxRetries] = Field(None, alias='MaxRetries')
    Name: NameString
    NonOverridableArguments: Optional[GenericMap] = None
    NotificationProperty_1: Optional[NotificationProperty] = Field(
        None, alias='NotificationProperty'
    )
    NumberOfWorkers: Optional[NullableInteger] = None
    Role: RoleString
    SecurityConfiguration: Optional[NameString] = None
    SourceControlDetails_1: Optional[SourceControlDetails] = Field(
        None, alias='SourceControlDetails'
    )
    Tags: Optional[TagsMap] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class GetJobResponse(BaseModel):
    Job_1: Optional[Job] = Field(None, alias='Job')


class GetJobsResponse(BaseModel):
    Jobs: Optional[JobList] = None
    NextToken: Optional[GenericString] = None


class Job(BaseModel):
    AllocatedCapacity: Optional[IntegerValue] = None
    CodeGenConfigurationNodes_1: Optional[CodeGenConfigurationNodes] = Field(
        None, alias='CodeGenConfigurationNodes'
    )
    Command: Optional[JobCommand] = None
    Connections: Optional[ConnectionsList] = None
    CreatedOn: Optional[TimestampValue] = None
    DefaultArguments: Optional[GenericMap] = None
    Description: Optional[DescriptionString] = None
    ExecutionClass_1: Optional[ExecutionClass] = Field(None, alias='ExecutionClass')
    ExecutionProperty_1: Optional[ExecutionProperty] = Field(
        None, alias='ExecutionProperty'
    )
    GlueVersion: Optional[GlueVersionString] = None
    LastModifiedOn: Optional[TimestampValue] = None
    LogUri: Optional[UriString] = None
    MaxCapacity: Optional[NullableDouble] = None
    MaxRetries_1: Optional[MaxRetries] = Field(None, alias='MaxRetries')
    Name: Optional[NameString] = None
    NonOverridableArguments: Optional[GenericMap] = None
    NotificationProperty_1: Optional[NotificationProperty] = Field(
        None, alias='NotificationProperty'
    )
    NumberOfWorkers: Optional[NullableInteger] = None
    Role: Optional[RoleString] = None
    SecurityConfiguration: Optional[NameString] = None
    SourceControlDetails_1: Optional[SourceControlDetails] = Field(
        None, alias='SourceControlDetails'
    )
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class JobList(RootModel[List[Job]]):
    root: List[Job]


class JobUpdate(BaseModel):
    AllocatedCapacity: Optional[IntegerValue] = None
    CodeGenConfigurationNodes_1: Optional[CodeGenConfigurationNodes] = Field(
        None, alias='CodeGenConfigurationNodes'
    )
    Command: Optional[JobCommand] = None
    Connections: Optional[ConnectionsList] = None
    DefaultArguments: Optional[GenericMap] = None
    Description: Optional[DescriptionString] = None
    ExecutionClass_1: Optional[ExecutionClass] = Field(None, alias='ExecutionClass')
    ExecutionProperty_1: Optional[ExecutionProperty] = Field(
        None, alias='ExecutionProperty'
    )
    GlueVersion: Optional[GlueVersionString] = None
    LogUri: Optional[UriString] = None
    MaxCapacity: Optional[NullableDouble] = None
    MaxRetries_1: Optional[MaxRetries] = Field(None, alias='MaxRetries')
    NonOverridableArguments: Optional[GenericMap] = None
    NotificationProperty_1: Optional[NotificationProperty] = Field(
        None, alias='NotificationProperty'
    )
    NumberOfWorkers: Optional[NullableInteger] = None
    Role: Optional[RoleString] = None
    SecurityConfiguration: Optional[NameString] = None
    SourceControlDetails_1: Optional[SourceControlDetails] = Field(
        None, alias='SourceControlDetails'
    )
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    WorkerType_1: Optional[WorkerType] = Field(None, alias='WorkerType')


class Mapping(BaseModel):
    Children: Optional[Mappings] = None
    Dropped: Optional[BoxedBoolean] = None
    FromPath: Optional[EnclosedInStringProperties] = None
    FromType: Optional[EnclosedInStringProperty] = None
    ToKey: Optional[EnclosedInStringProperty] = None
    ToType: Optional[EnclosedInStringProperty] = None


class Mappings(RootModel[List[Mapping]]):
    root: List[Mapping]


class UpdateJobRequest(BaseModel):
    JobName: NameString
    JobUpdate_1: JobUpdate = Field(..., alias='JobUpdate')


ApplyMapping.model_rebuild()
BatchGetJobsResponse.model_rebuild()
GetJobResponse.model_rebuild()
GetJobsResponse.model_rebuild()
Mapping.model_rebuild()
